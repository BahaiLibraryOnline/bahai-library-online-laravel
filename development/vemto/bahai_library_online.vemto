{
  "tables": {
    "basicrelationships": {
      "basicrelationships": {
        "count": 18,
        "lastPrimaryKey": 34,
        "index": {
          "3": {
            "hasMany": {
              "basicrelationships.inverseId": [
                4
              ],
              "inputs.relationshipId": [
                30
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "4": {
            "hasMany": {
              "basicrelationships.inverseId": [
                3
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "7": {
            "hasMany": {
              "basicrelationships.inverseId": [
                8
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "8": {
            "hasMany": {
              "basicrelationships.inverseId": [
                7
              ],
              "inputs.relationshipId": [
                14
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "9": {
            "hasMany": {
              "basicrelationships.inverseId": [
                10
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "10": {
            "hasMany": {
              "basicrelationships.inverseId": [
                9
              ],
              "inputs.relationshipId": [
                35
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "15": {
            "hasMany": {
              "basicrelationships.inverseId": [
                16
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "16": {
            "hasMany": {
              "basicrelationships.inverseId": [
                15
              ],
              "inputs.relationshipId": [
                137
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "19": {
            "hasMany": {
              "basicrelationships.inverseId": [
                20
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "20": {
            "hasMany": {
              "basicrelationships.inverseId": [
                19
              ],
              "inputs.relationshipId": [
                138
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "21": {
            "hasMany": {
              "basicrelationships.inverseId": [
                22
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "22": {
            "hasMany": {
              "basicrelationships.inverseId": [
                21
              ],
              "inputs.relationshipId": [
                139
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "29": {
            "hasMany": {
              "basicrelationships.inverseId": [
                30
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "30": {
            "hasMany": {
              "basicrelationships.inverseId": [
                29
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "31": {
            "hasMany": {
              "basicrelationships.inverseId": [
                32
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "32": {
            "hasMany": {
              "basicrelationships.inverseId": [
                31
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "33": {
            "hasMany": {
              "basicrelationships.inverseId": [
                34
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "34": {
            "hasMany": {
              "basicrelationships.inverseId": [
                33
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          }
        },
        "additionalIndexes": {},
        "items": [],
        "relations": [],
        "reladbVersion": "0.3.1"
      },
      "item_20": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "modelId": 39,
        "inverseId": 19,
        "localModelId": 43,
        "parentKeyId": 189,
        "foreignKeyId": 234,
        "name": "document",
        "type": "belongsTo",
        "foreignOriginalName": "document_id",
        "hasApi": true,
        "id": 20,
        "createdAt": "2021-09-29 21:18:14",
        "updatedAt": "2021-09-29 21:18:14"
      },
      "item_19": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "modelId": 43,
        "inverseId": 20,
        "localModelId": 39,
        "parentKeyId": 189,
        "foreignKeyId": 234,
        "name": "activities",
        "type": "hasMany",
        "foreignOriginalName": "document_id",
        "hasApi": true,
        "id": 19,
        "createdAt": "2021-09-29 21:18:14",
        "updatedAt": "2021-09-29 21:18:14"
      },
      "item_22": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "modelId": 31,
        "inverseId": 21,
        "localModelId": 43,
        "parentKeyId": 164,
        "foreignKeyId": 235,
        "name": "user",
        "type": "belongsTo",
        "foreignOriginalName": "user_id",
        "hasApi": true,
        "id": 22,
        "createdAt": "2021-09-29 21:18:23",
        "updatedAt": "2021-09-29 21:18:23"
      },
      "item_21": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "modelId": 43,
        "inverseId": 22,
        "localModelId": 31,
        "parentKeyId": 164,
        "foreignKeyId": 235,
        "name": "activities",
        "type": "hasMany",
        "foreignOriginalName": "user_id",
        "hasApi": true,
        "id": 21,
        "createdAt": "2021-09-29 21:18:23",
        "updatedAt": "2021-09-29 21:18:23"
      },
      "item_15": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "modelId": 40,
        "inverseId": 16,
        "localModelId": 39,
        "parentKeyId": 189,
        "foreignKeyId": 217,
        "name": "editions",
        "type": "hasMany",
        "foreignOriginalName": "document_id",
        "hasApi": true,
        "id": 15,
        "createdAt": "2021-04-07 14:27:22",
        "updatedAt": "2021-09-29 20:59:18"
      },
      "item_16": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "modelId": 39,
        "inverseId": 15,
        "localModelId": 40,
        "parentKeyId": 189,
        "foreignKeyId": 217,
        "name": "document",
        "type": "belongsTo",
        "foreignOriginalName": "document_id",
        "hasApi": true,
        "id": 16,
        "createdAt": "2021-04-07 14:27:21",
        "updatedAt": "2021-09-29 20:59:18"
      }
    },
    "cruds": {
      "cruds": {
        "count": 15,
        "lastPrimaryKey": 24,
        "index": {
          "1": {
            "hasMany": {
              "inputs.crudId": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "2": {
            "hasMany": {
              "inputs.crudId": [
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "3": {
            "hasMany": {
              "inputs.crudId": [
                26,
                27,
                28,
                29
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "4": {
            "hasMany": {
              "inputs.crudId": [
                30,
                31
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "5": {
            "hasMany": {
              "inputs.crudId": [
                32,
                33,
                34
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "6": {
            "hasMany": {
              "inputs.crudId": [
                35,
                36
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "15": {
            "hasMany": {
              "inputs.crudId": [
                82,
                83,
                84
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "16": {
            "hasMany": {
              "inputs.crudId": [
                85
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "17": {
            "hasMany": {
              "inputs.crudId": [
                86,
                87
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "18": {
            "hasMany": {
              "inputs.crudId": [
                89,
                88,
                90
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "19": {
            "hasMany": {
              "inputs.crudId": [
                95,
                96,
                94,
                93,
                92,
                91
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "20": {
            "hasMany": {
              "inputs.crudId": [
                97,
                98,
                99,
                100
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "22": {
            "hasMany": {
              "inputs.crudId": [
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                119,
                120,
                111,
                122,
                121,
                118,
                123,
                102,
                126
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "23": {
            "hasMany": {
              "inputs.crudId": [
                137,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "24": {
            "hasMany": {
              "inputs.crudId": [
                138,
                139,
                141,
                140
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          }
        },
        "additionalIndexes": {},
        "items": [],
        "relations": [],
        "reladbVersion": "0.3.1"
      },
      "item_22": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "Documents",
        "url": "documents",
        "modelId": 39,
        "projectId": 3,
        "titles": {
          "index": "Documents List",
          "create": "Add A Document",
          "edit": "Edit A Document",
          "update": "Update Document",
          "show": "Show A Document"
        },
        "hasApi": true,
        "id": 22,
        "createdAt": "2021-04-08 15:06:19",
        "updatedAt": "2021-09-29 20:59:18"
      },
      "item_18": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "Collections",
        "url": "collections",
        "modelId": 29,
        "projectId": 3,
        "titles": {
          "index": "Collections List",
          "create": "Create Collection",
          "edit": "Edit Collection",
          "update": "Update Collection",
          "show": "Show Collection"
        },
        "hasApi": true,
        "id": 18,
        "createdAt": "2021-04-08 15:13:55",
        "updatedAt": "2021-09-29 20:59:18"
      },
      "item_16": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "Tags",
        "url": "tags",
        "modelId": 27,
        "projectId": 3,
        "titles": {
          "index": "Tags List",
          "create": "Create Tag",
          "edit": "Edit Tag",
          "update": "Update Tag",
          "show": "Show Tag"
        },
        "hasApi": true,
        "id": 16,
        "createdAt": "2021-04-08 15:16:04",
        "updatedAt": "2021-09-29 20:59:18"
      },
      "item_20": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "Users",
        "url": "users",
        "modelId": 31,
        "projectId": 3,
        "titles": {
          "index": "Users List",
          "create": "Create User",
          "edit": "Edit User",
          "update": "Update User",
          "show": "Show User"
        },
        "hasApi": true,
        "id": 20,
        "createdAt": "2021-04-08 15:18:26",
        "updatedAt": "2021-09-29 20:59:18"
      },
      "item_17": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "Languages",
        "url": "languages",
        "modelId": 28,
        "projectId": 3,
        "titles": {
          "index": "Languages List",
          "create": "Create Language",
          "edit": "Edit Language",
          "update": "Update Language",
          "show": "Show Language"
        },
        "hasApi": true,
        "id": 17,
        "createdAt": "2021-04-08 15:22:00",
        "updatedAt": "2021-09-29 20:59:18"
      },
      "item_15": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "Locations",
        "url": "locations",
        "modelId": 26,
        "projectId": 3,
        "titles": {
          "index": "Locations List",
          "create": "Create Location",
          "edit": "Edit Location",
          "update": "Update Location",
          "show": "Show Location"
        },
        "hasApi": true,
        "id": 15,
        "createdAt": "2021-04-08 15:22:22",
        "updatedAt": "2021-09-29 20:59:18"
      },
      "item_19": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "Creators",
        "url": "creators",
        "modelId": 30,
        "projectId": 3,
        "titles": {
          "index": "Creators List",
          "create": "Create Creator",
          "edit": "Edit Creator",
          "update": "Update Creator",
          "show": "Show Creator"
        },
        "hasApi": true,
        "id": 19,
        "createdAt": "2021-04-08 15:22:43",
        "updatedAt": "2021-09-29 20:59:18"
      },
      "item_23": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "Editions",
        "url": "editions",
        "modelId": 40,
        "projectId": 3,
        "hasManyDetailId": null,
        "titles": {
          "index": "Editions List",
          "create": "Create Edition",
          "edit": "Edit Edition",
          "update": "Update Edition",
          "show": "Show Edition"
        },
        "hasApi": true,
        "isHasManyDetail": false,
        "isForLivewire": false,
        "id": 23,
        "createdAt": "2021-10-08 22:14:47",
        "updatedAt": "2021-10-08 22:14:47"
      },
      "item_24": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "Activities",
        "url": "activities",
        "modelId": 43,
        "projectId": 3,
        "hasManyDetailId": null,
        "titles": {
          "index": "Activities List",
          "create": "Create Activity",
          "edit": "Edit Activity",
          "update": "Update Activity",
          "show": "Show Activity"
        },
        "hasApi": true,
        "isHasManyDetail": false,
        "isForLivewire": false,
        "id": 24,
        "createdAt": "2021-10-08 22:14:53",
        "updatedAt": "2021-10-08 22:14:53"
      }
    },
    "entities": {
      "entities": {
        "count": 27,
        "lastPrimaryKey": 56,
        "index": {
          "1": {
            "hasMany": {
              "fields.entityId": [
                1,
                2,
                3,
                4,
                5,
                6
              ],
              "projects.authModelId": [
                1
              ],
              "foreigns.relatedEntityId": [
                7
              ],
              "manytomanyrelationships.localModelId": [
                1
              ],
              "manytomanyrelationships.modelId": [
                2
              ],
              "cruds.modelId": [
                5
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "2": {
            "hasMany": {
              "fields.entityId": [
                7,
                18,
                19,
                17,
                21,
                20,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29
              ],
              "basicrelationships.localModelId": [
                4,
                7
              ],
              "basicrelationships.modelId": [
                3,
                8
              ],
              "foreigns.relatedEntityId": [
                2,
                4,
                6
              ],
              "manytomanyrelationships.modelId": [
                1
              ],
              "manytomanyrelationships.localModelId": [
                2
              ],
              "cruds.modelId": [
                1
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "3": {
            "hasMany": {
              "fields.entityId": [
                8,
                47,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46
              ],
              "basicrelationships.modelId": [
                7,
                10
              ],
              "basicrelationships.localModelId": [
                8,
                9
              ],
              "foreigns.relatedEntityId": [
                5
              ],
              "cruds.modelId": [
                2
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "5": {
            "hasMany": {
              "fields.entityId": [
                30,
                31,
                32
              ],
              "basicrelationships.localModelId": [
                3
              ],
              "basicrelationships.modelId": [
                4
              ],
              "cruds.modelId": [
                4
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "7": {
            "hasMany": {
              "fields.entityId": [
                48,
                49,
                50
              ],
              "basicrelationships.modelId": [
                9
              ],
              "basicrelationships.localModelId": [
                10
              ],
              "cruds.modelId": [
                6
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "8": {
            "hasMany": {
              "fields.entityId": [
                51,
                52,
                53,
                54,
                55
              ],
              "cruds.modelId": [
                3
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "9": {
            "hasMany": {
              "fields.entityId": [
                56,
                57
              ],
              "manytomanyrelationships.pivotId": [
                1,
                2
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "26": {
            "hasMany": {
              "fields.entityId": [
                144,
                145,
                146,
                147
              ],
              "foreigns.relatedEntityId": [
                60
              ],
              "manytomanyrelationships.localModelId": [
                32
              ],
              "manytomanyrelationships.modelId": [
                31
              ],
              "cruds.modelId": [
                15
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "27": {
            "hasMany": {
              "fields.entityId": [
                148,
                149
              ],
              "foreigns.relatedEntityId": [
                30
              ],
              "manytomanyrelationships.localModelId": [
                17
              ],
              "manytomanyrelationships.modelId": [
                18
              ],
              "cruds.modelId": [
                16
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "28": {
            "hasMany": {
              "fields.entityId": [
                150,
                151,
                152
              ],
              "foreigns.relatedEntityId": [
                31
              ],
              "manytomanyrelationships.localModelId": [
                19
              ],
              "manytomanyrelationships.modelId": [
                20
              ],
              "cruds.modelId": [
                17
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "29": {
            "hasMany": {
              "fields.entityId": [
                153,
                154,
                155,
                156
              ],
              "foreigns.relatedEntityId": [
                67
              ],
              "manytomanyrelationships.modelId": [
                38
              ],
              "manytomanyrelationships.localModelId": [
                37
              ],
              "cruds.modelId": [
                18
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "30": {
            "hasMany": {
              "fields.entityId": [
                157,
                162,
                163,
                161,
                160,
                159,
                158
              ],
              "foreigns.relatedEntityId": [
                69
              ],
              "manytomanyrelationships.localModelId": [
                39
              ],
              "manytomanyrelationships.modelId": [
                40
              ],
              "cruds.modelId": [
                19
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "31": {
            "hasMany": {
              "fields.entityId": [
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                173,
                174
              ],
              "projects.authModelId": [
                3
              ],
              "foreigns.relatedEntityId": [
                49
              ],
              "manytomanyrelationships.modelId": [],
              "manytomanyrelationships.localModelId": [],
              "cruds.modelId": [
                20
              ],
              "basicrelationships.localModelId": [
                21
              ],
              "basicrelationships.modelId": [
                22
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "35": {
            "hasMany": {
              "fields.entityId": [
                182,
                181
              ],
              "manytomanyrelationships.pivotId": [
                18,
                17
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "36": {
            "hasMany": {
              "fields.entityId": [
                183,
                184
              ],
              "manytomanyrelationships.pivotId": [
                19,
                20
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "39": {
            "hasMany": {
              "fields.entityId": [
                189,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                206,
                207,
                208,
                209,
                210,
                211,
                190,
                214
              ],
              "basicrelationships.localModelId": [
                15,
                19
              ],
              "basicrelationships.modelId": [
                16,
                20
              ],
              "foreigns.relatedEntityId": [
                43,
                42,
                46,
                48,
                61,
                66,
                68
              ],
              "manytomanyrelationships.localModelId": [
                20,
                18,
                31,
                38,
                40
              ],
              "manytomanyrelationships.modelId": [
                19,
                17,
                32,
                37,
                39
              ],
              "cruds.modelId": [
                22
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "40": {
            "hasMany": {
              "fields.entityId": [
                215,
                217,
                216,
                218,
                219,
                220,
                221,
                222,
                223,
                224,
                225,
                226
              ],
              "basicrelationships.localModelId": [
                16
              ],
              "basicrelationships.modelId": [
                15
              ],
              "cruds.modelId": [
                23
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "43": {
            "hasMany": {
              "fields.entityId": [
                232,
                234,
                235,
                237,
                236
              ],
              "basicrelationships.modelId": [
                19,
                21
              ],
              "basicrelationships.localModelId": [
                20,
                22
              ],
              "cruds.modelId": [
                24
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "45": {
            "hasMany": {
              "fields.entityId": [
                240,
                241,
                242,
                243,
                244,
                276,
                239
              ],
              "projects.authModelId": [
                4
              ],
              "foreigns.relatedEntityId": [
                58
              ],
              "manytomanyrelationships.modelId": [
                30
              ],
              "manytomanyrelationships.localModelId": [
                29
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "46": {
            "hasMany": {
              "fields.entityId": [
                246,
                248,
                247,
                249,
                250,
                251,
                252,
                245
              ],
              "foreigns.relatedEntityId": [
                57,
                59
              ],
              "manytomanyrelationships.localModelId": [
                30
              ],
              "manytomanyrelationships.modelId": [
                29
              ],
              "basicrelationships.localModelId": [
                33
              ],
              "basicrelationships.modelId": [
                34
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "48": {
            "hasMany": {
              "fields.entityId": [
                256,
                262,
                258,
                259,
                260,
                261,
                263,
                264,
                283
              ],
              "basicrelationships.modelId": [
                30,
                32,
                33
              ],
              "basicrelationships.localModelId": [
                29,
                31,
                34
              ],
              "foreigns.relatedEntityId": [
                55,
                56
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "49": {
            "hasMany": {
              "fields.entityId": [
                266,
                268,
                265,
                279,
                278
              ],
              "basicrelationships.modelId": [
                29
              ],
              "basicrelationships.localModelId": [
                30
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "50": {
            "hasMany": {
              "fields.entityId": [
                273,
                274,
                270,
                280,
                272,
                277
              ],
              "basicrelationships.modelId": [
                31
              ],
              "basicrelationships.localModelId": [
                32
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "51": {
            "hasMany": {
              "fields.entityId": [
                281,
                282
              ],
              "manytomanyrelationships.pivotId": [
                29,
                30
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "52": {
            "hasMany": {
              "fields.entityId": [
                285,
                284
              ],
              "manytomanyrelationships.pivotId": [
                31,
                32
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "55": {
            "hasMany": {
              "fields.entityId": [
                290,
                291
              ],
              "manytomanyrelationships.pivotId": [
                37,
                38
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "56": {
            "hasMany": {
              "fields.entityId": [
                292,
                293
              ],
              "manytomanyrelationships.pivotId": [
                39,
                40
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          }
        },
        "additionalIndexes": {},
        "items": [],
        "relations": [],
        "reladbVersion": "0.3.1"
      },
      "item_43": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "Activity",
        "type": "model",
        "plural": "Activities",
        "pluralAndSingularAreSame": false,
        "table": "activities",
        "projectId": 3,
        "top": "996px",
        "left": "953px",
        "pivot": false,
        "softDeletes": false,
        "timestamps": true,
        "migrationName": "2021_04_07_000000_create_activities_table.php",
        "foreignsMigrationName": "2021_04_07_009010_add_foreigns_to_activities_table.php",
        "oldMigrationName": null,
        "oldForeignsMigrationName": null,
        "id": 43,
        "createdAt": "2021-09-29 21:17:29",
        "updatedAt": "2021-10-11 18:15:18"
      },
      "item_29": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "Collection",
        "type": "model",
        "plural": "Collections",
        "table": "collections",
        "projectId": 3,
        "top": "453px",
        "left": "-475px",
        "pivot": false,
        "softDeletes": false,
        "timestamps": true,
        "migrationName": "2021_04_07_000009_create_collections_table.php",
        "foreignsMigrationName": null,
        "id": 29,
        "createdAt": "2021-04-07 06:29:21",
        "updatedAt": "2021-09-30 09:55:35"
      },
      "item_55": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "projectId": 3,
        "name": "collection_document",
        "type": "table",
        "table": "collection_document",
        "plural": "",
        "top": "670px",
        "left": "-32px",
        "pivot": true,
        "softDeletes": false,
        "timestamps": false,
        "pluralAndSingularAreSame": false,
        "migrationName": "2021_04_07_000010_create_collection_document_table.php",
        "foreignsMigrationName": "2021_04_07_009011_add_foreigns_to_collection_document_table.php",
        "oldMigrationName": null,
        "oldForeignsMigrationName": null,
        "id": 55,
        "createdAt": "2021-10-11 20:50:41",
        "updatedAt": "2021-10-11 20:51:51"
      },
      "item_30": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "Creator",
        "type": "model",
        "plural": "Creators",
        "table": "creators",
        "projectId": 3,
        "top": "1381px",
        "left": "1279px",
        "pivot": false,
        "softDeletes": false,
        "timestamps": true,
        "migrationName": "2021_04_07_000011_create_creators_table.php",
        "foreignsMigrationName": null,
        "id": 30,
        "createdAt": "2021-04-07 06:28:58",
        "updatedAt": "2021-10-08 22:13:19"
      },
      "item_56": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "projectId": 3,
        "name": "creator_document",
        "type": "table",
        "table": "creator_document",
        "plural": "",
        "top": "1580px",
        "left": "786px",
        "pivot": true,
        "softDeletes": false,
        "timestamps": false,
        "pluralAndSingularAreSame": false,
        "migrationName": "2021_04_07_000012_create_creator_document_table.php",
        "foreignsMigrationName": "2021_04_07_009012_add_foreigns_to_creator_document_table.php",
        "oldMigrationName": null,
        "oldForeignsMigrationName": null,
        "id": 56,
        "createdAt": "2021-10-11 20:51:06",
        "updatedAt": "2021-10-11 20:51:51"
      },
      "item_39": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "Document",
        "type": "model",
        "plural": "Documents",
        "table": "documents",
        "projectId": 3,
        "top": "710px",
        "left": "492px",
        "pivot": false,
        "softDeletes": true,
        "timestamps": true,
        "migrationName": "2021_04_07_000012_create_documents_table.php",
        "foreignsMigrationName": "2021_04_07_009007_add_foreigns_to_documents_table.php",
        "id": 39,
        "createdAt": "2021-04-07 06:27:20",
        "updatedAt": "2021-10-11 18:15:10"
      },
      "item_36": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "projectId": 3,
        "name": "document_language",
        "type": "table",
        "table": "document_language",
        "plural": "",
        "top": "895px",
        "left": "-112px",
        "pivot": true,
        "softDeletes": false,
        "timestamps": false,
        "migrationName": "2021_04_07_000006_create_document_language_table.php",
        "foreignsMigrationName": "2021_04_07_009004_add_foreigns_to_document_language_table.php",
        "id": 36,
        "createdAt": "2021-04-07 13:42:27",
        "updatedAt": "2021-10-08 22:09:21"
      },
      "item_52": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "projectId": 3,
        "name": "document_location",
        "type": "table",
        "table": "document_location",
        "plural": "",
        "top": "1469px",
        "left": "227px",
        "pivot": true,
        "softDeletes": false,
        "timestamps": false,
        "pluralAndSingularAreSame": false,
        "migrationName": "2021_04_07_000017_create_document_location_table.php",
        "foreignsMigrationName": "2021_04_07_009013_add_foreigns_to_document_location_table.php",
        "oldMigrationName": null,
        "oldForeignsMigrationName": null,
        "id": 52,
        "createdAt": "2021-10-11 18:07:38",
        "updatedAt": "2021-10-11 18:21:54"
      },
      "item_35": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "projectId": 3,
        "name": "document_tag",
        "type": "table",
        "table": "document_tag",
        "plural": "",
        "top": "1145px",
        "left": "-118px",
        "pivot": true,
        "softDeletes": false,
        "timestamps": false,
        "migrationName": "2021_04_07_000004_create_document_tag_table.php",
        "foreignsMigrationName": "2021_04_07_009003_add_foreigns_to_document_tag_table.php",
        "id": 35,
        "createdAt": "2021-04-07 13:45:34",
        "updatedAt": "2021-10-08 22:09:24"
      },
      "item_40": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "Edition",
        "type": "model",
        "plural": "Editions",
        "table": "editions",
        "projectId": 3,
        "top": "1685px",
        "left": "417px",
        "pivot": false,
        "softDeletes": false,
        "timestamps": true,
        "migrationName": "2021_04_07_000013_create_editions_table.php",
        "foreignsMigrationName": "2021_04_07_009008_add_foreigns_to_editions_table.php",
        "id": 40,
        "createdAt": "2021-04-07 13:57:31",
        "updatedAt": "2021-10-08 22:12:40"
      },
      "item_28": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "Language",
        "type": "model",
        "plural": "Languages",
        "table": "languages",
        "projectId": 3,
        "top": "777px",
        "left": "-480px",
        "pivot": false,
        "softDeletes": false,
        "timestamps": true,
        "migrationName": "2021_04_07_000007_create_languages_table.php",
        "foreignsMigrationName": null,
        "id": 28,
        "createdAt": "2021-04-07 06:34:00",
        "updatedAt": "2021-09-30 09:55:19"
      },
      "item_26": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "Location",
        "type": "model",
        "plural": "Locations",
        "table": "locations",
        "projectId": 3,
        "top": "1362px",
        "left": "-222px",
        "pivot": false,
        "softDeletes": false,
        "timestamps": true,
        "migrationName": "2021_04_07_000001_create_locations_table.php",
        "foreignsMigrationName": null,
        "id": 26,
        "createdAt": "2021-04-07 17:57:43",
        "updatedAt": "2021-10-08 22:09:52"
      },
      "item_27": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "Tag",
        "type": "model",
        "plural": "Tags",
        "table": "tags",
        "projectId": 3,
        "top": "1095px",
        "left": "-474px",
        "pivot": false,
        "softDeletes": false,
        "timestamps": true,
        "migrationName": "2021_04_07_000005_create_tags_table.php",
        "foreignsMigrationName": null,
        "id": 27,
        "createdAt": "2021-04-07 06:29:40",
        "updatedAt": "2021-10-08 22:09:55"
      },
      "item_31": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "projectId": 3,
        "name": "User",
        "type": "model",
        "table": "users",
        "plural": "Users",
        "top": "707px",
        "left": "1431px",
        "pivot": false,
        "softDeletes": false,
        "timestamps": true,
        "migrationName": "2014_10_12_000000_create_users_table.php",
        "foreignsMigrationName": null,
        "id": 31,
        "createdAt": "2021-04-07 06:26:20",
        "updatedAt": "2021-10-11 18:15:03"
      }
    },
    "fields": {
      "fields": {
        "count": 158,
        "lastPrimaryKey": 293,
        "index": {
          "1": {
            "hasMany": {
              "foreigns.relatedFieldId": [
                7
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "2": {
            "hasMany": {
              "inputs.fieldId": [
                32
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "3": {
            "hasMany": {
              "inputs.fieldId": [
                33
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "4": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "5": {
            "hasMany": {
              "inputs.fieldId": [
                34
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "6": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "7": {
            "hasMany": {
              "foreigns.relatedFieldId": [
                2,
                4,
                6
              ],
              "basicrelationships.parentKeyId": [
                4,
                3,
                8,
                7
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "8": {
            "hasMany": {
              "foreigns.relatedFieldId": [
                5
              ],
              "basicrelationships.parentKeyId": [
                10,
                9
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "17": {
            "hasMany": {
              "inputs.fieldId": [
                1
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "18": {
            "hasMany": {
              "inputs.fieldId": [
                2
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "19": {
            "hasMany": {
              "inputs.fieldId": [
                3
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "20": {
            "hasMany": {
              "inputs.fieldId": [
                4
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "21": {
            "hasMany": {
              "inputs.fieldId": [
                5
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "22": {
            "hasMany": {
              "inputs.fieldId": [
                6
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "23": {
            "hasMany": {
              "inputs.fieldId": [
                7
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "24": {
            "hasMany": {
              "inputs.fieldId": [
                8
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "25": {
            "hasMany": {
              "inputs.fieldId": [
                9
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "26": {
            "hasMany": {
              "inputs.fieldId": [
                10
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "27": {
            "hasMany": {
              "inputs.fieldId": [
                11
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "28": {
            "hasMany": {
              "inputs.fieldId": [
                12
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "29": {
            "hasMany": {
              "inputs.fieldId": [
                13
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "30": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "31": {
            "hasMany": {
              "foreigns.fieldId": [
                2
              ],
              "basicrelationships.foreignKeyId": [
                4,
                3
              ],
              "inputs.fieldId": [
                30
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "32": {
            "hasMany": {
              "inputs.fieldId": [
                31
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "36": {
            "hasMany": {
              "inputs.fieldId": [
                15
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "37": {
            "hasMany": {
              "inputs.fieldId": [
                16
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "38": {
            "hasMany": {
              "inputs.fieldId": [
                17
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "39": {
            "hasMany": {
              "inputs.fieldId": [
                18
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "40": {
            "hasMany": {
              "inputs.fieldId": [
                19
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "41": {
            "hasMany": {
              "inputs.fieldId": [
                20
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "42": {
            "hasMany": {
              "inputs.fieldId": [
                21
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "43": {
            "hasMany": {
              "inputs.fieldId": [
                22
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "44": {
            "hasMany": {
              "inputs.fieldId": [
                23
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "45": {
            "hasMany": {
              "inputs.fieldId": [
                24
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "46": {
            "hasMany": {
              "inputs.fieldId": [
                25
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "47": {
            "hasMany": {
              "foreigns.fieldId": [
                4
              ],
              "basicrelationships.foreignKeyId": [
                8,
                7
              ],
              "inputs.fieldId": [
                14
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "48": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "49": {
            "hasMany": {
              "foreigns.fieldId": [
                5
              ],
              "basicrelationships.foreignKeyId": [
                10,
                9
              ],
              "inputs.fieldId": [
                35
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "50": {
            "hasMany": {
              "inputs.fieldId": [
                36
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "51": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "52": {
            "hasMany": {
              "inputs.fieldId": [
                26
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "53": {
            "hasMany": {
              "inputs.fieldId": [
                27
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "54": {
            "hasMany": {
              "inputs.fieldId": [
                28
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "55": {
            "hasMany": {
              "inputs.fieldId": [
                29
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "56": {
            "hasMany": {
              "foreigns.fieldId": [
                6
              ],
              "manytomanyrelationships.localModelKeyId": [
                2
              ],
              "manytomanyrelationships.modelKeyId": [
                1
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "57": {
            "hasMany": {
              "foreigns.fieldId": [
                7
              ],
              "manytomanyrelationships.modelKeyId": [
                2
              ],
              "manytomanyrelationships.localModelKeyId": [
                1
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "144": {
            "hasMany": {
              "foreigns.relatedFieldId": [
                60
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "145": {
            "hasMany": {
              "inputs.fieldId": [
                82
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "146": {
            "hasMany": {
              "inputs.fieldId": [
                83
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "147": {
            "hasMany": {
              "inputs.fieldId": [
                84
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "148": {
            "hasMany": {
              "foreigns.relatedFieldId": [
                30
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "149": {
            "hasMany": {
              "inputs.fieldId": [
                85
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "150": {
            "hasMany": {
              "foreigns.relatedFieldId": [
                31
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "151": {
            "hasMany": {
              "inputs.fieldId": [
                86
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "152": {
            "hasMany": {
              "inputs.fieldId": [
                87
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "153": {
            "hasMany": {
              "foreigns.relatedFieldId": [
                67
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "154": {
            "hasMany": {
              "inputs.fieldId": [
                88
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "155": {
            "hasMany": {
              "inputs.fieldId": [
                89
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "156": {
            "hasMany": {
              "inputs.fieldId": [
                90
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "157": {
            "hasMany": {
              "foreigns.relatedFieldId": [
                69
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "158": {
            "hasMany": {
              "inputs.fieldId": [
                91
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "159": {
            "hasMany": {
              "inputs.fieldId": [
                92
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "160": {
            "hasMany": {
              "inputs.fieldId": [
                93
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "161": {
            "hasMany": {
              "inputs.fieldId": [
                94
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "162": {
            "hasMany": {
              "inputs.fieldId": [
                95
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "163": {
            "hasMany": {
              "inputs.fieldId": [
                96
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "164": {
            "hasMany": {
              "foreigns.relatedFieldId": [
                49
              ],
              "basicrelationships.parentKeyId": [
                22,
                21
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "165": {
            "hasMany": {
              "inputs.fieldId": [
                97
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "166": {
            "hasMany": {
              "inputs.fieldId": [
                98
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "167": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "168": {
            "hasMany": {
              "inputs.fieldId": [
                99
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "169": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "170": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "171": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "173": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "174": {
            "hasMany": {
              "inputs.fieldId": [
                100
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "181": {
            "hasMany": {
              "foreigns.fieldId": [
                30
              ],
              "manytomanyrelationships.localModelKeyId": [
                17
              ],
              "manytomanyrelationships.modelKeyId": [
                18
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "182": {
            "hasMany": {
              "foreigns.fieldId": [
                42
              ],
              "manytomanyrelationships.modelKeyId": [
                17
              ],
              "manytomanyrelationships.localModelKeyId": [
                18
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "183": {
            "hasMany": {
              "foreigns.fieldId": [
                43
              ],
              "manytomanyrelationships.localModelKeyId": [
                20
              ],
              "manytomanyrelationships.modelKeyId": [
                19
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "184": {
            "hasMany": {
              "foreigns.fieldId": [
                31
              ],
              "manytomanyrelationships.modelKeyId": [
                20
              ],
              "manytomanyrelationships.localModelKeyId": [
                19
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "189": {
            "hasMany": {
              "foreigns.relatedFieldId": [
                43,
                42,
                46,
                48,
                61,
                66,
                68
              ],
              "basicrelationships.parentKeyId": [
                15,
                16,
                20,
                19
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "190": {
            "hasMany": {
              "inputs.fieldId": [
                102
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "191": {
            "hasMany": {
              "inputs.fieldId": [
                103
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "192": {
            "hasMany": {
              "inputs.fieldId": [
                104
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "193": {
            "hasMany": {
              "inputs.fieldId": [
                105
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "194": {
            "hasMany": {
              "inputs.fieldId": [
                106
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "195": {
            "hasMany": {
              "inputs.fieldId": [
                107
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "196": {
            "hasMany": {
              "inputs.fieldId": [
                108
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "197": {
            "hasMany": {
              "inputs.fieldId": [
                109
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "198": {
            "hasMany": {
              "inputs.fieldId": [
                110
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "199": {
            "hasMany": {
              "inputs.fieldId": [
                111
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "206": {
            "hasMany": {
              "inputs.fieldId": [
                118
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "207": {
            "hasMany": {
              "inputs.fieldId": [
                119
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "208": {
            "hasMany": {
              "inputs.fieldId": [
                120
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "209": {
            "hasMany": {
              "inputs.fieldId": [
                121
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "210": {
            "hasMany": {
              "inputs.fieldId": [
                122
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "211": {
            "hasMany": {
              "inputs.fieldId": [
                123
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "214": {
            "hasMany": {
              "inputs.fieldId": [
                126
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "215": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "216": {
            "hasMany": {
              "inputs.fieldId": [
                127
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "217": {
            "hasMany": {
              "foreigns.fieldId": [
                46
              ],
              "basicrelationships.foreignKeyId": [
                15,
                16
              ],
              "inputs.fieldId": [
                137
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "218": {
            "hasMany": {
              "inputs.fieldId": [
                128
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "219": {
            "hasMany": {
              "inputs.fieldId": [
                129
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "220": {
            "hasMany": {
              "inputs.fieldId": [
                130
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "221": {
            "hasMany": {
              "inputs.fieldId": [
                131
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "222": {
            "hasMany": {
              "inputs.fieldId": [
                132
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "223": {
            "hasMany": {
              "inputs.fieldId": [
                133
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "224": {
            "hasMany": {
              "inputs.fieldId": [
                134
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "225": {
            "hasMany": {
              "inputs.fieldId": [
                135
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "226": {
            "hasMany": {
              "inputs.fieldId": [
                136
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "232": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "234": {
            "hasMany": {
              "foreigns.fieldId": [
                48
              ],
              "basicrelationships.foreignKeyId": [
                20,
                19
              ],
              "inputs.fieldId": [
                138
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "235": {
            "hasMany": {
              "foreigns.fieldId": [
                49
              ],
              "basicrelationships.foreignKeyId": [
                22,
                21
              ],
              "inputs.fieldId": [
                139
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "236": {
            "hasMany": {
              "inputs.fieldId": [
                140
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "237": {
            "hasMany": {
              "inputs.fieldId": [
                141
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "239": {
            "hasMany": {
              "foreigns.relatedFieldId": [
                58
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "240": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "241": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "242": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "243": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "244": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "245": {
            "hasMany": {
              "foreigns.relatedFieldId": [
                57,
                59
              ],
              "basicrelationships.parentKeyId": [
                34,
                33
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "246": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "247": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "248": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "249": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "250": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "251": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "252": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "256": {
            "hasMany": {
              "foreigns.relatedFieldId": [
                55,
                56
              ],
              "basicrelationships.parentKeyId": [
                30,
                29,
                32,
                31
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "258": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "259": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "260": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "261": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "262": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "263": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "264": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "265": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "266": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "268": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "270": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "272": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "273": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "274": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "276": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "277": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "278": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "279": {
            "hasMany": {
              "foreigns.fieldId": [
                55
              ],
              "basicrelationships.foreignKeyId": [
                30,
                29
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "280": {
            "hasMany": {
              "foreigns.fieldId": [
                56
              ],
              "basicrelationships.foreignKeyId": [
                32,
                31
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "281": {
            "hasMany": {
              "foreigns.fieldId": [
                57
              ],
              "manytomanyrelationships.localModelKeyId": [
                30
              ],
              "manytomanyrelationships.modelKeyId": [
                29
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "282": {
            "hasMany": {
              "foreigns.fieldId": [
                58
              ],
              "manytomanyrelationships.modelKeyId": [
                30
              ],
              "manytomanyrelationships.localModelKeyId": [
                29
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "283": {
            "hasMany": {
              "foreigns.fieldId": [
                59
              ],
              "basicrelationships.foreignKeyId": [
                34,
                33
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "284": {
            "hasMany": {
              "foreigns.fieldId": [
                60
              ],
              "manytomanyrelationships.localModelKeyId": [
                32
              ],
              "manytomanyrelationships.modelKeyId": [
                31
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "285": {
            "hasMany": {
              "foreigns.fieldId": [
                61
              ],
              "manytomanyrelationships.modelKeyId": [
                32
              ],
              "manytomanyrelationships.localModelKeyId": [
                31
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "290": {
            "hasMany": {
              "foreigns.fieldId": [
                66
              ],
              "manytomanyrelationships.localModelKeyId": [
                38
              ],
              "manytomanyrelationships.modelKeyId": [
                37
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "291": {
            "hasMany": {
              "foreigns.fieldId": [
                67
              ],
              "manytomanyrelationships.modelKeyId": [
                38
              ],
              "manytomanyrelationships.localModelKeyId": [
                37
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "292": {
            "hasMany": {
              "foreigns.fieldId": [
                68
              ],
              "manytomanyrelationships.localModelKeyId": [
                40
              ],
              "manytomanyrelationships.modelKeyId": [
                39
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "293": {
            "hasMany": {
              "foreigns.fieldId": [
                69
              ],
              "manytomanyrelationships.modelKeyId": [
                40
              ],
              "manytomanyrelationships.localModelKeyId": [
                39
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          }
        },
        "additionalIndexes": {},
        "items": [],
        "relations": [],
        "reladbVersion": "0.3.1"
      },
      "item_232": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "id",
        "entityId": 43,
        "type": "bigIncrements",
        "pk": true,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": false,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 232,
        "createdAt": "2021-09-29 21:17:29",
        "updatedAt": "2021-09-29 21:17:29",
        "order": 0
      },
      "item_234": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "document_id",
        "entityId": 43,
        "type": "unsignedBigInteger",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 234,
        "createdAt": "2021-09-29 21:18:14",
        "updatedAt": "2021-09-29 21:18:14",
        "order": 1
      },
      "item_235": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "user_id",
        "entityId": 43,
        "type": "unsignedBigInteger",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 235,
        "createdAt": "2021-09-29 21:18:23",
        "updatedAt": "2021-09-29 21:18:23",
        "order": 2
      },
      "item_236": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "activity_type",
        "entityId": 43,
        "type": "enum",
        "pk": false,
        "fk": false,
        "params": {
          "options": [
            "created",
            "proofread",
            "formatted",
            "published",
            "depublished"
          ]
        },
        "faker": "'{DEFAULT_OR_FIRST}'",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 3,
        "id": 236,
        "createdAt": "2021-09-29 21:18:28",
        "updatedAt": "2021-10-11 18:23:53"
      },
      "item_237": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "comment",
        "entityId": 43,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {
          "options": null
        },
        "faker": "$faker->text({SIZE})",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 4,
        "id": 237,
        "createdAt": "2021-09-29 21:18:39",
        "updatedAt": "2021-09-29 21:18:43"
      },
      "item_153": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "id",
        "entityId": 29,
        "type": "bigIncrements",
        "pk": true,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": false,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 153,
        "createdAt": "2021-04-07 06:29:21",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_155": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "slug",
        "entityId": 29,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {
          "options": null
        },
        "faker": "$faker->text({SIZE})",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 1,
        "id": 155,
        "createdAt": "2021-04-07 06:51:09",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_154": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "name",
        "entityId": 29,
        "type": "text",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "$faker->text",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 2,
        "id": 154,
        "createdAt": "2021-04-07 06:51:46",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_156": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "shortname",
        "entityId": 29,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {
          "options": null
        },
        "faker": "$faker->text({SIZE})",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 3,
        "id": 156,
        "createdAt": "2021-04-07 06:52:03",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_290": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "document_id",
        "entityId": 55,
        "type": "unsignedBigInteger",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 290,
        "createdAt": "2021-10-11 20:50:41",
        "updatedAt": "2021-10-11 20:50:41",
        "order": 0
      },
      "item_291": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "collection_id",
        "entityId": 55,
        "type": "unsignedBigInteger",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 291,
        "createdAt": "2021-10-11 20:50:41",
        "updatedAt": "2021-10-11 20:50:41",
        "order": 1
      },
      "item_157": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "id",
        "entityId": 30,
        "type": "bigIncrements",
        "pk": true,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": false,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 157,
        "createdAt": "2021-04-07 06:28:58",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_162": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "first_names",
        "entityId": 30,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {
          "options": null
        },
        "faker": "$faker->text({SIZE})",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 1,
        "id": 162,
        "createdAt": "2021-04-07 11:23:15",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_163": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "last_names",
        "entityId": 30,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {
          "options": null
        },
        "faker": "$faker->text({SIZE})",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 2,
        "id": 163,
        "createdAt": "2021-04-07 11:25:33",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_161": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "is_author",
        "entityId": 30,
        "type": "boolean",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "$faker->boolean",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 3,
        "id": 161,
        "createdAt": "2021-04-07 11:25:54",
        "updatedAt": "2021-10-08 22:01:25"
      },
      "item_160": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "is_editor",
        "entityId": 30,
        "type": "boolean",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "$faker->boolean",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 4,
        "id": 160,
        "createdAt": "2021-04-07 11:26:05",
        "updatedAt": "2021-10-08 22:01:28"
      },
      "item_159": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "is_translator",
        "entityId": 30,
        "type": "boolean",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "$faker->boolean",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 5,
        "id": 159,
        "createdAt": "2021-04-07 11:26:13",
        "updatedAt": "2021-10-08 22:01:33"
      },
      "item_158": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "is_compiler",
        "entityId": 30,
        "type": "boolean",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "$faker->boolean",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 6,
        "id": 158,
        "createdAt": "2021-04-07 11:26:40",
        "updatedAt": "2021-10-08 22:02:11"
      },
      "item_292": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "document_id",
        "entityId": 56,
        "type": "unsignedBigInteger",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 292,
        "createdAt": "2021-10-11 20:51:06",
        "updatedAt": "2021-10-11 20:51:06",
        "order": 0
      },
      "item_293": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "creator_id",
        "entityId": 56,
        "type": "unsignedBigInteger",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 293,
        "createdAt": "2021-10-11 20:51:06",
        "updatedAt": "2021-10-11 20:51:06",
        "order": 1
      },
      "item_189": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "id",
        "entityId": 39,
        "type": "bigIncrements",
        "pk": true,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": false,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 189,
        "createdAt": "2021-04-07 06:27:20",
        "updatedAt": "2021-09-29 20:59:17",
        "order": 0
      },
      "item_190": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "slug",
        "entityId": 39,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "$faker->text",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 1,
        "id": 190,
        "createdAt": "2021-04-07 11:43:21",
        "updatedAt": "2021-10-11 20:58:35"
      },
      "item_191": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "is_pdf",
        "entityId": 39,
        "type": "boolean",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "$faker->boolean",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 2,
        "id": 191,
        "createdAt": "2021-04-07 13:09:06",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_192": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "is_audio",
        "entityId": 39,
        "type": "boolean",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "$faker->boolean",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 3,
        "id": 192,
        "createdAt": "2021-04-07 11:43:53",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_193": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "is_image",
        "entityId": 39,
        "type": "boolean",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "$faker->boolean",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 4,
        "id": 193,
        "createdAt": "2021-04-07 13:10:38",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_194": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "is_video",
        "entityId": 39,
        "type": "boolean",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "$faker->boolean",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 5,
        "id": 194,
        "createdAt": "2021-04-07 13:11:07",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_195": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "is_html",
        "entityId": 39,
        "type": "boolean",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "$faker->boolean",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 6,
        "id": 195,
        "createdAt": "2021-04-07 13:21:01",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_196": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "file_url",
        "entityId": 39,
        "pk": false,
        "fk": false,
        "params": {
          "options": null
        },
        "faker": "$faker->text({SIZE})",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 7,
        "id": 196,
        "createdAt": "2021-04-07 11:57:43",
        "updatedAt": "2021-09-29 20:59:17",
        "type": "string"
      },
      "item_197": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "blurb",
        "entityId": 39,
        "type": "text",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "$faker->text",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 8,
        "id": 197,
        "createdAt": "2021-04-07 11:44:07",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_198": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "content_html",
        "entityId": 39,
        "type": "longText",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "$faker->text",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 9,
        "id": 198,
        "createdAt": "2021-04-07 13:13:33",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_214": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "content_size",
        "entityId": 39,
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "$faker->randomNumber",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 10,
        "id": 214,
        "createdAt": "2021-04-07 11:44:35",
        "updatedAt": "2021-10-11 21:42:14",
        "type": "bigInteger"
      },
      "item_207": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "edit_quality",
        "entityId": 39,
        "type": "enum",
        "pk": false,
        "fk": false,
        "params": {
          "options": [
            "high",
            "medium",
            "low"
          ]
        },
        "faker": "'{DEFAULT_OR_FIRST}'",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 12,
        "id": 207,
        "createdAt": "2021-04-07 14:11:18",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_208": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "formatting_quality",
        "entityId": 39,
        "type": "enum",
        "pk": false,
        "fk": false,
        "params": {
          "options": [
            "high",
            "medium",
            "low"
          ]
        },
        "faker": "'{DEFAULT_OR_FIRST}'",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 13,
        "id": 208,
        "createdAt": "2021-04-07 14:11:23",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_211": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "publication_permission",
        "entityId": 39,
        "pk": false,
        "fk": false,
        "params": {
          "options": [
            "author",
            "editor",
            "publisher",
            "translator",
            "recipient",
            "fair use",
            "unknown"
          ]
        },
        "faker": "'{DEFAULT_OR_FIRST}'",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 14,
        "id": 211,
        "createdAt": "2021-04-07 11:47:29",
        "updatedAt": "2021-10-11 18:26:04",
        "type": "enum"
      },
      "item_199": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "notes",
        "entityId": 39,
        "type": "text",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "$faker->text",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 15,
        "id": 199,
        "createdAt": "2021-04-07 11:44:26",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_210": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "input_type",
        "entityId": 39,
        "type": "enum",
        "pk": false,
        "fk": false,
        "params": {
          "options": [
            "scanned",
            "typed",
            "transcribed"
          ]
        },
        "faker": "'{DEFAULT_OR_FIRST}'",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 16,
        "id": 210,
        "createdAt": "2021-04-07 14:11:29",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_209": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "publication_approval",
        "entityId": 39,
        "type": "enum",
        "pk": false,
        "fk": false,
        "params": {
          "options": [
            "approved",
            "rejected",
            "pending"
          ]
        },
        "faker": "'{DEFAULT_OR_FIRST}'",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 25,
        "id": 209,
        "createdAt": "2021-04-07 17:48:41",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_206": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "views",
        "entityId": 39,
        "type": "bigInteger",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "0",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 26,
        "id": 206,
        "createdAt": "2021-04-07 17:55:59",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_183": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "document_id",
        "entityId": 36,
        "type": "unsignedBigInteger",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 183,
        "createdAt": "2021-04-07 13:42:27",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_184": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "language_id",
        "entityId": 36,
        "type": "unsignedBigInteger",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 184,
        "createdAt": "2021-04-07 13:42:27",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_285": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "document_id",
        "entityId": 52,
        "type": "unsignedBigInteger",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 285,
        "createdAt": "2021-10-11 18:07:38",
        "updatedAt": "2021-10-11 18:33:21",
        "order": 0
      },
      "item_284": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "location_id",
        "entityId": 52,
        "type": "unsignedBigInteger",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 284,
        "createdAt": "2021-10-11 18:07:38",
        "updatedAt": "2021-10-11 18:33:21",
        "order": 1
      },
      "item_182": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "document_id",
        "entityId": 35,
        "type": "unsignedBigInteger",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 182,
        "createdAt": "2021-04-07 13:45:34",
        "updatedAt": "2021-10-11 18:33:37",
        "order": 0
      },
      "item_181": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "tag_id",
        "entityId": 35,
        "type": "unsignedBigInteger",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 181,
        "createdAt": "2021-04-07 13:45:34",
        "updatedAt": "2021-10-11 18:33:37",
        "order": 1
      },
      "item_215": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "id",
        "entityId": 40,
        "type": "bigIncrements",
        "pk": true,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": false,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 215,
        "createdAt": "2021-04-07 13:57:31",
        "updatedAt": "2021-10-08 22:18:31",
        "order": 0
      },
      "item_217": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "document_id",
        "entityId": 40,
        "type": "unsignedBigInteger",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 217,
        "createdAt": "2021-04-07 14:27:21",
        "updatedAt": "2021-10-08 22:18:31",
        "order": 1
      },
      "item_216": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "title",
        "entityId": 40,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "$faker->sentence(10)",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 2,
        "id": 216,
        "createdAt": "2021-04-07 13:57:45",
        "updatedAt": "2021-10-08 22:18:31"
      },
      "item_218": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "subtitle",
        "entityId": 40,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {
          "options": null
        },
        "faker": "$faker->text({SIZE})",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 3,
        "id": 218,
        "createdAt": "2021-04-07 13:57:55",
        "updatedAt": "2021-10-08 22:18:31"
      },
      "item_219": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "title_parent",
        "entityId": 40,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {
          "options": null
        },
        "faker": "$faker->text({SIZE})",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 4,
        "id": 219,
        "createdAt": "2021-04-07 13:58:09",
        "updatedAt": "2021-10-08 22:18:31"
      },
      "item_220": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "volume",
        "entityId": 40,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {
          "options": null
        },
        "faker": "$faker->text({SIZE})",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 5,
        "id": 220,
        "createdAt": "2021-04-07 17:12:32",
        "updatedAt": "2021-10-08 22:18:31"
      },
      "item_221": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "page_range",
        "entityId": 40,
        "type": "char",
        "pk": false,
        "fk": false,
        "params": {
          "options": null
        },
        "faker": "$faker->word({SIZE})",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 6,
        "id": 221,
        "createdAt": "2021-04-07 13:58:30",
        "updatedAt": "2021-10-08 22:18:31"
      },
      "item_222": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "page_total",
        "entityId": 40,
        "type": "char",
        "pk": false,
        "fk": false,
        "params": {
          "options": null
        },
        "faker": "$faker->word({SIZE})",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 7,
        "id": 222,
        "createdAt": "2021-04-07 13:58:56",
        "updatedAt": "2021-10-08 22:18:31"
      },
      "item_223": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "publisher_name",
        "entityId": 40,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {
          "options": null
        },
        "faker": "$faker->text({SIZE})",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 8,
        "id": 223,
        "createdAt": "2021-04-07 14:18:31",
        "updatedAt": "2021-10-08 22:18:31"
      },
      "item_224": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "publisher_city",
        "entityId": 40,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {
          "options": null
        },
        "faker": "$faker->text({SIZE})",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 9,
        "id": 224,
        "createdAt": "2021-04-07 14:19:01",
        "updatedAt": "2021-10-08 22:18:31"
      },
      "item_225": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "date",
        "entityId": 40,
        "type": "date",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "$faker->date",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 10,
        "id": 225,
        "createdAt": "2021-04-07 13:59:17",
        "updatedAt": "2021-10-08 22:18:31"
      },
      "item_226": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "isbn",
        "entityId": 40,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {
          "options": null
        },
        "faker": "$faker->text({SIZE})",
        "nullable": true,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 11,
        "id": 226,
        "createdAt": "2021-04-07 13:59:23",
        "updatedAt": "2021-10-08 22:18:31"
      },
      "item_150": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "id",
        "entityId": 28,
        "type": "bigIncrements",
        "pk": true,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": false,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 150,
        "createdAt": "2021-04-07 06:34:00",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_151": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "language",
        "entityId": 28,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {
          "options": null
        },
        "faker": "$faker->text({SIZE})",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 1,
        "id": 151,
        "createdAt": "2021-04-07 11:41:03",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_152": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "language_tag",
        "entityId": 28,
        "type": "char",
        "pk": false,
        "fk": false,
        "params": {
          "options": null
        },
        "faker": "$faker->word({SIZE})",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 2,
        "id": 152,
        "createdAt": "2021-04-07 11:41:09",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_144": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "id",
        "entityId": 26,
        "type": "bigIncrements",
        "pk": true,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": false,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 144,
        "createdAt": "2021-04-07 17:57:43",
        "updatedAt": "2021-09-29 20:59:15"
      },
      "item_145": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "continent",
        "entityId": 26,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {
          "options": null
        },
        "faker": "$faker->text({SIZE})",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 1,
        "id": 145,
        "createdAt": "2021-04-07 17:58:32",
        "updatedAt": "2021-09-29 20:59:15"
      },
      "item_146": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "country",
        "entityId": 26,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "$faker->country",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 2,
        "id": 146,
        "createdAt": "2021-04-07 18:03:28",
        "updatedAt": "2021-09-29 20:59:15"
      },
      "item_147": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "locality",
        "entityId": 26,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {
          "options": null
        },
        "faker": "$faker->text({SIZE})",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 3,
        "id": 147,
        "createdAt": "2021-04-07 18:03:43",
        "updatedAt": "2021-09-29 20:59:15"
      },
      "item_148": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "id",
        "entityId": 27,
        "type": "bigIncrements",
        "pk": true,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": false,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 148,
        "createdAt": "2021-04-07 06:29:40",
        "updatedAt": "2021-09-29 20:59:15"
      },
      "item_149": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "label",
        "entityId": 27,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {
          "options": null
        },
        "faker": "$faker->text({SIZE})",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 1,
        "id": 149,
        "createdAt": "2021-04-07 11:34:57",
        "updatedAt": "2021-09-29 20:59:15"
      },
      "item_164": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "id",
        "entityId": 31,
        "type": "bigIncrements",
        "pk": true,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": false,
        "hidden": false,
        "fillable": false,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 164,
        "createdAt": "2021-04-07 06:26:20",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_165": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "name",
        "entityId": 31,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "$faker->name",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 165,
        "createdAt": "2021-04-07 06:26:20",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_166": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "email",
        "entityId": 31,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "$faker->email",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": true,
        "id": 166,
        "createdAt": "2021-04-07 06:26:20",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_167": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "email_verified_at",
        "entityId": 31,
        "type": "timestamp",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "now()",
        "nullable": true,
        "hidden": false,
        "fillable": false,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 167,
        "createdAt": "2021-04-07 06:26:20",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_168": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "password",
        "entityId": 31,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "\\Hash::make('password')",
        "nullable": false,
        "hidden": true,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 168,
        "createdAt": "2021-04-07 06:26:20",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_169": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "remember_token",
        "entityId": 31,
        "type": "string",
        "pk": false,
        "fk": false,
        "params": {
          "size": 100
        },
        "faker": "Str::random(10)",
        "nullable": true,
        "hidden": true,
        "fillable": false,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 169,
        "createdAt": "2021-04-07 06:26:21",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_170": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "two_factor_secret",
        "entityId": 31,
        "type": "text",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": true,
        "hidden": true,
        "fillable": false,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 170,
        "createdAt": "2021-04-07 06:26:21",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_171": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "two_factor_recovery_codes",
        "entityId": 31,
        "type": "text",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": true,
        "hidden": true,
        "fillable": false,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 171,
        "createdAt": "2021-04-07 06:26:21",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_173": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "profile_photo_path",
        "entityId": 31,
        "type": "text",
        "pk": false,
        "fk": false,
        "params": {},
        "faker": "",
        "nullable": true,
        "hidden": false,
        "fillable": false,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "id": 173,
        "createdAt": "2021-04-07 06:26:21",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_174": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "status",
        "entityId": 31,
        "type": "enum",
        "pk": false,
        "fk": false,
        "params": {
          "options": [
            "contributor",
            "editor",
            "admin"
          ]
        },
        "faker": "'{DEFAULT_OR_FIRST}'",
        "nullable": false,
        "hidden": false,
        "fillable": true,
        "defaultValue": null,
        "index": false,
        "unique": false,
        "order": 10,
        "id": 174,
        "createdAt": "2021-04-08 14:48:58",
        "updatedAt": "2021-10-11 18:26:59"
      }
    },
    "foreigns": {
      "foreigns": {
        "count": 23,
        "lastPrimaryKey": 69,
        "index": {
          "2": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "4": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "5": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "6": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "7": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "30": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "31": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "42": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "43": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "46": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "48": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "49": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "55": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "56": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "57": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "58": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "59": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "60": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "61": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "66": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "67": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "68": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "69": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          }
        },
        "additionalIndexes": {},
        "items": [],
        "relations": [],
        "reladbVersion": "0.3.1"
      },
      "item_48": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "",
        "fieldId": 234,
        "relatedEntityId": 39,
        "relatedFieldId": 189,
        "basicRelationshipId": null,
        "on": "",
        "onTableDelete": null,
        "onTableUpdate": null,
        "id": 48,
        "createdAt": "2021-09-29 21:18:14",
        "updatedAt": "2021-09-29 21:18:14"
      },
      "item_49": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "",
        "fieldId": 235,
        "relatedEntityId": 31,
        "relatedFieldId": 164,
        "basicRelationshipId": null,
        "on": "",
        "onTableDelete": null,
        "onTableUpdate": null,
        "id": 49,
        "createdAt": "2021-09-29 21:18:23",
        "updatedAt": "2021-09-29 21:18:23"
      },
      "item_67": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "",
        "fieldId": 291,
        "relatedEntityId": 29,
        "relatedFieldId": 153,
        "basicRelationshipId": null,
        "on": "",
        "onTableDelete": null,
        "onTableUpdate": null,
        "id": 67,
        "createdAt": "2021-10-11 20:50:41",
        "updatedAt": "2021-10-11 20:50:41"
      },
      "item_66": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "",
        "fieldId": 290,
        "relatedEntityId": 39,
        "relatedFieldId": 189,
        "basicRelationshipId": null,
        "on": "",
        "onTableDelete": null,
        "onTableUpdate": null,
        "id": 66,
        "createdAt": "2021-10-11 20:50:41",
        "updatedAt": "2021-10-11 20:50:41"
      },
      "item_69": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "",
        "fieldId": 293,
        "relatedEntityId": 30,
        "relatedFieldId": 157,
        "basicRelationshipId": null,
        "on": "",
        "onTableDelete": null,
        "onTableUpdate": null,
        "id": 69,
        "createdAt": "2021-10-11 20:51:06",
        "updatedAt": "2021-10-11 20:51:06"
      },
      "item_68": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "",
        "fieldId": 292,
        "relatedEntityId": 39,
        "relatedFieldId": 189,
        "basicRelationshipId": null,
        "on": "",
        "onTableDelete": null,
        "onTableUpdate": null,
        "id": 68,
        "createdAt": "2021-10-11 20:51:06",
        "updatedAt": "2021-10-11 20:51:06"
      },
      "item_43": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "",
        "fieldId": 183,
        "relatedEntityId": 39,
        "relatedFieldId": 189,
        "basicRelationshipId": null,
        "on": "",
        "onTableDelete": null,
        "onTableUpdate": null,
        "id": 43,
        "createdAt": "2021-04-07 13:42:27",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_42": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "",
        "fieldId": 182,
        "relatedEntityId": 39,
        "relatedFieldId": 189,
        "basicRelationshipId": null,
        "on": "",
        "onTableDelete": null,
        "onTableUpdate": null,
        "id": 42,
        "createdAt": "2021-04-07 13:45:34",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_46": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "",
        "fieldId": 217,
        "relatedEntityId": 39,
        "relatedFieldId": 189,
        "basicRelationshipId": null,
        "on": "",
        "onTableDelete": null,
        "onTableUpdate": null,
        "id": 46,
        "createdAt": "2021-04-07 14:27:21",
        "updatedAt": "2021-09-29 20:59:18"
      },
      "item_61": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "",
        "fieldId": 285,
        "relatedEntityId": 39,
        "relatedFieldId": 189,
        "basicRelationshipId": null,
        "on": "",
        "onTableDelete": null,
        "onTableUpdate": null,
        "id": 61,
        "createdAt": "2021-10-11 18:07:38",
        "updatedAt": "2021-10-11 18:07:38"
      },
      "item_31": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "",
        "fieldId": 184,
        "relatedEntityId": 28,
        "relatedFieldId": 150,
        "basicRelationshipId": null,
        "on": "",
        "onTableDelete": null,
        "onTableUpdate": null,
        "id": 31,
        "createdAt": "2021-04-07 13:42:27",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_60": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "",
        "fieldId": 284,
        "relatedEntityId": 26,
        "relatedFieldId": 144,
        "basicRelationshipId": null,
        "on": "",
        "onTableDelete": null,
        "onTableUpdate": null,
        "id": 60,
        "createdAt": "2021-10-11 18:07:38",
        "updatedAt": "2021-10-11 18:07:38"
      },
      "item_30": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "",
        "fieldId": 181,
        "relatedEntityId": 27,
        "relatedFieldId": 148,
        "basicRelationshipId": null,
        "on": "",
        "onTableDelete": null,
        "onTableUpdate": null,
        "id": 30,
        "createdAt": "2021-04-07 13:45:34",
        "updatedAt": "2021-09-29 20:59:16"
      }
    },
    "inputs": {
      "inputs": {
        "count": 87,
        "lastPrimaryKey": 141,
        "index": {
          "1": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "2": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "3": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "4": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "5": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "6": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "7": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "8": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "9": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "10": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "11": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "12": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "13": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "14": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "15": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "16": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "17": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "18": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "19": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "20": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "21": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "22": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "23": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "24": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "25": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "26": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "27": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "28": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "29": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "30": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "31": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "32": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "33": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "34": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "35": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "36": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "82": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "83": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "84": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "85": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "86": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "87": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "88": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "89": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "90": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "91": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "92": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "93": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "94": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "95": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "96": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "97": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "98": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "99": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "100": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "102": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "103": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "104": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "105": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "106": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "107": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "108": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "109": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "110": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "111": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "118": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "119": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "120": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "121": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "122": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "123": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "126": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "127": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "128": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "129": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "130": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "131": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "132": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "133": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "134": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "135": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "136": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "137": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "138": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "139": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "140": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "141": {
            "hasMany": {},
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          }
        },
        "additionalIndexes": {},
        "items": [],
        "relations": [],
        "reladbVersion": "0.3.1"
      },
      "item_102": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 22,
        "fieldId": 190,
        "relationshipId": null,
        "name": "slug",
        "label": "Slug",
        "placeholder": "Slug",
        "order": 1,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "required",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "required",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 102,
        "createdAt": "2021-04-08 15:06:19",
        "updatedAt": "2021-10-11 20:58:35",
        "relationshipCollectionName": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null
      },
      "item_103": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 22,
        "fieldId": 191,
        "relationshipId": null,
        "name": "is_pdf",
        "label": "Is Pdf",
        "placeholder": "Is Pdf",
        "order": 2,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "checkbox",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "boolean",
          "boolean"
        ],
        "updateValidation": [
          "nullable",
          "boolean",
          "boolean"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 103,
        "createdAt": "2021-04-08 15:06:19",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_104": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 22,
        "fieldId": 192,
        "relationshipId": null,
        "name": "is_audio",
        "label": "Is Audio",
        "placeholder": "Is Audio",
        "order": 3,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "checkbox",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "boolean",
          "boolean"
        ],
        "updateValidation": [
          "nullable",
          "boolean",
          "boolean"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 104,
        "createdAt": "2021-04-08 15:06:19",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_105": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 22,
        "fieldId": 193,
        "relationshipId": null,
        "name": "is_image",
        "label": "Is Image",
        "placeholder": "Is Image",
        "order": 4,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "checkbox",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "boolean",
          "boolean"
        ],
        "updateValidation": [
          "nullable",
          "boolean",
          "boolean"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 105,
        "createdAt": "2021-04-08 15:06:19",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_106": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 22,
        "fieldId": 194,
        "relationshipId": null,
        "name": "is_video",
        "label": "Is Video",
        "placeholder": "Is Video",
        "order": 5,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "checkbox",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "boolean",
          "boolean"
        ],
        "updateValidation": [
          "nullable",
          "boolean",
          "boolean"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 106,
        "createdAt": "2021-04-08 15:06:19",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_107": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 22,
        "fieldId": 195,
        "relationshipId": null,
        "name": "is_html",
        "label": "Is Html",
        "placeholder": "Is Html",
        "order": 6,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "checkbox",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "boolean",
          "boolean"
        ],
        "updateValidation": [
          "nullable",
          "boolean",
          "boolean"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 107,
        "createdAt": "2021-04-08 15:06:19",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_108": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 22,
        "fieldId": 196,
        "relationshipId": null,
        "name": "file_url",
        "label": "File Url",
        "placeholder": "File Url",
        "order": 7,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "nullable",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 108,
        "createdAt": "2021-04-08 15:06:19",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_109": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 22,
        "fieldId": 197,
        "relationshipId": null,
        "name": "blurb",
        "label": "Blurb",
        "placeholder": "Blurb",
        "order": 8,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "textarea",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "nullable",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 109,
        "createdAt": "2021-04-08 15:06:19",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_110": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 22,
        "fieldId": 198,
        "relationshipId": null,
        "name": "content_html",
        "label": "Content Html",
        "placeholder": "Content Html",
        "order": 9,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "textarea",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "nullable",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 110,
        "createdAt": "2021-04-08 15:06:19",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_126": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 22,
        "fieldId": 214,
        "relationshipId": null,
        "name": "content_size",
        "label": "Content Size",
        "placeholder": "Content Size",
        "order": 10,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "max:255"
        ],
        "updateValidation": [
          "nullable",
          "max:255"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 126,
        "createdAt": "2021-04-08 15:06:19",
        "updatedAt": "2021-10-11 21:42:14",
        "relationshipCollectionName": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null
      },
      "item_119": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 22,
        "fieldId": 207,
        "relationshipId": null,
        "name": "edit_quality",
        "label": "Edit Quality",
        "placeholder": "Edit Quality",
        "order": 11,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "select",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [
          {
            "value": "high",
            "label": "High"
          },
          {
            "value": "medium",
            "label": "Medium"
          },
          {
            "value": "low",
            "label": "Low"
          }
        ],
        "validation": [
          "nullable",
          "in:high,medium,low"
        ],
        "updateValidation": [
          "nullable",
          "in:high,medium,low"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 119,
        "createdAt": "2021-04-08 15:06:19",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_120": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 22,
        "fieldId": 208,
        "relationshipId": null,
        "name": "formatting_quality",
        "label": "Formatting Quality",
        "placeholder": "Formatting Quality",
        "order": 12,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "select",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [
          {
            "value": "high",
            "label": "High"
          },
          {
            "value": "medium",
            "label": "Medium"
          },
          {
            "value": "low",
            "label": "Low"
          }
        ],
        "validation": [
          "nullable",
          "in:high,medium,low"
        ],
        "updateValidation": [
          "nullable",
          "in:high,medium,low"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 120,
        "createdAt": "2021-04-08 15:06:19",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_123": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 22,
        "fieldId": 211,
        "relationshipId": null,
        "name": "publication_permission",
        "label": "Publication Permission",
        "placeholder": "Publication Permission",
        "order": 13,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "select",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [
          {
            "value": "author",
            "label": "Author"
          },
          {
            "value": "editor",
            "label": "Editor"
          },
          {
            "value": "publisher",
            "label": "Publisher"
          },
          {
            "value": "translator",
            "label": "Translator"
          },
          {
            "value": "recipient",
            "label": "Recipient"
          },
          {
            "value": "fair use",
            "label": "Fair use"
          },
          {
            "value": "unknown",
            "label": "Unknown"
          }
        ],
        "validation": [
          "required",
          "in:author,editor,publisher,translator,recipient,fair use,unknown"
        ],
        "updateValidation": [
          "required",
          "in:author,editor,publisher,translator,recipient,fair use,unknown"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 123,
        "createdAt": "2021-04-08 15:06:19",
        "updatedAt": "2021-10-11 18:26:04",
        "relationshipCollectionName": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null
      },
      "item_111": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 22,
        "fieldId": 199,
        "relationshipId": null,
        "name": "notes",
        "label": "Notes",
        "placeholder": "Notes",
        "order": 14,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "textarea",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "nullable",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 111,
        "createdAt": "2021-04-08 15:06:19",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_122": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 22,
        "fieldId": 210,
        "relationshipId": null,
        "name": "input_type",
        "label": "Input Type",
        "placeholder": "Input Type",
        "order": 15,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "select",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [
          {
            "value": "scanned",
            "label": "Scanned"
          },
          {
            "value": "typed",
            "label": "Typed"
          },
          {
            "value": "transcribed",
            "label": "Transcribed"
          }
        ],
        "validation": [
          "required",
          "in:scanned,typed,transcribed"
        ],
        "updateValidation": [
          "required",
          "in:scanned,typed,transcribed"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 122,
        "createdAt": "2021-04-08 15:06:19",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_121": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 22,
        "fieldId": 209,
        "relationshipId": null,
        "name": "publication_approval",
        "label": "Publication Approval",
        "placeholder": "Publication Approval",
        "order": 24,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "select",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [
          {
            "value": "approved",
            "label": "Approved"
          },
          {
            "value": "rejected",
            "label": "Rejected"
          },
          {
            "value": "pending",
            "label": "Pending"
          }
        ],
        "validation": [
          "required",
          "in:approved,rejected,pending"
        ],
        "updateValidation": [
          "required",
          "in:approved,rejected,pending"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 121,
        "createdAt": "2021-04-08 15:06:19",
        "updatedAt": "2021-09-29 20:59:18"
      },
      "item_118": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 22,
        "fieldId": 206,
        "relationshipId": null,
        "name": "views",
        "label": "Views",
        "placeholder": "Views",
        "order": 25,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "required",
          "max:255"
        ],
        "updateValidation": [
          "required",
          "max:255"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 118,
        "createdAt": "2021-04-08 15:06:19",
        "updatedAt": "2021-09-29 20:59:18"
      },
      "item_89": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 18,
        "fieldId": 155,
        "relationshipId": null,
        "name": "slug",
        "label": "Slug",
        "placeholder": "Slug",
        "order": 1,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "required",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "required",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 89,
        "createdAt": "2021-04-08 15:13:55",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_88": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 18,
        "fieldId": 154,
        "relationshipId": null,
        "name": "name",
        "label": "Name",
        "placeholder": "Name",
        "order": 2,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "textarea",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "required",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "required",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 88,
        "createdAt": "2021-04-08 15:13:55",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_90": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 18,
        "fieldId": 156,
        "relationshipId": null,
        "name": "shortname",
        "label": "Shortname",
        "placeholder": "Shortname",
        "order": 3,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "required",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "required",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 90,
        "createdAt": "2021-04-08 15:13:55",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_85": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 16,
        "fieldId": 149,
        "relationshipId": null,
        "name": "label",
        "label": "Label",
        "placeholder": "Label",
        "order": 1,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "required",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "required",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 85,
        "createdAt": "2021-04-08 15:16:04",
        "updatedAt": "2021-09-29 20:59:15"
      },
      "item_97": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 20,
        "fieldId": 165,
        "relationshipId": null,
        "name": "name",
        "label": "Name",
        "placeholder": "Name",
        "order": 1,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "required",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "required",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 97,
        "createdAt": "2021-04-08 15:18:26",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_98": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 20,
        "fieldId": 166,
        "relationshipId": null,
        "name": "email",
        "label": "Email",
        "placeholder": "Email",
        "order": 2,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "email",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "required",
          "unique:users",
          "email"
        ],
        "updateValidation": [
          "required",
          "unique:users",
          "email"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 98,
        "createdAt": "2021-04-08 15:18:26",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_99": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 20,
        "fieldId": 168,
        "relationshipId": null,
        "name": "password",
        "label": "Password",
        "placeholder": "Password",
        "order": 3,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "password",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "required"
        ],
        "updateValidation": [],
        "onCreate": true,
        "onUpdate": true,
        "onShow": false,
        "onIndex": false,
        "id": 99,
        "createdAt": "2021-04-08 15:18:26",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_100": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 20,
        "fieldId": 174,
        "relationshipId": null,
        "name": "status",
        "label": "Status",
        "placeholder": "Status",
        "order": 4,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "select",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [
          {
            "value": "contributor",
            "label": "Contributor"
          },
          {
            "value": "editor",
            "label": "Editor"
          },
          {
            "value": "admin",
            "label": "Admin"
          }
        ],
        "validation": [
          "required",
          "in:contributor,editor,admin"
        ],
        "updateValidation": [
          "required",
          "in:contributor,editor,admin"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 100,
        "createdAt": "2021-04-08 15:18:26",
        "updatedAt": "2021-10-11 18:26:59",
        "relationshipCollectionName": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null
      },
      "item_86": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 17,
        "fieldId": 151,
        "relationshipId": null,
        "name": "language",
        "label": "Language",
        "placeholder": "Language",
        "order": 1,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "required",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "required",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 86,
        "createdAt": "2021-04-08 15:22:00",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_87": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 17,
        "fieldId": 152,
        "relationshipId": null,
        "name": "language_tag",
        "label": "Language Tag",
        "placeholder": "Language Tag",
        "order": 2,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "required",
          "max:255"
        ],
        "updateValidation": [
          "required",
          "max:255"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 87,
        "createdAt": "2021-04-08 15:22:00",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_82": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 15,
        "fieldId": 145,
        "relationshipId": null,
        "name": "continent",
        "label": "Continent",
        "placeholder": "Continent",
        "order": 1,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "required",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "required",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 82,
        "createdAt": "2021-04-08 15:22:22",
        "updatedAt": "2021-09-29 20:59:15"
      },
      "item_83": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 15,
        "fieldId": 146,
        "relationshipId": null,
        "name": "country",
        "label": "Country",
        "placeholder": "Country",
        "order": 2,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "required",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "required",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 83,
        "createdAt": "2021-04-08 15:22:22",
        "updatedAt": "2021-09-29 20:59:15"
      },
      "item_84": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 15,
        "fieldId": 147,
        "relationshipId": null,
        "name": "locality",
        "label": "Locality",
        "placeholder": "Locality",
        "order": 3,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "required",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "required",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 84,
        "createdAt": "2021-04-08 15:22:22",
        "updatedAt": "2021-09-29 20:59:15"
      },
      "item_95": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 19,
        "fieldId": 162,
        "relationshipId": null,
        "name": "first_names",
        "label": "First Names",
        "placeholder": "First Names",
        "order": 1,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "nullable",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 95,
        "createdAt": "2021-04-08 15:22:43",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_96": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 19,
        "fieldId": 163,
        "relationshipId": null,
        "name": "last_names",
        "label": "Last Names",
        "placeholder": "Last Names",
        "order": 2,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "nullable",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 96,
        "createdAt": "2021-04-08 15:22:43",
        "updatedAt": "2021-09-29 20:59:16"
      },
      "item_94": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 19,
        "fieldId": 161,
        "relationshipId": null,
        "name": "is_author",
        "label": "Is Author",
        "placeholder": "Is Author",
        "order": 3,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "checkbox",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "boolean"
        ],
        "updateValidation": [
          "nullable",
          "boolean"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 94,
        "createdAt": "2021-04-08 15:22:43",
        "updatedAt": "2021-10-08 22:01:25",
        "relationshipCollectionName": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null
      },
      "item_93": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 19,
        "fieldId": 160,
        "relationshipId": null,
        "name": "is_editor",
        "label": "Is Editor",
        "placeholder": "Is Editor",
        "order": 4,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "checkbox",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "boolean"
        ],
        "updateValidation": [
          "nullable",
          "boolean"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 93,
        "createdAt": "2021-04-08 15:22:43",
        "updatedAt": "2021-10-08 22:01:28",
        "relationshipCollectionName": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null
      },
      "item_92": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 19,
        "fieldId": 159,
        "relationshipId": null,
        "name": "is_translator",
        "label": "Is Translator",
        "placeholder": "Is Translator",
        "order": 5,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "checkbox",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "boolean"
        ],
        "updateValidation": [
          "nullable",
          "boolean"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 92,
        "createdAt": "2021-04-08 15:22:43",
        "updatedAt": "2021-10-08 22:01:33",
        "relationshipCollectionName": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null
      },
      "item_91": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 19,
        "fieldId": 158,
        "relationshipId": null,
        "name": "is_compiler",
        "label": "Is Compiler",
        "placeholder": "Is Compiler",
        "order": 6,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "type": "checkbox",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "boolean"
        ],
        "updateValidation": [
          "nullable",
          "boolean"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 91,
        "createdAt": "2021-04-08 15:22:43",
        "updatedAt": "2021-10-08 22:02:11",
        "relationshipCollectionName": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null
      },
      "item_127": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 23,
        "fieldId": 216,
        "relationshipId": null,
        "relationshipCollectionName": null,
        "name": "title",
        "label": "Title",
        "placeholder": "Title",
        "order": 1,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "required",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "required",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 127,
        "createdAt": "2021-10-08 22:14:47",
        "updatedAt": "2021-10-08 22:18:31"
      },
      "item_128": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 23,
        "fieldId": 218,
        "relationshipId": null,
        "relationshipCollectionName": null,
        "name": "subtitle",
        "label": "Subtitle",
        "placeholder": "Subtitle",
        "order": 2,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "nullable",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 128,
        "createdAt": "2021-10-08 22:14:47",
        "updatedAt": "2021-10-08 22:18:31"
      },
      "item_129": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 23,
        "fieldId": 219,
        "relationshipId": null,
        "relationshipCollectionName": null,
        "name": "title_parent",
        "label": "Title Parent",
        "placeholder": "Title Parent",
        "order": 3,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "nullable",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 129,
        "createdAt": "2021-10-08 22:14:47",
        "updatedAt": "2021-10-08 22:18:31"
      },
      "item_130": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 23,
        "fieldId": 220,
        "relationshipId": null,
        "relationshipCollectionName": null,
        "name": "volume",
        "label": "Volume",
        "placeholder": "Volume",
        "order": 4,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "nullable",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 130,
        "createdAt": "2021-10-08 22:14:47",
        "updatedAt": "2021-10-08 22:18:31"
      },
      "item_131": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 23,
        "fieldId": 221,
        "relationshipId": null,
        "relationshipCollectionName": null,
        "name": "page_range",
        "label": "Page Range",
        "placeholder": "Page Range",
        "order": 5,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "max:255"
        ],
        "updateValidation": [
          "nullable",
          "max:255"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 131,
        "createdAt": "2021-10-08 22:14:47",
        "updatedAt": "2021-10-08 22:18:31"
      },
      "item_132": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 23,
        "fieldId": 222,
        "relationshipId": null,
        "relationshipCollectionName": null,
        "name": "page_total",
        "label": "Page Total",
        "placeholder": "Page Total",
        "order": 6,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "max:255"
        ],
        "updateValidation": [
          "nullable",
          "max:255"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 132,
        "createdAt": "2021-10-08 22:14:47",
        "updatedAt": "2021-10-08 22:18:31"
      },
      "item_133": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 23,
        "fieldId": 223,
        "relationshipId": null,
        "relationshipCollectionName": null,
        "name": "publisher_name",
        "label": "Publisher Name",
        "placeholder": "Publisher Name",
        "order": 7,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "nullable",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 133,
        "createdAt": "2021-10-08 22:14:47",
        "updatedAt": "2021-10-08 22:18:31"
      },
      "item_134": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 23,
        "fieldId": 224,
        "relationshipId": null,
        "relationshipCollectionName": null,
        "name": "publisher_city",
        "label": "Publisher City",
        "placeholder": "Publisher City",
        "order": 8,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "nullable",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 134,
        "createdAt": "2021-10-08 22:14:47",
        "updatedAt": "2021-10-08 22:18:31"
      },
      "item_135": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 23,
        "fieldId": 225,
        "relationshipId": null,
        "relationshipCollectionName": null,
        "name": "date",
        "label": "Date",
        "placeholder": "Date",
        "order": 9,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null,
        "type": "date",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "date"
        ],
        "updateValidation": [
          "nullable",
          "date"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 135,
        "createdAt": "2021-10-08 22:14:47",
        "updatedAt": "2021-10-08 22:18:31"
      },
      "item_136": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 23,
        "fieldId": 226,
        "relationshipId": null,
        "relationshipCollectionName": null,
        "name": "isbn",
        "label": "Isbn",
        "placeholder": "Isbn",
        "order": 10,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "nullable",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "nullable",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 136,
        "createdAt": "2021-10-08 22:14:47",
        "updatedAt": "2021-10-08 22:18:31"
      },
      "item_137": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 23,
        "fieldId": 217,
        "relationshipId": 16,
        "relationshipCollectionName": "documents",
        "name": "document_id",
        "label": "Document",
        "placeholder": "Document",
        "order": 11,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null,
        "type": "select",
        "checked": false,
        "max": null,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "required",
          "exists:documents,id"
        ],
        "updateValidation": [
          "required",
          "exists:documents,id"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 137,
        "createdAt": "2021-10-08 22:14:47",
        "updatedAt": "2021-10-08 22:18:31"
      },
      "item_138": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 24,
        "fieldId": 234,
        "relationshipId": 20,
        "relationshipCollectionName": "documents",
        "name": "document_id",
        "label": "Document",
        "placeholder": "Document",
        "order": 1,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null,
        "type": "select",
        "checked": false,
        "max": null,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "required",
          "exists:documents,id"
        ],
        "updateValidation": [
          "required",
          "exists:documents,id"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 138,
        "createdAt": "2021-10-08 22:14:53",
        "updatedAt": "2021-10-08 22:14:53"
      },
      "item_139": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 24,
        "fieldId": 235,
        "relationshipId": 22,
        "relationshipCollectionName": "users",
        "name": "user_id",
        "label": "User",
        "placeholder": "User",
        "order": 2,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null,
        "type": "select",
        "checked": false,
        "max": null,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "required",
          "exists:users,id"
        ],
        "updateValidation": [
          "required",
          "exists:users,id"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 139,
        "createdAt": "2021-10-08 22:14:53",
        "updatedAt": "2021-10-08 22:14:53"
      },
      "item_140": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 24,
        "fieldId": 236,
        "relationshipId": null,
        "relationshipCollectionName": null,
        "name": "activity_type",
        "label": "Activity Type",
        "placeholder": "Activity Type",
        "order": 3,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null,
        "type": "select",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [
          {
            "value": "created",
            "label": "Created"
          },
          {
            "value": "proofread",
            "label": "Proofread"
          },
          {
            "value": "formatted",
            "label": "Formatted"
          },
          {
            "value": "published",
            "label": "Published"
          },
          {
            "value": "depublished",
            "label": "Depublished"
          }
        ],
        "validation": [
          "required",
          "in:created,proofread,formatted,published,depublished"
        ],
        "updateValidation": [
          "required",
          "in:created,proofread,formatted,published,depublished"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 140,
        "createdAt": "2021-10-08 22:14:53",
        "updatedAt": "2021-10-11 18:23:53"
      },
      "item_141": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "crudId": 24,
        "fieldId": 237,
        "relationshipId": null,
        "relationshipCollectionName": null,
        "name": "comment",
        "label": "Comment",
        "placeholder": "Comment",
        "order": 4,
        "cols": 12,
        "colsMedium": 12,
        "colsLarge": 12,
        "readOnly": false,
        "required": true,
        "defaultValue": null,
        "isComputed": false,
        "computedFormula": null,
        "showComputedOnLivewireForm": false,
        "livewireInputReference": null,
        "type": "text",
        "checked": false,
        "max": 255,
        "min": null,
        "step": null,
        "items": [],
        "validation": [
          "required",
          "max:255",
          "string"
        ],
        "updateValidation": [
          "required",
          "max:255",
          "string"
        ],
        "onCreate": true,
        "onUpdate": true,
        "onShow": true,
        "onIndex": true,
        "id": 141,
        "createdAt": "2021-10-08 22:14:54",
        "updatedAt": "2021-10-08 22:14:54"
      }
    },
    "manytomanyrelationships": {
      "manytomanyrelationships": {
        "count": 14,
        "lastPrimaryKey": 40,
        "index": {
          "1": {
            "hasMany": {
              "manytomanyrelationships.inverseId": [
                2
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "2": {
            "hasMany": {
              "manytomanyrelationships.inverseId": [
                1
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "17": {
            "hasMany": {
              "manytomanyrelationships.inverseId": [
                18
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "18": {
            "hasMany": {
              "manytomanyrelationships.inverseId": [
                17
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "19": {
            "hasMany": {
              "manytomanyrelationships.inverseId": [
                20
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "20": {
            "hasMany": {
              "manytomanyrelationships.inverseId": [
                19
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "29": {
            "hasMany": {
              "manytomanyrelationships.inverseId": [
                30
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "30": {
            "hasMany": {
              "manytomanyrelationships.inverseId": [
                29
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "31": {
            "hasMany": {
              "manytomanyrelationships.inverseId": [
                32
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "32": {
            "hasMany": {
              "manytomanyrelationships.inverseId": [
                31
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "37": {
            "hasMany": {
              "manytomanyrelationships.inverseId": [
                38
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "38": {
            "hasMany": {
              "manytomanyrelationships.inverseId": [
                37
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "39": {
            "hasMany": {
              "manytomanyrelationships.inverseId": [
                40
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "40": {
            "hasMany": {
              "manytomanyrelationships.inverseId": [
                39
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          }
        },
        "additionalIndexes": {},
        "items": [],
        "relations": [],
        "reladbVersion": "0.3.1"
      },
      "item_37": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "modelId": 39,
        "pivotId": 55,
        "inverseId": 38,
        "localModelId": 29,
        "modelKeyId": 290,
        "localModelKeyId": 291,
        "name": "documents",
        "type": "belongsToMany",
        "pivotOriginalName": "collection_document",
        "modelKeyOriginalName": "document_id",
        "localModelKeyOriginalName": "collection_id",
        "hasApi": true,
        "id": 37,
        "createdAt": "2021-10-11 20:50:41",
        "updatedAt": "2021-10-11 20:50:41"
      },
      "item_38": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "modelId": 29,
        "pivotId": 55,
        "inverseId": 37,
        "localModelId": 39,
        "modelKeyId": 291,
        "localModelKeyId": 290,
        "name": "collections",
        "type": "belongsToMany",
        "pivotOriginalName": null,
        "modelKeyOriginalName": null,
        "localModelKeyOriginalName": null,
        "hasApi": true,
        "id": 38,
        "createdAt": "2021-10-11 20:50:41",
        "updatedAt": "2021-10-11 20:50:41"
      },
      "item_39": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "modelId": 39,
        "pivotId": 56,
        "inverseId": 40,
        "localModelId": 30,
        "modelKeyId": 292,
        "localModelKeyId": 293,
        "name": "documents",
        "type": "belongsToMany",
        "pivotOriginalName": "creator_document",
        "modelKeyOriginalName": "document_id",
        "localModelKeyOriginalName": "creator_id",
        "hasApi": true,
        "id": 39,
        "createdAt": "2021-10-11 20:51:06",
        "updatedAt": "2021-10-11 20:51:06"
      },
      "item_40": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "modelId": 30,
        "pivotId": 56,
        "inverseId": 39,
        "localModelId": 39,
        "modelKeyId": 293,
        "localModelKeyId": 292,
        "name": "creators",
        "type": "belongsToMany",
        "pivotOriginalName": null,
        "modelKeyOriginalName": null,
        "localModelKeyOriginalName": null,
        "hasApi": true,
        "id": 40,
        "createdAt": "2021-10-11 20:51:06",
        "updatedAt": "2021-10-11 20:51:06"
      },
      "item_20": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "modelId": 28,
        "pivotId": 36,
        "inverseId": 19,
        "localModelId": 39,
        "modelKeyId": 184,
        "localModelKeyId": 183,
        "name": "languages",
        "type": "belongsToMany",
        "pivotOriginalName": null,
        "modelKeyOriginalName": null,
        "localModelKeyOriginalName": null,
        "hasApi": true,
        "id": 20,
        "createdAt": "2021-04-07 13:42:27",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_19": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "modelId": 39,
        "pivotId": 36,
        "inverseId": 20,
        "localModelId": 28,
        "modelKeyId": 183,
        "localModelKeyId": 184,
        "name": "documents",
        "type": "belongsToMany",
        "pivotOriginalName": "document_language",
        "modelKeyOriginalName": "document_id",
        "localModelKeyOriginalName": "language_id",
        "hasApi": true,
        "id": 19,
        "createdAt": "2021-04-07 13:42:27",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_18": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "modelId": 27,
        "pivotId": 35,
        "inverseId": 17,
        "localModelId": 39,
        "modelKeyId": 181,
        "localModelKeyId": 182,
        "name": "tags",
        "type": "belongsToMany",
        "pivotOriginalName": "document_tag",
        "modelKeyOriginalName": "tag_id",
        "localModelKeyOriginalName": "document_id",
        "hasApi": true,
        "id": 18,
        "createdAt": "2021-04-07 13:45:34",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_17": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "modelId": 39,
        "pivotId": 35,
        "inverseId": 18,
        "localModelId": 27,
        "modelKeyId": 182,
        "localModelKeyId": 181,
        "name": "documents",
        "type": "belongsToMany",
        "pivotOriginalName": null,
        "modelKeyOriginalName": null,
        "localModelKeyOriginalName": null,
        "hasApi": true,
        "id": 17,
        "createdAt": "2021-04-07 13:45:34",
        "updatedAt": "2021-09-29 20:59:17"
      },
      "item_31": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "modelId": 26,
        "pivotId": 52,
        "inverseId": 32,
        "localModelId": 39,
        "modelKeyId": 284,
        "localModelKeyId": 285,
        "name": "locations",
        "type": "belongsToMany",
        "pivotOriginalName": "document_location",
        "modelKeyOriginalName": "location_id",
        "localModelKeyOriginalName": "document_id",
        "hasApi": true,
        "id": 31,
        "createdAt": "2021-10-11 18:07:38",
        "updatedAt": "2021-10-11 18:07:38"
      },
      "item_32": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "modelId": 39,
        "pivotId": 52,
        "inverseId": 31,
        "localModelId": 26,
        "modelKeyId": 285,
        "localModelKeyId": 284,
        "name": "documents",
        "type": "belongsToMany",
        "pivotOriginalName": null,
        "modelKeyOriginalName": null,
        "localModelKeyOriginalName": null,
        "hasApi": true,
        "id": 32,
        "createdAt": "2021-10-11 18:07:38",
        "updatedAt": "2021-10-11 18:07:38"
      }
    },
    "projects": {
      "projects": {
        "count": 3,
        "lastPrimaryKey": 4,
        "index": {
          "1": {
            "hasMany": {
              "entities.projectId": [
                2,
                1,
                8,
                3,
                7,
                5,
                9
              ],
              "cruds.projectId": [
                1,
                2,
                3,
                4,
                5,
                6
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "3": {
            "hasMany": {
              "entities.projectId": [
                28,
                29,
                36,
                35,
                26,
                27,
                40,
                30,
                31,
                39,
                43,
                52,
                55,
                56
              ],
              "cruds.projectId": [
                22,
                18,
                16,
                20,
                17,
                15,
                19,
                23,
                24
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          },
          "4": {
            "hasMany": {
              "entities.projectId": [
                45,
                46,
                49,
                51,
                48,
                50
              ]
            },
            "hasOne": {},
            "belongsTo": {},
            "belongsToMany": {}
          }
        },
        "additionalIndexes": {},
        "items": [],
        "relations": [],
        "reladbVersion": "0.3.1"
      },
      "item_3": {
        "__returnRelationsAutomatically": true,
        "__saveDataToStorage": true,
        "__onUpdateListener": null,
        "__customEventsEnabled": false,
        "name": "Bahai Library Online",
        "url": "http://localhost:8000",
        "mode": "draft",
        "folder": "/home/eclipxe/work/bahai",
        "authModelId": 31,
        "tenancyModelId": null,
        "settings": {
          "cssFramework": "tailwind",
          "theme": "default",
          "uiTemplate": "jetstream",
          "mutateDatesToCarbon": true,
          "authModel": null,
          "massAssignment": "fillable",
          "validationMode": "array",
          "routesMode": "resource",
          "viewsFormMode": "blade",
          "modelsFolder": "/Models",
          "policiesFolder": "/Policies",
          "servicesFolder": "/Services",
          "requestsFolder": "/Http/Requests",
          "controllersFolder": "/Http/Controllers",
          "apiControllersFolder": "/Http/Controllers/Api",
          "viewsFolder": "/resources/views/app",
          "controllerNameMode": "singular",
          "schemaZoom": 0.6000000000000001,
          "schemaScrollTop": 4802,
          "schemaScrollLeft": 4045,
          "turbolinks": true,
          "modules": []
        },
        "codeSettings": {
          "options": {
            "forceGeneration": true,
            "deleteRemovedModules": true
          },
          "base": {
            "migrations": true,
            "models": true,
            "policies": true,
            "factories": true,
            "seeders": true,
            "routes": false,
            "apiRoutes": true,
            "apiSanctumAuth": true
          },
          "cruds": {
            "15": {
              "crudId": 15,
              "name": "Locations",
              "requests": true,
              "controller": false,
              "views": false,
              "tests": true,
              "api": true
            },
            "16": {
              "crudId": 16,
              "name": "Tags",
              "requests": true,
              "controller": false,
              "views": false,
              "tests": true,
              "api": true
            },
            "17": {
              "crudId": 17,
              "name": "Languages",
              "requests": true,
              "controller": false,
              "views": false,
              "tests": true,
              "api": true
            },
            "18": {
              "crudId": 18,
              "name": "Collections",
              "requests": true,
              "controller": false,
              "views": false,
              "tests": true,
              "api": true
            },
            "19": {
              "crudId": 19,
              "name": "Creators",
              "requests": true,
              "controller": false,
              "views": false,
              "tests": true,
              "api": true
            },
            "20": {
              "crudId": 20,
              "name": "Users",
              "requests": true,
              "controller": false,
              "views": false,
              "tests": true,
              "api": true
            },
            "22": {
              "crudId": 22,
              "name": "Documents",
              "requests": true,
              "controller": false,
              "views": false,
              "tests": true,
              "api": true
            },
            "23": {
              "crudId": 23,
              "name": "Editions",
              "requests": true,
              "controller": false,
              "views": false,
              "tests": true,
              "api": true
            },
            "24": {
              "crudId": 24,
              "name": "Activities",
              "requests": true,
              "controller": false,
              "views": false,
              "tests": true,
              "api": true
            }
          },
          "modules": {
            "permissionsApi": false,
            "permissions": false,
            "uiTemplate": false
          },
          "generationCommands": {
            "gitClone": false,
            "composerInstall": false,
            "storageLink": false,
            "npmInstall": false,
            "compileAssets": false,
            "checkDependencies": true
          },
          "runCommands": {
            "compileAssets": true,
            "migrate": true,
            "serve": true,
            "openBrowser": true
          }
        },
        "connection": {
          "type": "mysql",
          "host": "127.0.0.1",
          "port": 3306,
          "database": "BLO-2.0",
          "username": "root",
          "password": ""
        },
        "modules": [
          "auth",
          "permissions",
          "multiTenancy"
        ],
        "version": "0.8.2",
        "laravelVersion": 8,
        "repositoryUrl": "https://github.com/BahaiLibraryOnline/Bahai-Library-Online.git",
        "repositoryBranch": "main",
        "files": {
          "/app/Providers/AuthServiceProvider.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\Facades\\Gate;\nuse Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    /**\n     * The policy mappings for the application.\n     *\n     * @var array\n     */\n    protected $policies = [\n        // 'App\\Models\\Model' => 'App\\Policies\\ModelPolicy',\n    ];\n\n    /**\n     * Register any authentication / authorization services.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        // Automatically finding the Policies\n        Gate::guessPolicyNamesUsing(function ($modelClass) {\n            return 'App\\\\Policies\\\\' . class_basename($modelClass) . 'Policy';\n        });\n\n        $this->registerPolicies();\n    }\n}\n",
            "module": "base",
            "path": "/app/Providers/AuthServiceProvider.php"
          },
          "/app/Providers/AppServiceProvider.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register any application services.\n     *\n     * @return void\n     */\n    public function register()\n    {\n    }\n\n    /**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        //\n    }\n}\n",
            "module": "base",
            "path": "/app/Providers/AppServiceProvider.php"
          },
          "/config/auth.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nreturn [\n    'super_admins' => ['admin@admin.com'],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Authentication Defaults\n    |--------------------------------------------------------------------------\n    |\n    | This option controls the default authentication \"guard\" and password\n    | reset options for your application. You may change these defaults\n    | as required, but they're a perfect start for most applications.\n    |\n    */\n\n    'defaults' => [\n        'guard' => 'web',\n        'passwords' => 'users',\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Authentication Guards\n    |--------------------------------------------------------------------------\n    |\n    | Next, you may define every authentication guard for your application.\n    | Of course, a great default configuration has been defined for you\n    | here which uses session storage and the Eloquent user provider.\n    |\n    | All authentication drivers have a user provider. This defines how the\n    | users are actually retrieved out of your database or other storage\n    | mechanisms used by this application to persist your user's data.\n    |\n    | Supported: \"session\", \"token\"\n    |\n    */\n\n    'guards' => [\n        'web' => [\n            'driver' => 'session',\n            'provider' => 'users',\n        ],\n\n        'api' => [\n            'driver' => 'token',\n            'provider' => 'users',\n            'hash' => false,\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | User Providers\n    |--------------------------------------------------------------------------\n    |\n    | All authentication drivers have a user provider. This defines how the\n    | users are actually retrieved out of your database or other storage\n    | mechanisms used by this application to persist your user's data.\n    |\n    | If you have multiple user tables or models you may configure multiple\n    | sources which represent each model / table. These sources may then\n    | be assigned to any extra authentication guards you have defined.\n    |\n    | Supported: \"database\", \"eloquent\"\n    |\n    */\n\n    'providers' => [\n        'users' => [\n            'driver' => 'eloquent',\n            'model' => App\\Models\\User::class,\n        ],\n\n        // 'users' => [\n        //     'driver' => 'database',\n        //     'table' => 'users',\n        // ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Resetting Passwords\n    |--------------------------------------------------------------------------\n    |\n    | You may specify multiple password reset configurations if you have more\n    | than one user table or model in the application and you want to have\n    | separate password reset settings based on the specific user types.\n    |\n    | The expire time is the number of minutes that the reset token should be\n    | considered valid. This security feature keeps tokens short-lived so\n    | they have less time to be guessed. You may change this as needed.\n    |\n    */\n\n    'passwords' => [\n        'users' => [\n            'provider' => 'users',\n            'table' => 'password_resets',\n            'expire' => 60,\n            'throttle' => 60,\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Password Confirmation Timeout\n    |--------------------------------------------------------------------------\n    |\n    | Here you may define the amount of seconds before a password confirmation\n    | times out and the user is prompted to re-enter their password via the\n    | confirmation screen. By default, the timeout lasts for three hours.\n    |\n    */\n\n    'password_timeout' => 10800,\n];\n",
            "module": "base",
            "path": "/config/auth.php"
          },
          "/app/Http/Controllers/Controller.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Foundation\\Bus\\DispatchesJobs;\nuse Illuminate\\Routing\\Controller as BaseController;\nuse Illuminate\\Foundation\\Validation\\ValidatesRequests;\nuse Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests;\n\nclass Controller extends BaseController\n{\n    use AuthorizesRequests, DispatchesJobs, ValidatesRequests;\n}\n",
            "module": "base",
            "path": "/app/Http/Controllers/Controller.php"
          },
          "/app/Http/Requests/DocumentStoreRequest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass DocumentStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'slug' => ['required', 'max:255', 'string'],\n            'is_pdf' => ['nullable', 'boolean', 'boolean'],\n            'is_audio' => ['nullable', 'boolean', 'boolean'],\n            'is_image' => ['nullable', 'boolean', 'boolean'],\n            'is_video' => ['nullable', 'boolean', 'boolean'],\n            'is_html' => ['nullable', 'boolean', 'boolean'],\n            'file_url' => ['nullable', 'max:255', 'string'],\n            'blurb' => ['nullable', 'max:255', 'string'],\n            'content_html' => ['nullable', 'max:255', 'string'],\n            'content_size' => ['nullable', 'max:255'],\n            'edit_quality' => ['nullable', 'in:high,medium,low'],\n            'formatting_quality' => ['nullable', 'in:high,medium,low'],\n            'publication_permission' => [\n                'required',\n                'in:author,editor,publisher,translator,recipient,fair use,unknown',\n            ],\n            'notes' => ['nullable', 'max:255', 'string'],\n            'input_type' => ['required', 'in:scanned,typed,transcribed'],\n            'publication_approval' => [\n                'required',\n                'in:approved,rejected,pending',\n            ],\n            'views' => ['required', 'max:255'],\n        ];\n    }\n}\n",
            "module": "crud:22",
            "path": "/app/Http/Requests/DocumentStoreRequest.php"
          },
          "/app/Http/Requests/DocumentUpdateRequest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass DocumentUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'slug' => ['required', 'max:255', 'string'],\n            'is_pdf' => ['nullable', 'boolean', 'boolean'],\n            'is_audio' => ['nullable', 'boolean', 'boolean'],\n            'is_image' => ['nullable', 'boolean', 'boolean'],\n            'is_video' => ['nullable', 'boolean', 'boolean'],\n            'is_html' => ['nullable', 'boolean', 'boolean'],\n            'file_url' => ['nullable', 'max:255', 'string'],\n            'blurb' => ['nullable', 'max:255', 'string'],\n            'content_html' => ['nullable', 'max:255', 'string'],\n            'content_size' => ['nullable', 'max:255'],\n            'edit_quality' => ['nullable', 'in:high,medium,low'],\n            'formatting_quality' => ['nullable', 'in:high,medium,low'],\n            'publication_permission' => [\n                'required',\n                'in:author,editor,publisher,translator,recipient,fair use,unknown',\n            ],\n            'notes' => ['nullable', 'max:255', 'string'],\n            'input_type' => ['required', 'in:scanned,typed,transcribed'],\n            'publication_approval' => [\n                'required',\n                'in:approved,rejected,pending',\n            ],\n            'views' => ['required', 'max:255'],\n        ];\n    }\n}\n",
            "module": "crud:22",
            "path": "/app/Http/Requests/DocumentUpdateRequest.php"
          },
          "/app/Http/Controllers/DocumentController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Document;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests\\DocumentStoreRequest;\nuse App\\Http\\Requests\\DocumentUpdateRequest;\n\nclass DocumentController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('view-any', Document::class);\n\n        $search = $request->get('search', '');\n\n        $documents = Document::search($search)\n            ->latest()\n            ->paginate(5);\n\n        return view('app.documents.index', compact('documents', 'search'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create(Request $request)\n    {\n        $this->authorize('create', Document::class);\n\n        return view('app.documents.create');\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\DocumentStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(DocumentStoreRequest $request)\n    {\n        $this->authorize('create', Document::class);\n\n        $validated = $request->validated();\n\n        $document = Document::create($validated);\n\n        return redirect()\n            ->route('documents.edit', $document)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Document $document)\n    {\n        $this->authorize('view', $document);\n\n        return view('app.documents.show', compact('document'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(Request $request, Document $document)\n    {\n        $this->authorize('update', $document);\n\n        return view('app.documents.edit', compact('document'));\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\DocumentUpdateRequest $request\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(DocumentUpdateRequest $request, Document $document)\n    {\n        $this->authorize('update', $document);\n\n        $validated = $request->validated();\n\n        $document->update($validated);\n\n        return redirect()\n            ->route('documents.edit', $document)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Document $document)\n    {\n        $this->authorize('delete', $document);\n\n        $document->delete();\n\n        return redirect()\n            ->route('documents.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n",
            "module": "crud:22",
            "path": "/app/Http/Controllers/DocumentController.php"
          },
          "/tests/Feature/Controllers/DocumentControllerTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\Document;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass DocumentControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_documents()\n    {\n        $documents = Document::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('documents.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.documents.index')\n            ->assertViewHas('documents');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_document()\n    {\n        $response = $this->get(route('documents.create'));\n\n        $response->assertOk()->assertViewIs('app.documents.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_document()\n    {\n        $data = Document::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->post(route('documents.store'), $data);\n\n        $this->assertDatabaseHas('documents', $data);\n\n        $document = Document::latest('id')->first();\n\n        $response->assertRedirect(route('documents.edit', $document));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_document()\n    {\n        $document = Document::factory()->create();\n\n        $response = $this->get(route('documents.show', $document));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.documents.show')\n            ->assertViewHas('document');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_document()\n    {\n        $document = Document::factory()->create();\n\n        $response = $this->get(route('documents.edit', $document));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.documents.edit')\n            ->assertViewHas('document');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_document()\n    {\n        $document = Document::factory()->create();\n\n        $data = [\n            'is_pdf' => $this->faker->boolean,\n            'is_audio' => $this->faker->boolean,\n            'is_image' => $this->faker->boolean,\n            'is_video' => $this->faker->boolean,\n            'is_html' => $this->faker->boolean,\n            'file_url' => $this->faker->text(255),\n            'blurb' => $this->faker->text,\n            'content_html' => $this->faker->text,\n            'content_size' => $this->faker->word,\n            'edit_quality' => 'high',\n            'formatting_quality' => 'high',\n            'publication_permission' => 'author',\n            'notes' => $this->faker->text,\n            'input_type' => 'scanned',\n            'publication_approval' => 'approved',\n            'views' => 0,\n        ];\n\n        $response = $this->put(route('documents.update', $document), $data);\n\n        $data['id'] = $document->id;\n\n        $this->assertDatabaseHas('documents', $data);\n\n        $response->assertRedirect(route('documents.edit', $document));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_document()\n    {\n        $document = Document::factory()->create();\n\n        $response = $this->delete(route('documents.destroy', $document));\n\n        $response->assertRedirect(route('documents.index'));\n\n        $this->assertSoftDeleted($document);\n    }\n}\n",
            "module": "crud:22",
            "path": "/tests/Feature/Controllers/DocumentControllerTest.php"
          },
          "/app/Http/Requests/CollectionStoreRequest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass CollectionStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'slug' => ['required', 'max:255', 'string'],\n            'name' => ['required', 'max:255', 'string'],\n            'shortname' => ['required', 'max:255', 'string'],\n        ];\n    }\n}\n",
            "module": "crud:18",
            "path": "/app/Http/Requests/CollectionStoreRequest.php"
          },
          "/app/Http/Requests/CollectionUpdateRequest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass CollectionUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'slug' => ['required', 'max:255', 'string'],\n            'name' => ['required', 'max:255', 'string'],\n            'shortname' => ['required', 'max:255', 'string'],\n        ];\n    }\n}\n",
            "module": "crud:18",
            "path": "/app/Http/Requests/CollectionUpdateRequest.php"
          },
          "/app/Http/Controllers/CollectionController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Collection;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests\\CollectionStoreRequest;\nuse App\\Http\\Requests\\CollectionUpdateRequest;\n\nclass CollectionController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('view-any', Collection::class);\n\n        $search = $request->get('search', '');\n\n        $collections = Collection::search($search)\n            ->latest()\n            ->paginate(5);\n\n        return view('app.collections.index', compact('collections', 'search'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create(Request $request)\n    {\n        $this->authorize('create', Collection::class);\n\n        return view('app.collections.create');\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\CollectionStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(CollectionStoreRequest $request)\n    {\n        $this->authorize('create', Collection::class);\n\n        $validated = $request->validated();\n\n        $collection = Collection::create($validated);\n\n        return redirect()\n            ->route('collections.edit', $collection)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Collection $collection\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Collection $collection)\n    {\n        $this->authorize('view', $collection);\n\n        return view('app.collections.show', compact('collection'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Collection $collection\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(Request $request, Collection $collection)\n    {\n        $this->authorize('update', $collection);\n\n        return view('app.collections.edit', compact('collection'));\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\CollectionUpdateRequest $request\n     * @param \\App\\Models\\Collection $collection\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(\n        CollectionUpdateRequest $request,\n        Collection $collection\n    ) {\n        $this->authorize('update', $collection);\n\n        $validated = $request->validated();\n\n        $collection->update($validated);\n\n        return redirect()\n            ->route('collections.edit', $collection)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Collection $collection\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Collection $collection)\n    {\n        $this->authorize('delete', $collection);\n\n        $collection->delete();\n\n        return redirect()\n            ->route('collections.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n",
            "module": "crud:18",
            "path": "/app/Http/Controllers/CollectionController.php"
          },
          "/tests/Feature/Controllers/CollectionControllerTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\Collection;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass CollectionControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_collections()\n    {\n        $collections = Collection::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('collections.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.collections.index')\n            ->assertViewHas('collections');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_collection()\n    {\n        $response = $this->get(route('collections.create'));\n\n        $response->assertOk()->assertViewIs('app.collections.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_collection()\n    {\n        $data = Collection::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->post(route('collections.store'), $data);\n\n        $this->assertDatabaseHas('collections', $data);\n\n        $collection = Collection::latest('id')->first();\n\n        $response->assertRedirect(route('collections.edit', $collection));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_collection()\n    {\n        $collection = Collection::factory()->create();\n\n        $response = $this->get(route('collections.show', $collection));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.collections.show')\n            ->assertViewHas('collection');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_collection()\n    {\n        $collection = Collection::factory()->create();\n\n        $response = $this->get(route('collections.edit', $collection));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.collections.edit')\n            ->assertViewHas('collection');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_collection()\n    {\n        $collection = Collection::factory()->create();\n\n        $data = [\n            'slug' => $this->faker->text(255),\n            'name' => $this->faker->text,\n            'shortname' => $this->faker->text(255),\n        ];\n\n        $response = $this->put(route('collections.update', $collection), $data);\n\n        $data['id'] = $collection->id;\n\n        $this->assertDatabaseHas('collections', $data);\n\n        $response->assertRedirect(route('collections.edit', $collection));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_collection()\n    {\n        $collection = Collection::factory()->create();\n\n        $response = $this->delete(route('collections.destroy', $collection));\n\n        $response->assertRedirect(route('collections.index'));\n\n        $this->assertDeleted($collection);\n    }\n}\n",
            "module": "crud:18",
            "path": "/tests/Feature/Controllers/CollectionControllerTest.php"
          },
          "/app/Http/Requests/TagStoreRequest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass TagStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'label' => ['required', 'max:255', 'string'],\n        ];\n    }\n}\n",
            "module": "crud:16",
            "path": "/app/Http/Requests/TagStoreRequest.php"
          },
          "/app/Http/Requests/TagUpdateRequest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass TagUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'label' => ['required', 'max:255', 'string'],\n        ];\n    }\n}\n",
            "module": "crud:16",
            "path": "/app/Http/Requests/TagUpdateRequest.php"
          },
          "/app/Http/Controllers/TagController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Tag;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests\\TagStoreRequest;\nuse App\\Http\\Requests\\TagUpdateRequest;\n\nclass TagController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('view-any', Tag::class);\n\n        $search = $request->get('search', '');\n\n        $tags = Tag::search($search)\n            ->latest()\n            ->paginate(5);\n\n        return view('app.tags.index', compact('tags', 'search'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create(Request $request)\n    {\n        $this->authorize('create', Tag::class);\n\n        return view('app.tags.create');\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\TagStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(TagStoreRequest $request)\n    {\n        $this->authorize('create', Tag::class);\n\n        $validated = $request->validated();\n\n        $tag = Tag::create($validated);\n\n        return redirect()\n            ->route('tags.edit', $tag)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Tag $tag\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Tag $tag)\n    {\n        $this->authorize('view', $tag);\n\n        return view('app.tags.show', compact('tag'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Tag $tag\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(Request $request, Tag $tag)\n    {\n        $this->authorize('update', $tag);\n\n        return view('app.tags.edit', compact('tag'));\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\TagUpdateRequest $request\n     * @param \\App\\Models\\Tag $tag\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(TagUpdateRequest $request, Tag $tag)\n    {\n        $this->authorize('update', $tag);\n\n        $validated = $request->validated();\n\n        $tag->update($validated);\n\n        return redirect()\n            ->route('tags.edit', $tag)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Tag $tag\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Tag $tag)\n    {\n        $this->authorize('delete', $tag);\n\n        $tag->delete();\n\n        return redirect()\n            ->route('tags.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n",
            "module": "crud:16",
            "path": "/app/Http/Controllers/TagController.php"
          },
          "/tests/Feature/Controllers/TagControllerTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\Tag;\nuse App\\Models\\User;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass TagControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_tags()\n    {\n        $tags = Tag::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('tags.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.tags.index')\n            ->assertViewHas('tags');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_tag()\n    {\n        $response = $this->get(route('tags.create'));\n\n        $response->assertOk()->assertViewIs('app.tags.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_tag()\n    {\n        $data = Tag::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->post(route('tags.store'), $data);\n\n        $this->assertDatabaseHas('tags', $data);\n\n        $tag = Tag::latest('id')->first();\n\n        $response->assertRedirect(route('tags.edit', $tag));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_tag()\n    {\n        $tag = Tag::factory()->create();\n\n        $response = $this->get(route('tags.show', $tag));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.tags.show')\n            ->assertViewHas('tag');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_tag()\n    {\n        $tag = Tag::factory()->create();\n\n        $response = $this->get(route('tags.edit', $tag));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.tags.edit')\n            ->assertViewHas('tag');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_tag()\n    {\n        $tag = Tag::factory()->create();\n\n        $data = [\n            'label' => $this->faker->text(255),\n        ];\n\n        $response = $this->put(route('tags.update', $tag), $data);\n\n        $data['id'] = $tag->id;\n\n        $this->assertDatabaseHas('tags', $data);\n\n        $response->assertRedirect(route('tags.edit', $tag));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_tag()\n    {\n        $tag = Tag::factory()->create();\n\n        $response = $this->delete(route('tags.destroy', $tag));\n\n        $response->assertRedirect(route('tags.index'));\n\n        $this->assertDeleted($tag);\n    }\n}\n",
            "module": "crud:16",
            "path": "/tests/Feature/Controllers/TagControllerTest.php"
          },
          "/app/Http/Requests/UserStoreRequest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Validation\\Rule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass UserStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'name' => ['required', 'max:255', 'string'],\n            'email' => ['required', 'unique:users', 'email'],\n            'password' => ['required'],\n            'status' => ['required', 'in:contributor,editor,admin'],\n        ];\n    }\n}\n",
            "module": "crud:20",
            "path": "/app/Http/Requests/UserStoreRequest.php"
          },
          "/app/Http/Requests/UserUpdateRequest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Validation\\Rule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass UserUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'name' => ['required', 'max:255', 'string'],\n            'email' => ['required', 'unique:users', 'email'],\n            'status' => ['required', 'in:contributor,editor,admin'],\n        ];\n    }\n}\n",
            "module": "crud:20",
            "path": "/app/Http/Requests/UserUpdateRequest.php"
          },
          "/app/Http/Controllers/UserController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Http\\Requests\\UserStoreRequest;\nuse App\\Http\\Requests\\UserUpdateRequest;\n\nclass UserController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('view-any', User::class);\n\n        $search = $request->get('search', '');\n\n        $users = User::search($search)\n            ->latest()\n            ->paginate(5);\n\n        return view('app.users.index', compact('users', 'search'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create(Request $request)\n    {\n        $this->authorize('create', User::class);\n\n        return view('app.users.create');\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\UserStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(UserStoreRequest $request)\n    {\n        $this->authorize('create', User::class);\n\n        $validated = $request->validated();\n\n        $validated['password'] = Hash::make($validated['password']);\n\n        $user = User::create($validated);\n\n        return redirect()\n            ->route('users.edit', $user)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\User $user\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, User $user)\n    {\n        $this->authorize('view', $user);\n\n        return view('app.users.show', compact('user'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\User $user\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(Request $request, User $user)\n    {\n        $this->authorize('update', $user);\n\n        return view('app.users.edit', compact('user'));\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\UserUpdateRequest $request\n     * @param \\App\\Models\\User $user\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(UserUpdateRequest $request, User $user)\n    {\n        $this->authorize('update', $user);\n\n        $validated = $request->validated();\n        if (empty($validated['password'])) {\n            unset($validated['password']);\n        } else {\n            $validated['password'] = Hash::make($validated['password']);\n        }\n\n        $user->update($validated);\n\n        return redirect()\n            ->route('users.edit', $user)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\User $user\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, User $user)\n    {\n        $this->authorize('delete', $user);\n\n        $user->delete();\n\n        return redirect()\n            ->route('users.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n",
            "module": "crud:20",
            "path": "/app/Http/Controllers/UserController.php"
          },
          "/tests/Feature/Controllers/UserControllerTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass UserControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_users()\n    {\n        $users = User::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('users.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.users.index')\n            ->assertViewHas('users');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_user()\n    {\n        $response = $this->get(route('users.create'));\n\n        $response->assertOk()->assertViewIs('app.users.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_user()\n    {\n        $data = User::factory()\n            ->make()\n            ->toArray();\n        $data['password'] = \\Str::random('8');\n\n        $response = $this->post(route('users.store'), $data);\n\n        unset($data['password']);\n        unset($data['email_verified_at']);\n        unset($data['profile_photo_path']);\n\n        $this->assertDatabaseHas('users', $data);\n\n        $user = User::latest('id')->first();\n\n        $response->assertRedirect(route('users.edit', $user));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_user()\n    {\n        $user = User::factory()->create();\n\n        $response = $this->get(route('users.show', $user));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.users.show')\n            ->assertViewHas('user');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_user()\n    {\n        $user = User::factory()->create();\n\n        $response = $this->get(route('users.edit', $user));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.users.edit')\n            ->assertViewHas('user');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_user()\n    {\n        $user = User::factory()->create();\n\n        $data = [\n            'name' => $this->faker->name,\n            'email' => $this->faker->email,\n            'status' => 'contributor',\n        ];\n\n        $data['password'] = \\Str::random('8');\n\n        $response = $this->put(route('users.update', $user), $data);\n\n        unset($data['password']);\n        unset($data['email_verified_at']);\n        unset($data['profile_photo_path']);\n\n        $data['id'] = $user->id;\n\n        $this->assertDatabaseHas('users', $data);\n\n        $response->assertRedirect(route('users.edit', $user));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_user()\n    {\n        $user = User::factory()->create();\n\n        $response = $this->delete(route('users.destroy', $user));\n\n        $response->assertRedirect(route('users.index'));\n\n        $this->assertDeleted($user);\n    }\n}\n",
            "module": "crud:20",
            "path": "/tests/Feature/Controllers/UserControllerTest.php"
          },
          "/app/Http/Requests/LanguageStoreRequest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass LanguageStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'language' => ['required', 'max:255', 'string'],\n            'language_tag' => ['required', 'max:255'],\n        ];\n    }\n}\n",
            "module": "crud:17",
            "path": "/app/Http/Requests/LanguageStoreRequest.php"
          },
          "/app/Http/Requests/LanguageUpdateRequest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass LanguageUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'language' => ['required', 'max:255', 'string'],\n            'language_tag' => ['required', 'max:255'],\n        ];\n    }\n}\n",
            "module": "crud:17",
            "path": "/app/Http/Requests/LanguageUpdateRequest.php"
          },
          "/app/Http/Controllers/LanguageController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Language;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests\\LanguageStoreRequest;\nuse App\\Http\\Requests\\LanguageUpdateRequest;\n\nclass LanguageController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('view-any', Language::class);\n\n        $search = $request->get('search', '');\n\n        $languages = Language::search($search)\n            ->latest()\n            ->paginate(5);\n\n        return view('app.languages.index', compact('languages', 'search'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create(Request $request)\n    {\n        $this->authorize('create', Language::class);\n\n        return view('app.languages.create');\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\LanguageStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(LanguageStoreRequest $request)\n    {\n        $this->authorize('create', Language::class);\n\n        $validated = $request->validated();\n\n        $language = Language::create($validated);\n\n        return redirect()\n            ->route('languages.edit', $language)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Language $language\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Language $language)\n    {\n        $this->authorize('view', $language);\n\n        return view('app.languages.show', compact('language'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Language $language\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(Request $request, Language $language)\n    {\n        $this->authorize('update', $language);\n\n        return view('app.languages.edit', compact('language'));\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\LanguageUpdateRequest $request\n     * @param \\App\\Models\\Language $language\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(LanguageUpdateRequest $request, Language $language)\n    {\n        $this->authorize('update', $language);\n\n        $validated = $request->validated();\n\n        $language->update($validated);\n\n        return redirect()\n            ->route('languages.edit', $language)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Language $language\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Language $language)\n    {\n        $this->authorize('delete', $language);\n\n        $language->delete();\n\n        return redirect()\n            ->route('languages.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n",
            "module": "crud:17",
            "path": "/app/Http/Controllers/LanguageController.php"
          },
          "/tests/Feature/Controllers/LanguageControllerTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\Language;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass LanguageControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_languages()\n    {\n        $languages = Language::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('languages.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.languages.index')\n            ->assertViewHas('languages');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_language()\n    {\n        $response = $this->get(route('languages.create'));\n\n        $response->assertOk()->assertViewIs('app.languages.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_language()\n    {\n        $data = Language::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->post(route('languages.store'), $data);\n\n        $this->assertDatabaseHas('languages', $data);\n\n        $language = Language::latest('id')->first();\n\n        $response->assertRedirect(route('languages.edit', $language));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_language()\n    {\n        $language = Language::factory()->create();\n\n        $response = $this->get(route('languages.show', $language));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.languages.show')\n            ->assertViewHas('language');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_language()\n    {\n        $language = Language::factory()->create();\n\n        $response = $this->get(route('languages.edit', $language));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.languages.edit')\n            ->assertViewHas('language');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_language()\n    {\n        $language = Language::factory()->create();\n\n        $data = [\n            'language' => $this->faker->text(255),\n            'language_tag' => $this->faker->word(255),\n        ];\n\n        $response = $this->put(route('languages.update', $language), $data);\n\n        $data['id'] = $language->id;\n\n        $this->assertDatabaseHas('languages', $data);\n\n        $response->assertRedirect(route('languages.edit', $language));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_language()\n    {\n        $language = Language::factory()->create();\n\n        $response = $this->delete(route('languages.destroy', $language));\n\n        $response->assertRedirect(route('languages.index'));\n\n        $this->assertDeleted($language);\n    }\n}\n",
            "module": "crud:17",
            "path": "/tests/Feature/Controllers/LanguageControllerTest.php"
          },
          "/app/Http/Requests/LocationStoreRequest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass LocationStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'continent' => ['required', 'max:255', 'string'],\n            'country' => ['required', 'max:255', 'string'],\n            'locality' => ['required', 'max:255', 'string'],\n        ];\n    }\n}\n",
            "module": "crud:15",
            "path": "/app/Http/Requests/LocationStoreRequest.php"
          },
          "/app/Http/Requests/LocationUpdateRequest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass LocationUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'continent' => ['required', 'max:255', 'string'],\n            'country' => ['required', 'max:255', 'string'],\n            'locality' => ['required', 'max:255', 'string'],\n        ];\n    }\n}\n",
            "module": "crud:15",
            "path": "/app/Http/Requests/LocationUpdateRequest.php"
          },
          "/app/Http/Controllers/LocationController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Location;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests\\LocationStoreRequest;\nuse App\\Http\\Requests\\LocationUpdateRequest;\n\nclass LocationController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('view-any', Location::class);\n\n        $search = $request->get('search', '');\n\n        $locations = Location::search($search)\n            ->latest()\n            ->paginate(5);\n\n        return view('app.locations.index', compact('locations', 'search'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create(Request $request)\n    {\n        $this->authorize('create', Location::class);\n\n        return view('app.locations.create');\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\LocationStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(LocationStoreRequest $request)\n    {\n        $this->authorize('create', Location::class);\n\n        $validated = $request->validated();\n\n        $location = Location::create($validated);\n\n        return redirect()\n            ->route('locations.edit', $location)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Location $location\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Location $location)\n    {\n        $this->authorize('view', $location);\n\n        return view('app.locations.show', compact('location'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Location $location\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(Request $request, Location $location)\n    {\n        $this->authorize('update', $location);\n\n        return view('app.locations.edit', compact('location'));\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\LocationUpdateRequest $request\n     * @param \\App\\Models\\Location $location\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(LocationUpdateRequest $request, Location $location)\n    {\n        $this->authorize('update', $location);\n\n        $validated = $request->validated();\n\n        $location->update($validated);\n\n        return redirect()\n            ->route('locations.edit', $location)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Location $location\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Location $location)\n    {\n        $this->authorize('delete', $location);\n\n        $location->delete();\n\n        return redirect()\n            ->route('locations.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n",
            "module": "crud:15",
            "path": "/app/Http/Controllers/LocationController.php"
          },
          "/tests/Feature/Controllers/LocationControllerTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\Location;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass LocationControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_locations()\n    {\n        $locations = Location::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('locations.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.locations.index')\n            ->assertViewHas('locations');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_location()\n    {\n        $response = $this->get(route('locations.create'));\n\n        $response->assertOk()->assertViewIs('app.locations.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_location()\n    {\n        $data = Location::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->post(route('locations.store'), $data);\n\n        $this->assertDatabaseHas('locations', $data);\n\n        $location = Location::latest('id')->first();\n\n        $response->assertRedirect(route('locations.edit', $location));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_location()\n    {\n        $location = Location::factory()->create();\n\n        $response = $this->get(route('locations.show', $location));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.locations.show')\n            ->assertViewHas('location');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_location()\n    {\n        $location = Location::factory()->create();\n\n        $response = $this->get(route('locations.edit', $location));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.locations.edit')\n            ->assertViewHas('location');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_location()\n    {\n        $location = Location::factory()->create();\n\n        $data = [\n            'continent' => $this->faker->text(255),\n            'country' => $this->faker->country,\n            'locality' => $this->faker->text(255),\n        ];\n\n        $response = $this->put(route('locations.update', $location), $data);\n\n        $data['id'] = $location->id;\n\n        $this->assertDatabaseHas('locations', $data);\n\n        $response->assertRedirect(route('locations.edit', $location));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_location()\n    {\n        $location = Location::factory()->create();\n\n        $response = $this->delete(route('locations.destroy', $location));\n\n        $response->assertRedirect(route('locations.index'));\n\n        $this->assertDeleted($location);\n    }\n}\n",
            "module": "crud:15",
            "path": "/tests/Feature/Controllers/LocationControllerTest.php"
          },
          "/app/Http/Requests/CreatorStoreRequest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass CreatorStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'first_names' => ['nullable', 'max:255', 'string'],\n            'last_names' => ['nullable', 'max:255', 'string'],\n            'is_author' => ['nullable', 'boolean'],\n            'is_editor' => ['nullable', 'boolean'],\n            'is_translator' => ['nullable', 'boolean'],\n            'is_compiler' => ['nullable', 'boolean'],\n        ];\n    }\n}\n",
            "module": "crud:19",
            "path": "/app/Http/Requests/CreatorStoreRequest.php"
          },
          "/app/Http/Requests/CreatorUpdateRequest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass CreatorUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'first_names' => ['nullable', 'max:255', 'string'],\n            'last_names' => ['nullable', 'max:255', 'string'],\n            'is_author' => ['nullable', 'boolean'],\n            'is_editor' => ['nullable', 'boolean'],\n            'is_translator' => ['nullable', 'boolean'],\n            'is_compiler' => ['nullable', 'boolean'],\n        ];\n    }\n}\n",
            "module": "crud:19",
            "path": "/app/Http/Requests/CreatorUpdateRequest.php"
          },
          "/app/Http/Controllers/CreatorController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Creator;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests\\CreatorStoreRequest;\nuse App\\Http\\Requests\\CreatorUpdateRequest;\n\nclass CreatorController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('view-any', Creator::class);\n\n        $search = $request->get('search', '');\n\n        $creators = Creator::search($search)\n            ->latest()\n            ->paginate(5);\n\n        return view('app.creators.index', compact('creators', 'search'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create(Request $request)\n    {\n        $this->authorize('create', Creator::class);\n\n        return view('app.creators.create');\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\CreatorStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(CreatorStoreRequest $request)\n    {\n        $this->authorize('create', Creator::class);\n\n        $validated = $request->validated();\n\n        $creator = Creator::create($validated);\n\n        return redirect()\n            ->route('creators.edit', $creator)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Creator $creator\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Creator $creator)\n    {\n        $this->authorize('view', $creator);\n\n        return view('app.creators.show', compact('creator'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Creator $creator\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(Request $request, Creator $creator)\n    {\n        $this->authorize('update', $creator);\n\n        return view('app.creators.edit', compact('creator'));\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\CreatorUpdateRequest $request\n     * @param \\App\\Models\\Creator $creator\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(CreatorUpdateRequest $request, Creator $creator)\n    {\n        $this->authorize('update', $creator);\n\n        $validated = $request->validated();\n\n        $creator->update($validated);\n\n        return redirect()\n            ->route('creators.edit', $creator)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Creator $creator\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Creator $creator)\n    {\n        $this->authorize('delete', $creator);\n\n        $creator->delete();\n\n        return redirect()\n            ->route('creators.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n",
            "module": "crud:19",
            "path": "/app/Http/Controllers/CreatorController.php"
          },
          "/tests/Feature/Controllers/CreatorControllerTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\Creator;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass CreatorControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_creators()\n    {\n        $creators = Creator::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('creators.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.creators.index')\n            ->assertViewHas('creators');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_creator()\n    {\n        $response = $this->get(route('creators.create'));\n\n        $response->assertOk()->assertViewIs('app.creators.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_creator()\n    {\n        $data = Creator::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->post(route('creators.store'), $data);\n\n        $this->assertDatabaseHas('creators', $data);\n\n        $creator = Creator::latest('id')->first();\n\n        $response->assertRedirect(route('creators.edit', $creator));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_creator()\n    {\n        $creator = Creator::factory()->create();\n\n        $response = $this->get(route('creators.show', $creator));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.creators.show')\n            ->assertViewHas('creator');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_creator()\n    {\n        $creator = Creator::factory()->create();\n\n        $response = $this->get(route('creators.edit', $creator));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.creators.edit')\n            ->assertViewHas('creator');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_creator()\n    {\n        $creator = Creator::factory()->create();\n\n        $data = [\n            'first_names' => $this->faker->text(255),\n            'last_names' => $this->faker->text(255),\n            'is_author' => $this->faker->boolean,\n            'is_editor' => $this->faker->boolean,\n            'is_translator' => $this->faker->boolean,\n            'is_compiler' => $this->faker->boolean,\n        ];\n\n        $response = $this->put(route('creators.update', $creator), $data);\n\n        $data['id'] = $creator->id;\n\n        $this->assertDatabaseHas('creators', $data);\n\n        $response->assertRedirect(route('creators.edit', $creator));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_creator()\n    {\n        $creator = Creator::factory()->create();\n\n        $response = $this->delete(route('creators.destroy', $creator));\n\n        $response->assertRedirect(route('creators.index'));\n\n        $this->assertDeleted($creator);\n    }\n}\n",
            "module": "crud:19",
            "path": "/tests/Feature/Controllers/CreatorControllerTest.php"
          },
          "/app/Http/Requests/EditionStoreRequest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass EditionStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'title' => ['required', 'max:255', 'string'],\n            'subtitle' => ['nullable', 'max:255', 'string'],\n            'title_parent' => ['nullable', 'max:255', 'string'],\n            'volume' => ['nullable', 'max:255', 'string'],\n            'page_range' => ['nullable', 'max:255'],\n            'page_total' => ['nullable', 'max:255'],\n            'publisher_name' => ['nullable', 'max:255', 'string'],\n            'publisher_city' => ['nullable', 'max:255', 'string'],\n            'date' => ['nullable', 'date'],\n            'isbn' => ['nullable', 'max:255', 'string'],\n            'document_id' => ['required', 'exists:documents,id'],\n        ];\n    }\n}\n",
            "module": "crud:23",
            "path": "/app/Http/Requests/EditionStoreRequest.php"
          },
          "/app/Http/Requests/EditionUpdateRequest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass EditionUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'title' => ['required', 'max:255', 'string'],\n            'subtitle' => ['nullable', 'max:255', 'string'],\n            'title_parent' => ['nullable', 'max:255', 'string'],\n            'volume' => ['nullable', 'max:255', 'string'],\n            'page_range' => ['nullable', 'max:255'],\n            'page_total' => ['nullable', 'max:255'],\n            'publisher_name' => ['nullable', 'max:255', 'string'],\n            'publisher_city' => ['nullable', 'max:255', 'string'],\n            'date' => ['nullable', 'date'],\n            'isbn' => ['nullable', 'max:255', 'string'],\n            'document_id' => ['required', 'exists:documents,id'],\n        ];\n    }\n}\n",
            "module": "crud:23",
            "path": "/app/Http/Requests/EditionUpdateRequest.php"
          },
          "/app/Http/Controllers/EditionController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Edition;\nuse App\\Models\\Document;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests\\EditionStoreRequest;\nuse App\\Http\\Requests\\EditionUpdateRequest;\n\nclass EditionController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('view-any', Edition::class);\n\n        $search = $request->get('search', '');\n\n        $editions = Edition::search($search)\n            ->latest()\n            ->paginate(5);\n\n        return view('app.editions.index', compact('editions', 'search'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create(Request $request)\n    {\n        $this->authorize('create', Edition::class);\n\n        $documents = Document::pluck('slug', 'id');\n\n        return view('app.editions.create', compact('documents'));\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\EditionStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(EditionStoreRequest $request)\n    {\n        $this->authorize('create', Edition::class);\n\n        $validated = $request->validated();\n\n        $edition = Edition::create($validated);\n\n        return redirect()\n            ->route('editions.edit', $edition)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Edition $edition\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Edition $edition)\n    {\n        $this->authorize('view', $edition);\n\n        return view('app.editions.show', compact('edition'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Edition $edition\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(Request $request, Edition $edition)\n    {\n        $this->authorize('update', $edition);\n\n        $documents = Document::pluck('slug', 'id');\n\n        return view('app.editions.edit', compact('edition', 'documents'));\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\EditionUpdateRequest $request\n     * @param \\App\\Models\\Edition $edition\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(EditionUpdateRequest $request, Edition $edition)\n    {\n        $this->authorize('update', $edition);\n\n        $validated = $request->validated();\n\n        $edition->update($validated);\n\n        return redirect()\n            ->route('editions.edit', $edition)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Edition $edition\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Edition $edition)\n    {\n        $this->authorize('delete', $edition);\n\n        $edition->delete();\n\n        return redirect()\n            ->route('editions.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n",
            "module": "crud:23",
            "path": "/app/Http/Controllers/EditionController.php"
          },
          "/tests/Feature/Controllers/EditionControllerTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\Edition;\n\nuse App\\Models\\Document;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass EditionControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_editions()\n    {\n        $editions = Edition::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('editions.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.editions.index')\n            ->assertViewHas('editions');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_edition()\n    {\n        $response = $this->get(route('editions.create'));\n\n        $response->assertOk()->assertViewIs('app.editions.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_edition()\n    {\n        $data = Edition::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->post(route('editions.store'), $data);\n\n        $this->assertDatabaseHas('editions', $data);\n\n        $edition = Edition::latest('id')->first();\n\n        $response->assertRedirect(route('editions.edit', $edition));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_edition()\n    {\n        $edition = Edition::factory()->create();\n\n        $response = $this->get(route('editions.show', $edition));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.editions.show')\n            ->assertViewHas('edition');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_edition()\n    {\n        $edition = Edition::factory()->create();\n\n        $response = $this->get(route('editions.edit', $edition));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.editions.edit')\n            ->assertViewHas('edition');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_edition()\n    {\n        $edition = Edition::factory()->create();\n\n        $document = Document::factory()->create();\n\n        $data = [\n            'title' => $this->faker->sentence(10),\n            'subtitle' => $this->faker->text(255),\n            'title_parent' => $this->faker->text(255),\n            'volume' => $this->faker->text(255),\n            'page_range' => $this->faker->word(255),\n            'page_total' => $this->faker->word(255),\n            'publisher_name' => $this->faker->text(255),\n            'publisher_city' => $this->faker->text(255),\n            'date' => $this->faker->date,\n            'isbn' => $this->faker->text(255),\n            'document_id' => $document->id,\n        ];\n\n        $response = $this->put(route('editions.update', $edition), $data);\n\n        $data['id'] = $edition->id;\n\n        $this->assertDatabaseHas('editions', $data);\n\n        $response->assertRedirect(route('editions.edit', $edition));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_edition()\n    {\n        $edition = Edition::factory()->create();\n\n        $response = $this->delete(route('editions.destroy', $edition));\n\n        $response->assertRedirect(route('editions.index'));\n\n        $this->assertDeleted($edition);\n    }\n}\n",
            "module": "crud:23",
            "path": "/tests/Feature/Controllers/EditionControllerTest.php"
          },
          "/app/Http/Requests/ActivityStoreRequest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass ActivityStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'document_id' => ['required', 'exists:documents,id'],\n            'user_id' => ['required', 'exists:users,id'],\n            'activity_type' => [\n                'required',\n                'in:created,proofread,formatted,published,depublished',\n            ],\n            'comment' => ['required', 'max:255', 'string'],\n        ];\n    }\n}\n",
            "module": "crud:24",
            "path": "/app/Http/Requests/ActivityStoreRequest.php"
          },
          "/app/Http/Requests/ActivityUpdateRequest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass ActivityUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'document_id' => ['required', 'exists:documents,id'],\n            'user_id' => ['required', 'exists:users,id'],\n            'activity_type' => [\n                'required',\n                'in:created,proofread,formatted,published,depublished',\n            ],\n            'comment' => ['required', 'max:255', 'string'],\n        ];\n    }\n}\n",
            "module": "crud:24",
            "path": "/app/Http/Requests/ActivityUpdateRequest.php"
          },
          "/app/Http/Controllers/ActivityController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\Activity;\nuse App\\Models\\Document;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests\\ActivityStoreRequest;\nuse App\\Http\\Requests\\ActivityUpdateRequest;\n\nclass ActivityController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('view-any', Activity::class);\n\n        $search = $request->get('search', '');\n\n        $activities = Activity::search($search)\n            ->latest()\n            ->paginate(5);\n\n        return view('app.activities.index', compact('activities', 'search'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create(Request $request)\n    {\n        $this->authorize('create', Activity::class);\n\n        $documents = Document::pluck('slug', 'id');\n        $users = User::pluck('name', 'id');\n\n        return view('app.activities.create', compact('documents', 'users'));\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\ActivityStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(ActivityStoreRequest $request)\n    {\n        $this->authorize('create', Activity::class);\n\n        $validated = $request->validated();\n\n        $activity = Activity::create($validated);\n\n        return redirect()\n            ->route('activities.edit', $activity)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Activity $activity\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Activity $activity)\n    {\n        $this->authorize('view', $activity);\n\n        return view('app.activities.show', compact('activity'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Activity $activity\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(Request $request, Activity $activity)\n    {\n        $this->authorize('update', $activity);\n\n        $documents = Document::pluck('slug', 'id');\n        $users = User::pluck('name', 'id');\n\n        return view(\n            'app.activities.edit',\n            compact('activity', 'documents', 'users')\n        );\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\ActivityUpdateRequest $request\n     * @param \\App\\Models\\Activity $activity\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(ActivityUpdateRequest $request, Activity $activity)\n    {\n        $this->authorize('update', $activity);\n\n        $validated = $request->validated();\n\n        $activity->update($validated);\n\n        return redirect()\n            ->route('activities.edit', $activity)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Activity $activity\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Activity $activity)\n    {\n        $this->authorize('delete', $activity);\n\n        $activity->delete();\n\n        return redirect()\n            ->route('activities.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n",
            "module": "crud:24",
            "path": "/app/Http/Controllers/ActivityController.php"
          },
          "/tests/Feature/Controllers/ActivityControllerTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\Activity;\n\nuse App\\Models\\Document;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass ActivityControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_activities()\n    {\n        $activities = Activity::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('activities.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.activities.index')\n            ->assertViewHas('activities');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_activity()\n    {\n        $response = $this->get(route('activities.create'));\n\n        $response->assertOk()->assertViewIs('app.activities.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_activity()\n    {\n        $data = Activity::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->post(route('activities.store'), $data);\n\n        $this->assertDatabaseHas('activities', $data);\n\n        $activity = Activity::latest('id')->first();\n\n        $response->assertRedirect(route('activities.edit', $activity));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_activity()\n    {\n        $activity = Activity::factory()->create();\n\n        $response = $this->get(route('activities.show', $activity));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.activities.show')\n            ->assertViewHas('activity');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_activity()\n    {\n        $activity = Activity::factory()->create();\n\n        $response = $this->get(route('activities.edit', $activity));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.activities.edit')\n            ->assertViewHas('activity');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_activity()\n    {\n        $activity = Activity::factory()->create();\n\n        $document = Document::factory()->create();\n        $user = User::factory()->create();\n\n        $data = [\n            'activity_type' => 'created',\n            'comment' => $this->faker->text(255),\n            'document_id' => $document->id,\n            'user_id' => $user->id,\n        ];\n\n        $response = $this->put(route('activities.update', $activity), $data);\n\n        $data['id'] = $activity->id;\n\n        $this->assertDatabaseHas('activities', $data);\n\n        $response->assertRedirect(route('activities.edit', $activity));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_activity()\n    {\n        $activity = Activity::factory()->create();\n\n        $response = $this->delete(route('activities.destroy', $activity));\n\n        $response->assertRedirect(route('activities.index'));\n\n        $this->assertDeleted($activity);\n    }\n}\n",
            "module": "crud:24",
            "path": "/tests/Feature/Controllers/ActivityControllerTest.php"
          },
          "/app/Http/Resources/DocumentResource.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass DocumentResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n",
            "module": "entity:39",
            "path": "/app/Http/Resources/DocumentResource.php"
          },
          "/app/Http/Resources/DocumentCollection.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass DocumentCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n",
            "module": "entity:39",
            "path": "/app/Http/Resources/DocumentCollection.php"
          },
          "/app/Http/Controllers/Api/DocumentController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Document;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\DocumentResource;\nuse App\\Http\\Resources\\DocumentCollection;\nuse App\\Http\\Requests\\DocumentStoreRequest;\nuse App\\Http\\Requests\\DocumentUpdateRequest;\n\nclass DocumentController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('view-any', Document::class);\n\n        $search = $request->get('search', '');\n\n        $documents = Document::search($search)\n            ->latest()\n            ->paginate();\n\n        return new DocumentCollection($documents);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\DocumentStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(DocumentStoreRequest $request)\n    {\n        $this->authorize('create', Document::class);\n\n        $validated = $request->validated();\n\n        $document = Document::create($validated);\n\n        return new DocumentResource($document);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Document $document)\n    {\n        $this->authorize('view', $document);\n\n        return new DocumentResource($document);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\DocumentUpdateRequest $request\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(DocumentUpdateRequest $request, Document $document)\n    {\n        $this->authorize('update', $document);\n\n        $validated = $request->validated();\n\n        $document->update($validated);\n\n        return new DocumentResource($document);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Document $document)\n    {\n        $this->authorize('delete', $document);\n\n        $document->delete();\n\n        return response()->noContent();\n    }\n}\n",
            "module": "crud:22",
            "path": "/app/Http/Controllers/Api/DocumentController.php"
          },
          "/tests/Feature/Api/DocumentTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Document;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass DocumentTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_documents_list()\n    {\n        $documents = Document::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.documents.index'));\n\n        $response->assertOk()->assertSee($documents[0]->slug);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_document()\n    {\n        $data = Document::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->postJson(route('api.documents.store'), $data);\n\n        $this->assertDatabaseHas('documents', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_document()\n    {\n        $document = Document::factory()->create();\n\n        $data = [\n            'is_pdf' => $this->faker->boolean,\n            'is_audio' => $this->faker->boolean,\n            'is_image' => $this->faker->boolean,\n            'is_video' => $this->faker->boolean,\n            'is_html' => $this->faker->boolean,\n            'file_url' => $this->faker->text(255),\n            'blurb' => $this->faker->text,\n            'content_html' => $this->faker->text,\n            'content_size' => $this->faker->word,\n            'edit_quality' => 'high',\n            'formatting_quality' => 'high',\n            'publication_permission' => 'author',\n            'notes' => $this->faker->text,\n            'input_type' => 'scanned',\n            'publication_approval' => 'approved',\n            'views' => 0,\n        ];\n\n        $response = $this->putJson(\n            route('api.documents.update', $document),\n            $data\n        );\n\n        $data['id'] = $document->id;\n\n        $this->assertDatabaseHas('documents', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_document()\n    {\n        $document = Document::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.documents.destroy', $document)\n        );\n\n        $this->assertSoftDeleted($document);\n\n        $response->assertNoContent();\n    }\n}\n",
            "module": "crud:22",
            "path": "/tests/Feature/Api/DocumentTest.php"
          },
          "/app/Http/Resources/EditionResource.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass EditionResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n",
            "module": "entity:40",
            "path": "/app/Http/Resources/EditionResource.php"
          },
          "/app/Http/Resources/EditionCollection.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass EditionCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n",
            "module": "entity:40",
            "path": "/app/Http/Resources/EditionCollection.php"
          },
          "/app/Http/Controllers/Api/DocumentEditionsController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Document;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\EditionResource;\nuse App\\Http\\Resources\\EditionCollection;\n\nclass DocumentEditionsController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request, Document $document)\n    {\n        $this->authorize('view', $document);\n\n        $search = $request->get('search', '');\n\n        $editions = $document\n            ->editions()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new EditionCollection($editions);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request, Document $document)\n    {\n        $this->authorize('create', Edition::class);\n\n        $validated = $request->validate([\n            'title' => ['required', 'max:255', 'string'],\n            'subtitle' => ['nullable', 'max:255', 'string'],\n            'title_parent' => ['nullable', 'max:255', 'string'],\n            'volume' => ['nullable', 'max:255', 'string'],\n            'page_range' => ['nullable', 'max:255'],\n            'page_total' => ['nullable', 'max:255'],\n            'publisher_name' => ['nullable', 'max:255', 'string'],\n            'publisher_city' => ['nullable', 'max:255', 'string'],\n            'date' => ['nullable', 'date'],\n            'isbn' => ['nullable', 'max:255', 'string'],\n        ]);\n\n        $edition = $document->editions()->create($validated);\n\n        return new EditionResource($edition);\n    }\n}\n",
            "module": "crud:22",
            "path": "/app/Http/Controllers/Api/DocumentEditionsController.php"
          },
          "/tests/Feature/Api/DocumentEditionsTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Edition;\nuse App\\Models\\Document;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass DocumentEditionsTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_document_editions()\n    {\n        $document = Document::factory()->create();\n        $editions = Edition::factory()\n            ->count(2)\n            ->create([\n                'document_id' => $document->id,\n            ]);\n\n        $response = $this->getJson(\n            route('api.documents.editions.index', $document)\n        );\n\n        $response->assertOk()->assertSee($editions[0]->title);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_document_editions()\n    {\n        $document = Document::factory()->create();\n        $data = Edition::factory()\n            ->make([\n                'document_id' => $document->id,\n            ])\n            ->toArray();\n\n        $response = $this->postJson(\n            route('api.documents.editions.store', $document),\n            $data\n        );\n\n        $this->assertDatabaseHas('editions', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n\n        $edition = Edition::latest('id')->first();\n\n        $this->assertEquals($document->id, $edition->document_id);\n    }\n}\n",
            "module": "crud:22",
            "path": "/tests/Feature/Api/DocumentEditionsTest.php"
          },
          "/app/Http/Resources/ActivityResource.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass ActivityResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n",
            "module": "entity:43",
            "path": "/app/Http/Resources/ActivityResource.php"
          },
          "/app/Http/Resources/ActivityCollection.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass ActivityCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n",
            "module": "entity:43",
            "path": "/app/Http/Resources/ActivityCollection.php"
          },
          "/app/Http/Controllers/Api/DocumentActivitiesController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Document;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\ActivityResource;\nuse App\\Http\\Resources\\ActivityCollection;\n\nclass DocumentActivitiesController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request, Document $document)\n    {\n        $this->authorize('view', $document);\n\n        $search = $request->get('search', '');\n\n        $activities = $document\n            ->activities()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new ActivityCollection($activities);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request, Document $document)\n    {\n        $this->authorize('create', Activity::class);\n\n        $validated = $request->validate([\n            'user_id' => ['required', 'exists:users,id'],\n            'activity_type' => [\n                'required',\n                'in:created,proofread,formatted,published,depublished',\n            ],\n            'comment' => ['required', 'max:255', 'string'],\n        ]);\n\n        $activity = $document->activities()->create($validated);\n\n        return new ActivityResource($activity);\n    }\n}\n",
            "module": "crud:22",
            "path": "/app/Http/Controllers/Api/DocumentActivitiesController.php"
          },
          "/tests/Feature/Api/DocumentActivitiesTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Document;\nuse App\\Models\\Activity;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass DocumentActivitiesTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_document_activities()\n    {\n        $document = Document::factory()->create();\n        $activities = Activity::factory()\n            ->count(2)\n            ->create([\n                'document_id' => $document->id,\n            ]);\n\n        $response = $this->getJson(\n            route('api.documents.activities.index', $document)\n        );\n\n        $response->assertOk()->assertSee($activities[0]->comment);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_document_activities()\n    {\n        $document = Document::factory()->create();\n        $data = Activity::factory()\n            ->make([\n                'document_id' => $document->id,\n            ])\n            ->toArray();\n\n        $response = $this->postJson(\n            route('api.documents.activities.store', $document),\n            $data\n        );\n\n        $this->assertDatabaseHas('activities', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n\n        $activity = Activity::latest('id')->first();\n\n        $this->assertEquals($document->id, $activity->document_id);\n    }\n}\n",
            "module": "crud:22",
            "path": "/tests/Feature/Api/DocumentActivitiesTest.php"
          },
          "/app/Http/Resources/CollectionResource.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass CollectionResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n",
            "module": "entity:29",
            "path": "/app/Http/Resources/CollectionResource.php"
          },
          "/app/Http/Resources/CollectionCollection.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass CollectionCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n",
            "module": "entity:29",
            "path": "/app/Http/Resources/CollectionCollection.php"
          },
          "/app/Http/Controllers/Api/DocumentCollectionsController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Document;\nuse App\\Models\\Collection;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\CollectionCollection;\n\nclass DocumentCollectionsController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request, Document $document)\n    {\n        $this->authorize('view', $document);\n\n        $search = $request->get('search', '');\n\n        $collections = $document\n            ->collections()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new CollectionCollection($collections);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @param \\App\\Models\\Collection $collection\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(\n        Request $request,\n        Document $document,\n        Collection $collection\n    ) {\n        $this->authorize('update', $document);\n\n        $document->collections()->syncWithoutDetaching([$collection->id]);\n\n        return response()->noContent();\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @param \\App\\Models\\Collection $collection\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(\n        Request $request,\n        Document $document,\n        Collection $collection\n    ) {\n        $this->authorize('update', $document);\n\n        $document->collections()->detach($collection);\n\n        return response()->noContent();\n    }\n}\n",
            "module": "crud:22",
            "path": "/app/Http/Controllers/Api/DocumentCollectionsController.php"
          },
          "/tests/Feature/Api/DocumentCollectionsTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Document;\nuse App\\Models\\Collection;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass DocumentCollectionsTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_document_collections()\n    {\n        $document = Document::factory()->create();\n        $collection = Collection::factory()->create();\n\n        $document->collections()->attach($collection);\n\n        $response = $this->getJson(\n            route('api.documents.collections.index', $document)\n        );\n\n        $response->assertOk()->assertSee($collection->name);\n    }\n\n    /**\n     * @test\n     */\n    public function it_can_attach_collections_to_document()\n    {\n        $document = Document::factory()->create();\n        $collection = Collection::factory()->create();\n\n        $response = $this->postJson(\n            route('api.documents.collections.store', [$document, $collection])\n        );\n\n        $response->assertNoContent();\n\n        $this->assertTrue(\n            $document\n                ->collections()\n                ->where('collections.id', $collection->id)\n                ->exists()\n        );\n    }\n\n    /**\n     * @test\n     */\n    public function it_can_detach_collections_from_document()\n    {\n        $document = Document::factory()->create();\n        $collection = Collection::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.documents.collections.store', [$document, $collection])\n        );\n\n        $response->assertNoContent();\n\n        $this->assertFalse(\n            $document\n                ->collections()\n                ->where('collections.id', $collection->id)\n                ->exists()\n        );\n    }\n}\n",
            "module": "crud:22",
            "path": "/tests/Feature/Api/DocumentCollectionsTest.php"
          },
          "/app/Http/Resources/LanguageResource.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass LanguageResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n",
            "module": "entity:28",
            "path": "/app/Http/Resources/LanguageResource.php"
          },
          "/app/Http/Resources/LanguageCollection.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass LanguageCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n",
            "module": "entity:28",
            "path": "/app/Http/Resources/LanguageCollection.php"
          },
          "/app/Http/Controllers/Api/DocumentLanguagesController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Document;\nuse App\\Models\\Language;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\LanguageCollection;\n\nclass DocumentLanguagesController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request, Document $document)\n    {\n        $this->authorize('view', $document);\n\n        $search = $request->get('search', '');\n\n        $languages = $document\n            ->languages()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new LanguageCollection($languages);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @param \\App\\Models\\Language $language\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(\n        Request $request,\n        Document $document,\n        Language $language\n    ) {\n        $this->authorize('update', $document);\n\n        $document->languages()->syncWithoutDetaching([$language->id]);\n\n        return response()->noContent();\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @param \\App\\Models\\Language $language\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(\n        Request $request,\n        Document $document,\n        Language $language\n    ) {\n        $this->authorize('update', $document);\n\n        $document->languages()->detach($language);\n\n        return response()->noContent();\n    }\n}\n",
            "module": "crud:22",
            "path": "/app/Http/Controllers/Api/DocumentLanguagesController.php"
          },
          "/tests/Feature/Api/DocumentLanguagesTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Document;\nuse App\\Models\\Language;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass DocumentLanguagesTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_document_languages()\n    {\n        $document = Document::factory()->create();\n        $language = Language::factory()->create();\n\n        $document->languages()->attach($language);\n\n        $response = $this->getJson(\n            route('api.documents.languages.index', $document)\n        );\n\n        $response->assertOk()->assertSee($language->language);\n    }\n\n    /**\n     * @test\n     */\n    public function it_can_attach_languages_to_document()\n    {\n        $document = Document::factory()->create();\n        $language = Language::factory()->create();\n\n        $response = $this->postJson(\n            route('api.documents.languages.store', [$document, $language])\n        );\n\n        $response->assertNoContent();\n\n        $this->assertTrue(\n            $document\n                ->languages()\n                ->where('languages.id', $language->id)\n                ->exists()\n        );\n    }\n\n    /**\n     * @test\n     */\n    public function it_can_detach_languages_from_document()\n    {\n        $document = Document::factory()->create();\n        $language = Language::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.documents.languages.store', [$document, $language])\n        );\n\n        $response->assertNoContent();\n\n        $this->assertFalse(\n            $document\n                ->languages()\n                ->where('languages.id', $language->id)\n                ->exists()\n        );\n    }\n}\n",
            "module": "crud:22",
            "path": "/tests/Feature/Api/DocumentLanguagesTest.php"
          },
          "/app/Http/Resources/TagResource.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass TagResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n",
            "module": "entity:27",
            "path": "/app/Http/Resources/TagResource.php"
          },
          "/app/Http/Resources/TagCollection.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass TagCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n",
            "module": "entity:27",
            "path": "/app/Http/Resources/TagCollection.php"
          },
          "/app/Http/Controllers/Api/DocumentTagsController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Tag;\nuse App\\Models\\Document;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\TagCollection;\n\nclass DocumentTagsController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request, Document $document)\n    {\n        $this->authorize('view', $document);\n\n        $search = $request->get('search', '');\n\n        $tags = $document\n            ->tags()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new TagCollection($tags);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @param \\App\\Models\\Tag $tag\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request, Document $document, Tag $tag)\n    {\n        $this->authorize('update', $document);\n\n        $document->tags()->syncWithoutDetaching([$tag->id]);\n\n        return response()->noContent();\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @param \\App\\Models\\Tag $tag\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Document $document, Tag $tag)\n    {\n        $this->authorize('update', $document);\n\n        $document->tags()->detach($tag);\n\n        return response()->noContent();\n    }\n}\n",
            "module": "crud:22",
            "path": "/app/Http/Controllers/Api/DocumentTagsController.php"
          },
          "/tests/Feature/Api/DocumentTagsTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\Tag;\nuse App\\Models\\User;\nuse App\\Models\\Document;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass DocumentTagsTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_document_tags()\n    {\n        $document = Document::factory()->create();\n        $tag = Tag::factory()->create();\n\n        $document->tags()->attach($tag);\n\n        $response = $this->getJson(\n            route('api.documents.tags.index', $document)\n        );\n\n        $response->assertOk()->assertSee($tag->label);\n    }\n\n    /**\n     * @test\n     */\n    public function it_can_attach_tags_to_document()\n    {\n        $document = Document::factory()->create();\n        $tag = Tag::factory()->create();\n\n        $response = $this->postJson(\n            route('api.documents.tags.store', [$document, $tag])\n        );\n\n        $response->assertNoContent();\n\n        $this->assertTrue(\n            $document\n                ->tags()\n                ->where('tags.id', $tag->id)\n                ->exists()\n        );\n    }\n\n    /**\n     * @test\n     */\n    public function it_can_detach_tags_from_document()\n    {\n        $document = Document::factory()->create();\n        $tag = Tag::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.documents.tags.store', [$document, $tag])\n        );\n\n        $response->assertNoContent();\n\n        $this->assertFalse(\n            $document\n                ->tags()\n                ->where('tags.id', $tag->id)\n                ->exists()\n        );\n    }\n}\n",
            "module": "crud:22",
            "path": "/tests/Feature/Api/DocumentTagsTest.php"
          },
          "/app/Http/Resources/CreatorResource.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass CreatorResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n",
            "module": "entity:30",
            "path": "/app/Http/Resources/CreatorResource.php"
          },
          "/app/Http/Resources/CreatorCollection.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass CreatorCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n",
            "module": "entity:30",
            "path": "/app/Http/Resources/CreatorCollection.php"
          },
          "/app/Http/Controllers/Api/DocumentCreatorsController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Creator;\nuse App\\Models\\Document;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\CreatorCollection;\n\nclass DocumentCreatorsController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request, Document $document)\n    {\n        $this->authorize('view', $document);\n\n        $search = $request->get('search', '');\n\n        $creators = $document\n            ->creators()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new CreatorCollection($creators);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @param \\App\\Models\\Creator $creator\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(\n        Request $request,\n        Document $document,\n        Creator $creator\n    ) {\n        $this->authorize('update', $document);\n\n        $document->creators()->syncWithoutDetaching([$creator->id]);\n\n        return response()->noContent();\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @param \\App\\Models\\Creator $creator\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(\n        Request $request,\n        Document $document,\n        Creator $creator\n    ) {\n        $this->authorize('update', $document);\n\n        $document->creators()->detach($creator);\n\n        return response()->noContent();\n    }\n}\n",
            "module": "crud:22",
            "path": "/app/Http/Controllers/Api/DocumentCreatorsController.php"
          },
          "/tests/Feature/Api/DocumentCreatorsTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Creator;\nuse App\\Models\\Document;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass DocumentCreatorsTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_document_creators()\n    {\n        $document = Document::factory()->create();\n        $creator = Creator::factory()->create();\n\n        $document->creators()->attach($creator);\n\n        $response = $this->getJson(\n            route('api.documents.creators.index', $document)\n        );\n\n        $response->assertOk()->assertSee($creator->first_names);\n    }\n\n    /**\n     * @test\n     */\n    public function it_can_attach_creators_to_document()\n    {\n        $document = Document::factory()->create();\n        $creator = Creator::factory()->create();\n\n        $response = $this->postJson(\n            route('api.documents.creators.store', [$document, $creator])\n        );\n\n        $response->assertNoContent();\n\n        $this->assertTrue(\n            $document\n                ->creators()\n                ->where('creators.id', $creator->id)\n                ->exists()\n        );\n    }\n\n    /**\n     * @test\n     */\n    public function it_can_detach_creators_from_document()\n    {\n        $document = Document::factory()->create();\n        $creator = Creator::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.documents.creators.store', [$document, $creator])\n        );\n\n        $response->assertNoContent();\n\n        $this->assertFalse(\n            $document\n                ->creators()\n                ->where('creators.id', $creator->id)\n                ->exists()\n        );\n    }\n}\n",
            "module": "crud:22",
            "path": "/tests/Feature/Api/DocumentCreatorsTest.php"
          },
          "/app/Http/Controllers/Api/CollectionController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Collection;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\CollectionResource;\nuse App\\Http\\Resources\\CollectionCollection;\nuse App\\Http\\Requests\\CollectionStoreRequest;\nuse App\\Http\\Requests\\CollectionUpdateRequest;\n\nclass CollectionController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('view-any', Collection::class);\n\n        $search = $request->get('search', '');\n\n        $collections = Collection::search($search)\n            ->latest()\n            ->paginate();\n\n        return new CollectionCollection($collections);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\CollectionStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(CollectionStoreRequest $request)\n    {\n        $this->authorize('create', Collection::class);\n\n        $validated = $request->validated();\n\n        $collection = Collection::create($validated);\n\n        return new CollectionResource($collection);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Collection $collection\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Collection $collection)\n    {\n        $this->authorize('view', $collection);\n\n        return new CollectionResource($collection);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\CollectionUpdateRequest $request\n     * @param \\App\\Models\\Collection $collection\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(\n        CollectionUpdateRequest $request,\n        Collection $collection\n    ) {\n        $this->authorize('update', $collection);\n\n        $validated = $request->validated();\n\n        $collection->update($validated);\n\n        return new CollectionResource($collection);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Collection $collection\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Collection $collection)\n    {\n        $this->authorize('delete', $collection);\n\n        $collection->delete();\n\n        return response()->noContent();\n    }\n}\n",
            "module": "crud:18",
            "path": "/app/Http/Controllers/Api/CollectionController.php"
          },
          "/tests/Feature/Api/CollectionTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Collection;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass CollectionTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_collections_list()\n    {\n        $collections = Collection::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.collections.index'));\n\n        $response->assertOk()->assertSee($collections[0]->name);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_collection()\n    {\n        $data = Collection::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->postJson(route('api.collections.store'), $data);\n\n        $this->assertDatabaseHas('collections', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_collection()\n    {\n        $collection = Collection::factory()->create();\n\n        $data = [\n            'slug' => $this->faker->text(255),\n            'name' => $this->faker->text,\n            'shortname' => $this->faker->text(255),\n        ];\n\n        $response = $this->putJson(\n            route('api.collections.update', $collection),\n            $data\n        );\n\n        $data['id'] = $collection->id;\n\n        $this->assertDatabaseHas('collections', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_collection()\n    {\n        $collection = Collection::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.collections.destroy', $collection)\n        );\n\n        $this->assertDeleted($collection);\n\n        $response->assertNoContent();\n    }\n}\n",
            "module": "crud:18",
            "path": "/tests/Feature/Api/CollectionTest.php"
          },
          "/app/Http/Controllers/Api/CollectionDocumentsController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Document;\nuse App\\Models\\Collection;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\DocumentCollection;\n\nclass CollectionDocumentsController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Collection $collection\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request, Collection $collection)\n    {\n        $this->authorize('view', $collection);\n\n        $search = $request->get('search', '');\n\n        $documents = $collection\n            ->documents()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new DocumentCollection($documents);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Collection $collection\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(\n        Request $request,\n        Collection $collection,\n        Document $document\n    ) {\n        $this->authorize('update', $collection);\n\n        $collection->documents()->syncWithoutDetaching([$document->id]);\n\n        return response()->noContent();\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Collection $collection\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(\n        Request $request,\n        Collection $collection,\n        Document $document\n    ) {\n        $this->authorize('update', $collection);\n\n        $collection->documents()->detach($document);\n\n        return response()->noContent();\n    }\n}\n",
            "module": "crud:18",
            "path": "/app/Http/Controllers/Api/CollectionDocumentsController.php"
          },
          "/tests/Feature/Api/CollectionDocumentsTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Document;\nuse App\\Models\\Collection;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass CollectionDocumentsTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_collection_documents()\n    {\n        $collection = Collection::factory()->create();\n        $document = Document::factory()->create();\n\n        $collection->documents()->attach($document);\n\n        $response = $this->getJson(\n            route('api.collections.documents.index', $collection)\n        );\n\n        $response->assertOk()->assertSee($document->slug);\n    }\n\n    /**\n     * @test\n     */\n    public function it_can_attach_documents_to_collection()\n    {\n        $collection = Collection::factory()->create();\n        $document = Document::factory()->create();\n\n        $response = $this->postJson(\n            route('api.collections.documents.store', [$collection, $document])\n        );\n\n        $response->assertNoContent();\n\n        $this->assertTrue(\n            $collection\n                ->documents()\n                ->where('documents.id', $document->id)\n                ->exists()\n        );\n    }\n\n    /**\n     * @test\n     */\n    public function it_can_detach_documents_from_collection()\n    {\n        $collection = Collection::factory()->create();\n        $document = Document::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.collections.documents.store', [$collection, $document])\n        );\n\n        $response->assertNoContent();\n\n        $this->assertFalse(\n            $collection\n                ->documents()\n                ->where('documents.id', $document->id)\n                ->exists()\n        );\n    }\n}\n",
            "module": "crud:18",
            "path": "/tests/Feature/Api/CollectionDocumentsTest.php"
          },
          "/app/Http/Controllers/Api/TagController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Tag;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Resources\\TagResource;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\TagCollection;\nuse App\\Http\\Requests\\TagStoreRequest;\nuse App\\Http\\Requests\\TagUpdateRequest;\n\nclass TagController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('view-any', Tag::class);\n\n        $search = $request->get('search', '');\n\n        $tags = Tag::search($search)\n            ->latest()\n            ->paginate();\n\n        return new TagCollection($tags);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\TagStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(TagStoreRequest $request)\n    {\n        $this->authorize('create', Tag::class);\n\n        $validated = $request->validated();\n\n        $tag = Tag::create($validated);\n\n        return new TagResource($tag);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Tag $tag\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Tag $tag)\n    {\n        $this->authorize('view', $tag);\n\n        return new TagResource($tag);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\TagUpdateRequest $request\n     * @param \\App\\Models\\Tag $tag\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(TagUpdateRequest $request, Tag $tag)\n    {\n        $this->authorize('update', $tag);\n\n        $validated = $request->validated();\n\n        $tag->update($validated);\n\n        return new TagResource($tag);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Tag $tag\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Tag $tag)\n    {\n        $this->authorize('delete', $tag);\n\n        $tag->delete();\n\n        return response()->noContent();\n    }\n}\n",
            "module": "crud:16",
            "path": "/app/Http/Controllers/Api/TagController.php"
          },
          "/tests/Feature/Api/TagTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\Tag;\nuse App\\Models\\User;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass TagTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_tags_list()\n    {\n        $tags = Tag::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.tags.index'));\n\n        $response->assertOk()->assertSee($tags[0]->label);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_tag()\n    {\n        $data = Tag::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->postJson(route('api.tags.store'), $data);\n\n        $this->assertDatabaseHas('tags', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_tag()\n    {\n        $tag = Tag::factory()->create();\n\n        $data = [\n            'label' => $this->faker->text(255),\n        ];\n\n        $response = $this->putJson(route('api.tags.update', $tag), $data);\n\n        $data['id'] = $tag->id;\n\n        $this->assertDatabaseHas('tags', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_tag()\n    {\n        $tag = Tag::factory()->create();\n\n        $response = $this->deleteJson(route('api.tags.destroy', $tag));\n\n        $this->assertDeleted($tag);\n\n        $response->assertNoContent();\n    }\n}\n",
            "module": "crud:16",
            "path": "/tests/Feature/Api/TagTest.php"
          },
          "/app/Http/Controllers/Api/TagDocumentsController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Tag;\nuse App\\Models\\Document;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\DocumentCollection;\n\nclass TagDocumentsController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Tag $tag\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request, Tag $tag)\n    {\n        $this->authorize('view', $tag);\n\n        $search = $request->get('search', '');\n\n        $documents = $tag\n            ->documents()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new DocumentCollection($documents);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Tag $tag\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request, Tag $tag, Document $document)\n    {\n        $this->authorize('update', $tag);\n\n        $tag->documents()->syncWithoutDetaching([$document->id]);\n\n        return response()->noContent();\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Tag $tag\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Tag $tag, Document $document)\n    {\n        $this->authorize('update', $tag);\n\n        $tag->documents()->detach($document);\n\n        return response()->noContent();\n    }\n}\n",
            "module": "crud:16",
            "path": "/app/Http/Controllers/Api/TagDocumentsController.php"
          },
          "/tests/Feature/Api/TagDocumentsTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\Tag;\nuse App\\Models\\User;\nuse App\\Models\\Document;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass TagDocumentsTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_tag_documents()\n    {\n        $tag = Tag::factory()->create();\n        $document = Document::factory()->create();\n\n        $tag->documents()->attach($document);\n\n        $response = $this->getJson(route('api.tags.documents.index', $tag));\n\n        $response->assertOk()->assertSee($document->slug);\n    }\n\n    /**\n     * @test\n     */\n    public function it_can_attach_documents_to_tag()\n    {\n        $tag = Tag::factory()->create();\n        $document = Document::factory()->create();\n\n        $response = $this->postJson(\n            route('api.tags.documents.store', [$tag, $document])\n        );\n\n        $response->assertNoContent();\n\n        $this->assertTrue(\n            $tag\n                ->documents()\n                ->where('documents.id', $document->id)\n                ->exists()\n        );\n    }\n\n    /**\n     * @test\n     */\n    public function it_can_detach_documents_from_tag()\n    {\n        $tag = Tag::factory()->create();\n        $document = Document::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.tags.documents.store', [$tag, $document])\n        );\n\n        $response->assertNoContent();\n\n        $this->assertFalse(\n            $tag\n                ->documents()\n                ->where('documents.id', $document->id)\n                ->exists()\n        );\n    }\n}\n",
            "module": "crud:16",
            "path": "/tests/Feature/Api/TagDocumentsTest.php"
          },
          "/app/Http/Resources/UserResource.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass UserResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n",
            "module": "entity:31",
            "path": "/app/Http/Resources/UserResource.php"
          },
          "/app/Http/Resources/UserCollection.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n",
            "module": "entity:31",
            "path": "/app/Http/Resources/UserCollection.php"
          },
          "/app/Http/Controllers/Api/UserController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Resources\\UserResource;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Http\\Resources\\UserCollection;\nuse App\\Http\\Requests\\UserStoreRequest;\nuse App\\Http\\Requests\\UserUpdateRequest;\n\nclass UserController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('view-any', User::class);\n\n        $search = $request->get('search', '');\n\n        $users = User::search($search)\n            ->latest()\n            ->paginate();\n\n        return new UserCollection($users);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\UserStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(UserStoreRequest $request)\n    {\n        $this->authorize('create', User::class);\n\n        $validated = $request->validated();\n\n        $validated['password'] = Hash::make($validated['password']);\n\n        $user = User::create($validated);\n\n        return new UserResource($user);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\User $user\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, User $user)\n    {\n        $this->authorize('view', $user);\n\n        return new UserResource($user);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\UserUpdateRequest $request\n     * @param \\App\\Models\\User $user\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(UserUpdateRequest $request, User $user)\n    {\n        $this->authorize('update', $user);\n\n        $validated = $request->validated();\n\n        if (empty($validated['password'])) {\n            unset($validated['password']);\n        } else {\n            $validated['password'] = Hash::make($validated['password']);\n        }\n\n        $user->update($validated);\n\n        return new UserResource($user);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\User $user\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, User $user)\n    {\n        $this->authorize('delete', $user);\n\n        $user->delete();\n\n        return response()->noContent();\n    }\n}\n",
            "module": "crud:20",
            "path": "/app/Http/Controllers/Api/UserController.php"
          },
          "/tests/Feature/Api/UserTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass UserTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_users_list()\n    {\n        $users = User::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.users.index'));\n\n        $response->assertOk()->assertSee($users[0]->name);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_user()\n    {\n        $data = User::factory()\n            ->make()\n            ->toArray();\n        $data['password'] = \\Str::random('8');\n\n        $response = $this->postJson(route('api.users.store'), $data);\n\n        unset($data['password']);\n        unset($data['email_verified_at']);\n        unset($data['profile_photo_path']);\n\n        $this->assertDatabaseHas('users', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_user()\n    {\n        $user = User::factory()->create();\n\n        $data = [\n            'name' => $this->faker->name,\n            'email' => $this->faker->email,\n            'status' => 'contributor',\n        ];\n\n        $data['password'] = \\Str::random('8');\n\n        $response = $this->putJson(route('api.users.update', $user), $data);\n\n        unset($data['password']);\n        unset($data['email_verified_at']);\n        unset($data['profile_photo_path']);\n\n        $data['id'] = $user->id;\n\n        $this->assertDatabaseHas('users', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_user()\n    {\n        $user = User::factory()->create();\n\n        $response = $this->deleteJson(route('api.users.destroy', $user));\n\n        $this->assertDeleted($user);\n\n        $response->assertNoContent();\n    }\n}\n",
            "module": "crud:20",
            "path": "/tests/Feature/Api/UserTest.php"
          },
          "/app/Http/Controllers/Api/UserActivitiesController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\ActivityResource;\nuse App\\Http\\Resources\\ActivityCollection;\n\nclass UserActivitiesController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\User $user\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request, User $user)\n    {\n        $this->authorize('view', $user);\n\n        $search = $request->get('search', '');\n\n        $activities = $user\n            ->activities()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new ActivityCollection($activities);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\User $user\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request, User $user)\n    {\n        $this->authorize('create', Activity::class);\n\n        $validated = $request->validate([\n            'document_id' => ['required', 'exists:documents,id'],\n            'activity_type' => [\n                'required',\n                'in:created,proofread,formatted,published,depublished',\n            ],\n            'comment' => ['required', 'max:255', 'string'],\n        ]);\n\n        $activity = $user->activities()->create($validated);\n\n        return new ActivityResource($activity);\n    }\n}\n",
            "module": "crud:20",
            "path": "/app/Http/Controllers/Api/UserActivitiesController.php"
          },
          "/tests/Feature/Api/UserActivitiesTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Activity;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass UserActivitiesTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_user_activities()\n    {\n        $user = User::factory()->create();\n        $activities = Activity::factory()\n            ->count(2)\n            ->create([\n                'user_id' => $user->id,\n            ]);\n\n        $response = $this->getJson(route('api.users.activities.index', $user));\n\n        $response->assertOk()->assertSee($activities[0]->comment);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_user_activities()\n    {\n        $user = User::factory()->create();\n        $data = Activity::factory()\n            ->make([\n                'user_id' => $user->id,\n            ])\n            ->toArray();\n\n        $response = $this->postJson(\n            route('api.users.activities.store', $user),\n            $data\n        );\n\n        $this->assertDatabaseHas('activities', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n\n        $activity = Activity::latest('id')->first();\n\n        $this->assertEquals($user->id, $activity->user_id);\n    }\n}\n",
            "module": "crud:20",
            "path": "/tests/Feature/Api/UserActivitiesTest.php"
          },
          "/app/Http/Controllers/Api/LanguageController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Language;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\LanguageResource;\nuse App\\Http\\Resources\\LanguageCollection;\nuse App\\Http\\Requests\\LanguageStoreRequest;\nuse App\\Http\\Requests\\LanguageUpdateRequest;\n\nclass LanguageController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('view-any', Language::class);\n\n        $search = $request->get('search', '');\n\n        $languages = Language::search($search)\n            ->latest()\n            ->paginate();\n\n        return new LanguageCollection($languages);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\LanguageStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(LanguageStoreRequest $request)\n    {\n        $this->authorize('create', Language::class);\n\n        $validated = $request->validated();\n\n        $language = Language::create($validated);\n\n        return new LanguageResource($language);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Language $language\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Language $language)\n    {\n        $this->authorize('view', $language);\n\n        return new LanguageResource($language);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\LanguageUpdateRequest $request\n     * @param \\App\\Models\\Language $language\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(LanguageUpdateRequest $request, Language $language)\n    {\n        $this->authorize('update', $language);\n\n        $validated = $request->validated();\n\n        $language->update($validated);\n\n        return new LanguageResource($language);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Language $language\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Language $language)\n    {\n        $this->authorize('delete', $language);\n\n        $language->delete();\n\n        return response()->noContent();\n    }\n}\n",
            "module": "crud:17",
            "path": "/app/Http/Controllers/Api/LanguageController.php"
          },
          "/tests/Feature/Api/LanguageTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Language;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass LanguageTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_languages_list()\n    {\n        $languages = Language::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.languages.index'));\n\n        $response->assertOk()->assertSee($languages[0]->language);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_language()\n    {\n        $data = Language::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->postJson(route('api.languages.store'), $data);\n\n        $this->assertDatabaseHas('languages', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_language()\n    {\n        $language = Language::factory()->create();\n\n        $data = [\n            'language' => $this->faker->text(255),\n            'language_tag' => $this->faker->word(255),\n        ];\n\n        $response = $this->putJson(\n            route('api.languages.update', $language),\n            $data\n        );\n\n        $data['id'] = $language->id;\n\n        $this->assertDatabaseHas('languages', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_language()\n    {\n        $language = Language::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.languages.destroy', $language)\n        );\n\n        $this->assertDeleted($language);\n\n        $response->assertNoContent();\n    }\n}\n",
            "module": "crud:17",
            "path": "/tests/Feature/Api/LanguageTest.php"
          },
          "/app/Http/Controllers/Api/LanguageDocumentsController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Language;\nuse App\\Models\\Document;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\DocumentCollection;\n\nclass LanguageDocumentsController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Language $language\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request, Language $language)\n    {\n        $this->authorize('view', $language);\n\n        $search = $request->get('search', '');\n\n        $documents = $language\n            ->documents()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new DocumentCollection($documents);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Language $language\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(\n        Request $request,\n        Language $language,\n        Document $document\n    ) {\n        $this->authorize('update', $language);\n\n        $language->documents()->syncWithoutDetaching([$document->id]);\n\n        return response()->noContent();\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Language $language\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(\n        Request $request,\n        Language $language,\n        Document $document\n    ) {\n        $this->authorize('update', $language);\n\n        $language->documents()->detach($document);\n\n        return response()->noContent();\n    }\n}\n",
            "module": "crud:17",
            "path": "/app/Http/Controllers/Api/LanguageDocumentsController.php"
          },
          "/tests/Feature/Api/LanguageDocumentsTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Language;\nuse App\\Models\\Document;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass LanguageDocumentsTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_language_documents()\n    {\n        $language = Language::factory()->create();\n        $document = Document::factory()->create();\n\n        $language->documents()->attach($document);\n\n        $response = $this->getJson(\n            route('api.languages.documents.index', $language)\n        );\n\n        $response->assertOk()->assertSee($document->slug);\n    }\n\n    /**\n     * @test\n     */\n    public function it_can_attach_documents_to_language()\n    {\n        $language = Language::factory()->create();\n        $document = Document::factory()->create();\n\n        $response = $this->postJson(\n            route('api.languages.documents.store', [$language, $document])\n        );\n\n        $response->assertNoContent();\n\n        $this->assertTrue(\n            $language\n                ->documents()\n                ->where('documents.id', $document->id)\n                ->exists()\n        );\n    }\n\n    /**\n     * @test\n     */\n    public function it_can_detach_documents_from_language()\n    {\n        $language = Language::factory()->create();\n        $document = Document::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.languages.documents.store', [$language, $document])\n        );\n\n        $response->assertNoContent();\n\n        $this->assertFalse(\n            $language\n                ->documents()\n                ->where('documents.id', $document->id)\n                ->exists()\n        );\n    }\n}\n",
            "module": "crud:17",
            "path": "/tests/Feature/Api/LanguageDocumentsTest.php"
          },
          "/app/Http/Resources/LocationResource.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass LocationResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n",
            "module": "entity:26",
            "path": "/app/Http/Resources/LocationResource.php"
          },
          "/app/Http/Resources/LocationCollection.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass LocationCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n",
            "module": "entity:26",
            "path": "/app/Http/Resources/LocationCollection.php"
          },
          "/app/Http/Controllers/Api/LocationController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Location;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\LocationResource;\nuse App\\Http\\Resources\\LocationCollection;\nuse App\\Http\\Requests\\LocationStoreRequest;\nuse App\\Http\\Requests\\LocationUpdateRequest;\n\nclass LocationController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('view-any', Location::class);\n\n        $search = $request->get('search', '');\n\n        $locations = Location::search($search)\n            ->latest()\n            ->paginate();\n\n        return new LocationCollection($locations);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\LocationStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(LocationStoreRequest $request)\n    {\n        $this->authorize('create', Location::class);\n\n        $validated = $request->validated();\n\n        $location = Location::create($validated);\n\n        return new LocationResource($location);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Location $location\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Location $location)\n    {\n        $this->authorize('view', $location);\n\n        return new LocationResource($location);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\LocationUpdateRequest $request\n     * @param \\App\\Models\\Location $location\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(LocationUpdateRequest $request, Location $location)\n    {\n        $this->authorize('update', $location);\n\n        $validated = $request->validated();\n\n        $location->update($validated);\n\n        return new LocationResource($location);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Location $location\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Location $location)\n    {\n        $this->authorize('delete', $location);\n\n        $location->delete();\n\n        return response()->noContent();\n    }\n}\n",
            "module": "crud:15",
            "path": "/app/Http/Controllers/Api/LocationController.php"
          },
          "/tests/Feature/Api/LocationTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Location;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass LocationTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_locations_list()\n    {\n        $locations = Location::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.locations.index'));\n\n        $response->assertOk()->assertSee($locations[0]->continent);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_location()\n    {\n        $data = Location::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->postJson(route('api.locations.store'), $data);\n\n        $this->assertDatabaseHas('locations', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_location()\n    {\n        $location = Location::factory()->create();\n\n        $data = [\n            'continent' => $this->faker->text(255),\n            'country' => $this->faker->country,\n            'locality' => $this->faker->text(255),\n        ];\n\n        $response = $this->putJson(\n            route('api.locations.update', $location),\n            $data\n        );\n\n        $data['id'] = $location->id;\n\n        $this->assertDatabaseHas('locations', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_location()\n    {\n        $location = Location::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.locations.destroy', $location)\n        );\n\n        $this->assertDeleted($location);\n\n        $response->assertNoContent();\n    }\n}\n",
            "module": "crud:15",
            "path": "/tests/Feature/Api/LocationTest.php"
          },
          "/app/Http/Controllers/Api/CreatorController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Creator;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\CreatorResource;\nuse App\\Http\\Resources\\CreatorCollection;\nuse App\\Http\\Requests\\CreatorStoreRequest;\nuse App\\Http\\Requests\\CreatorUpdateRequest;\n\nclass CreatorController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('view-any', Creator::class);\n\n        $search = $request->get('search', '');\n\n        $creators = Creator::search($search)\n            ->latest()\n            ->paginate();\n\n        return new CreatorCollection($creators);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\CreatorStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(CreatorStoreRequest $request)\n    {\n        $this->authorize('create', Creator::class);\n\n        $validated = $request->validated();\n\n        $creator = Creator::create($validated);\n\n        return new CreatorResource($creator);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Creator $creator\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Creator $creator)\n    {\n        $this->authorize('view', $creator);\n\n        return new CreatorResource($creator);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\CreatorUpdateRequest $request\n     * @param \\App\\Models\\Creator $creator\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(CreatorUpdateRequest $request, Creator $creator)\n    {\n        $this->authorize('update', $creator);\n\n        $validated = $request->validated();\n\n        $creator->update($validated);\n\n        return new CreatorResource($creator);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Creator $creator\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Creator $creator)\n    {\n        $this->authorize('delete', $creator);\n\n        $creator->delete();\n\n        return response()->noContent();\n    }\n}\n",
            "module": "crud:19",
            "path": "/app/Http/Controllers/Api/CreatorController.php"
          },
          "/tests/Feature/Api/CreatorTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Creator;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass CreatorTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_creators_list()\n    {\n        $creators = Creator::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.creators.index'));\n\n        $response->assertOk()->assertSee($creators[0]->first_names);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_creator()\n    {\n        $data = Creator::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->postJson(route('api.creators.store'), $data);\n\n        $this->assertDatabaseHas('creators', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_creator()\n    {\n        $creator = Creator::factory()->create();\n\n        $data = [\n            'first_names' => $this->faker->text(255),\n            'last_names' => $this->faker->text(255),\n            'is_author' => $this->faker->boolean,\n            'is_editor' => $this->faker->boolean,\n            'is_translator' => $this->faker->boolean,\n            'is_compiler' => $this->faker->boolean,\n        ];\n\n        $response = $this->putJson(\n            route('api.creators.update', $creator),\n            $data\n        );\n\n        $data['id'] = $creator->id;\n\n        $this->assertDatabaseHas('creators', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_creator()\n    {\n        $creator = Creator::factory()->create();\n\n        $response = $this->deleteJson(route('api.creators.destroy', $creator));\n\n        $this->assertDeleted($creator);\n\n        $response->assertNoContent();\n    }\n}\n",
            "module": "crud:19",
            "path": "/tests/Feature/Api/CreatorTest.php"
          },
          "/app/Http/Controllers/Api/CreatorDocumentsController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Creator;\nuse App\\Models\\Document;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\DocumentCollection;\n\nclass CreatorDocumentsController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Creator $creator\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request, Creator $creator)\n    {\n        $this->authorize('view', $creator);\n\n        $search = $request->get('search', '');\n\n        $documents = $creator\n            ->documents()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new DocumentCollection($documents);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Creator $creator\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(\n        Request $request,\n        Creator $creator,\n        Document $document\n    ) {\n        $this->authorize('update', $creator);\n\n        $creator->documents()->syncWithoutDetaching([$document->id]);\n\n        return response()->noContent();\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Creator $creator\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(\n        Request $request,\n        Creator $creator,\n        Document $document\n    ) {\n        $this->authorize('update', $creator);\n\n        $creator->documents()->detach($document);\n\n        return response()->noContent();\n    }\n}\n",
            "module": "crud:19",
            "path": "/app/Http/Controllers/Api/CreatorDocumentsController.php"
          },
          "/tests/Feature/Api/CreatorDocumentsTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Creator;\nuse App\\Models\\Document;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass CreatorDocumentsTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_creator_documents()\n    {\n        $creator = Creator::factory()->create();\n        $document = Document::factory()->create();\n\n        $creator->documents()->attach($document);\n\n        $response = $this->getJson(\n            route('api.creators.documents.index', $creator)\n        );\n\n        $response->assertOk()->assertSee($document->slug);\n    }\n\n    /**\n     * @test\n     */\n    public function it_can_attach_documents_to_creator()\n    {\n        $creator = Creator::factory()->create();\n        $document = Document::factory()->create();\n\n        $response = $this->postJson(\n            route('api.creators.documents.store', [$creator, $document])\n        );\n\n        $response->assertNoContent();\n\n        $this->assertTrue(\n            $creator\n                ->documents()\n                ->where('documents.id', $document->id)\n                ->exists()\n        );\n    }\n\n    /**\n     * @test\n     */\n    public function it_can_detach_documents_from_creator()\n    {\n        $creator = Creator::factory()->create();\n        $document = Document::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.creators.documents.store', [$creator, $document])\n        );\n\n        $response->assertNoContent();\n\n        $this->assertFalse(\n            $creator\n                ->documents()\n                ->where('documents.id', $document->id)\n                ->exists()\n        );\n    }\n}\n",
            "module": "crud:19",
            "path": "/tests/Feature/Api/CreatorDocumentsTest.php"
          },
          "/app/Http/Controllers/Api/EditionController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Edition;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\EditionResource;\nuse App\\Http\\Resources\\EditionCollection;\nuse App\\Http\\Requests\\EditionStoreRequest;\nuse App\\Http\\Requests\\EditionUpdateRequest;\n\nclass EditionController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('view-any', Edition::class);\n\n        $search = $request->get('search', '');\n\n        $editions = Edition::search($search)\n            ->latest()\n            ->paginate();\n\n        return new EditionCollection($editions);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\EditionStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(EditionStoreRequest $request)\n    {\n        $this->authorize('create', Edition::class);\n\n        $validated = $request->validated();\n\n        $edition = Edition::create($validated);\n\n        return new EditionResource($edition);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Edition $edition\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Edition $edition)\n    {\n        $this->authorize('view', $edition);\n\n        return new EditionResource($edition);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\EditionUpdateRequest $request\n     * @param \\App\\Models\\Edition $edition\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(EditionUpdateRequest $request, Edition $edition)\n    {\n        $this->authorize('update', $edition);\n\n        $validated = $request->validated();\n\n        $edition->update($validated);\n\n        return new EditionResource($edition);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Edition $edition\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Edition $edition)\n    {\n        $this->authorize('delete', $edition);\n\n        $edition->delete();\n\n        return response()->noContent();\n    }\n}\n",
            "module": "crud:23",
            "path": "/app/Http/Controllers/Api/EditionController.php"
          },
          "/tests/Feature/Api/EditionTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Edition;\n\nuse App\\Models\\Document;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass EditionTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_editions_list()\n    {\n        $editions = Edition::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.editions.index'));\n\n        $response->assertOk()->assertSee($editions[0]->title);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_edition()\n    {\n        $data = Edition::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->postJson(route('api.editions.store'), $data);\n\n        $this->assertDatabaseHas('editions', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_edition()\n    {\n        $edition = Edition::factory()->create();\n\n        $document = Document::factory()->create();\n\n        $data = [\n            'title' => $this->faker->sentence(10),\n            'subtitle' => $this->faker->text(255),\n            'title_parent' => $this->faker->text(255),\n            'volume' => $this->faker->text(255),\n            'page_range' => $this->faker->word(255),\n            'page_total' => $this->faker->word(255),\n            'publisher_name' => $this->faker->text(255),\n            'publisher_city' => $this->faker->text(255),\n            'date' => $this->faker->date,\n            'isbn' => $this->faker->text(255),\n            'document_id' => $document->id,\n        ];\n\n        $response = $this->putJson(\n            route('api.editions.update', $edition),\n            $data\n        );\n\n        $data['id'] = $edition->id;\n\n        $this->assertDatabaseHas('editions', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_edition()\n    {\n        $edition = Edition::factory()->create();\n\n        $response = $this->deleteJson(route('api.editions.destroy', $edition));\n\n        $this->assertDeleted($edition);\n\n        $response->assertNoContent();\n    }\n}\n",
            "module": "crud:23",
            "path": "/tests/Feature/Api/EditionTest.php"
          },
          "/app/Http/Controllers/Api/ActivityController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Activity;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\ActivityResource;\nuse App\\Http\\Resources\\ActivityCollection;\nuse App\\Http\\Requests\\ActivityStoreRequest;\nuse App\\Http\\Requests\\ActivityUpdateRequest;\n\nclass ActivityController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('view-any', Activity::class);\n\n        $search = $request->get('search', '');\n\n        $activities = Activity::search($search)\n            ->latest()\n            ->paginate();\n\n        return new ActivityCollection($activities);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\ActivityStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(ActivityStoreRequest $request)\n    {\n        $this->authorize('create', Activity::class);\n\n        $validated = $request->validated();\n\n        $activity = Activity::create($validated);\n\n        return new ActivityResource($activity);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Activity $activity\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Activity $activity)\n    {\n        $this->authorize('view', $activity);\n\n        return new ActivityResource($activity);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\ActivityUpdateRequest $request\n     * @param \\App\\Models\\Activity $activity\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(ActivityUpdateRequest $request, Activity $activity)\n    {\n        $this->authorize('update', $activity);\n\n        $validated = $request->validated();\n\n        $activity->update($validated);\n\n        return new ActivityResource($activity);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Activity $activity\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Activity $activity)\n    {\n        $this->authorize('delete', $activity);\n\n        $activity->delete();\n\n        return response()->noContent();\n    }\n}\n",
            "module": "crud:24",
            "path": "/app/Http/Controllers/Api/ActivityController.php"
          },
          "/tests/Feature/Api/ActivityTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Activity;\n\nuse App\\Models\\Document;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass ActivityTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_activities_list()\n    {\n        $activities = Activity::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.activities.index'));\n\n        $response->assertOk()->assertSee($activities[0]->comment);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_activity()\n    {\n        $data = Activity::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->postJson(route('api.activities.store'), $data);\n\n        $this->assertDatabaseHas('activities', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_activity()\n    {\n        $activity = Activity::factory()->create();\n\n        $document = Document::factory()->create();\n        $user = User::factory()->create();\n\n        $data = [\n            'activity_type' => 'created',\n            'comment' => $this->faker->text(255),\n            'document_id' => $document->id,\n            'user_id' => $user->id,\n        ];\n\n        $response = $this->putJson(\n            route('api.activities.update', $activity),\n            $data\n        );\n\n        $data['id'] = $activity->id;\n\n        $this->assertDatabaseHas('activities', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_activity()\n    {\n        $activity = Activity::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.activities.destroy', $activity)\n        );\n\n        $this->assertDeleted($activity);\n\n        $response->assertNoContent();\n    }\n}\n",
            "module": "crud:24",
            "path": "/tests/Feature/Api/ActivityTest.php"
          },
          "/resources/lang/en/crud.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nreturn [\n    'common' => [\n        'actions' => 'Actions',\n        'create' => 'Create',\n        'edit' => 'Edit',\n        'update' => 'Update',\n        'new' => 'New',\n        'cancel' => 'Cancel',\n        'save' => 'Save',\n        'delete' => 'Delete',\n        'delete_selected' => 'Delete selected',\n        'search' => 'Search...',\n        'back' => 'Back to Index',\n        'are_you_sure' => 'Are you sure?',\n        'no_items_found' => 'No items found',\n        'created' => 'Successfully created',\n        'saved' => 'Saved successfully',\n        'removed' => 'Successfully removed',\n    ],\n\n    'documents' => [\n        'name' => 'Documents',\n        'index_title' => 'Documents List',\n        'new_title' => 'New Document',\n        'create_title' => 'Add A Document',\n        'edit_title' => 'Edit A Document',\n        'show_title' => 'Show A Document',\n        'inputs' => [\n            'slug' => 'Slug',\n            'is_pdf' => 'Is Pdf',\n            'is_audio' => 'Is Audio',\n            'is_image' => 'Is Image',\n            'is_video' => 'Is Video',\n            'is_html' => 'Is Html',\n            'file_url' => 'File Url',\n            'blurb' => 'Blurb',\n            'content_html' => 'Content Html',\n            'content_size' => 'Content Size',\n            'edit_quality' => 'Edit Quality',\n            'formatting_quality' => 'Formatting Quality',\n            'publication_permission' => 'Publication Permission',\n            'notes' => 'Notes',\n            'input_type' => 'Input Type',\n            'publication_approval' => 'Publication Approval',\n            'views' => 'Views',\n        ],\n    ],\n\n    'collections' => [\n        'name' => 'Collections',\n        'index_title' => 'Collections List',\n        'new_title' => 'New Collection',\n        'create_title' => 'Create Collection',\n        'edit_title' => 'Edit Collection',\n        'show_title' => 'Show Collection',\n        'inputs' => [\n            'slug' => 'Slug',\n            'name' => 'Name',\n            'shortname' => 'Shortname',\n        ],\n    ],\n\n    'tags' => [\n        'name' => 'Tags',\n        'index_title' => 'Tags List',\n        'new_title' => 'New Tag',\n        'create_title' => 'Create Tag',\n        'edit_title' => 'Edit Tag',\n        'show_title' => 'Show Tag',\n        'inputs' => [\n            'label' => 'Label',\n        ],\n    ],\n\n    'users' => [\n        'name' => 'Users',\n        'index_title' => 'Users List',\n        'new_title' => 'New User',\n        'create_title' => 'Create User',\n        'edit_title' => 'Edit User',\n        'show_title' => 'Show User',\n        'inputs' => [\n            'name' => 'Name',\n            'email' => 'Email',\n            'password' => 'Password',\n            'status' => 'Status',\n        ],\n    ],\n\n    'languages' => [\n        'name' => 'Languages',\n        'index_title' => 'Languages List',\n        'new_title' => 'New Language',\n        'create_title' => 'Create Language',\n        'edit_title' => 'Edit Language',\n        'show_title' => 'Show Language',\n        'inputs' => [\n            'language' => 'Language',\n            'language_tag' => 'Language Tag',\n        ],\n    ],\n\n    'locations' => [\n        'name' => 'Locations',\n        'index_title' => 'Locations List',\n        'new_title' => 'New Location',\n        'create_title' => 'Create Location',\n        'edit_title' => 'Edit Location',\n        'show_title' => 'Show Location',\n        'inputs' => [\n            'continent' => 'Continent',\n            'country' => 'Country',\n            'locality' => 'Locality',\n        ],\n    ],\n\n    'creators' => [\n        'name' => 'Creators',\n        'index_title' => 'Creators List',\n        'new_title' => 'New Creator',\n        'create_title' => 'Create Creator',\n        'edit_title' => 'Edit Creator',\n        'show_title' => 'Show Creator',\n        'inputs' => [\n            'first_names' => 'First Names',\n            'last_names' => 'Last Names',\n            'is_author' => 'Is Author',\n            'is_editor' => 'Is Editor',\n            'is_translator' => 'Is Translator',\n            'is_compiler' => 'Is Compiler',\n        ],\n    ],\n\n    'editions' => [\n        'name' => 'Editions',\n        'index_title' => 'Editions List',\n        'new_title' => 'New Edition',\n        'create_title' => 'Create Edition',\n        'edit_title' => 'Edit Edition',\n        'show_title' => 'Show Edition',\n        'inputs' => [\n            'title' => 'Title',\n            'subtitle' => 'Subtitle',\n            'title_parent' => 'Title Parent',\n            'volume' => 'Volume',\n            'page_range' => 'Page Range',\n            'page_total' => 'Page Total',\n            'publisher_name' => 'Publisher Name',\n            'publisher_city' => 'Publisher City',\n            'date' => 'Date',\n            'isbn' => 'Isbn',\n            'document_id' => 'Document',\n        ],\n    ],\n\n    'activities' => [\n        'name' => 'Activities',\n        'index_title' => 'Activities List',\n        'new_title' => 'New Activity',\n        'create_title' => 'Create Activity',\n        'edit_title' => 'Edit Activity',\n        'show_title' => 'Show Activity',\n        'inputs' => [\n            'document_id' => 'Document',\n            'user_id' => 'User',\n            'activity_type' => 'Activity Type',\n            'comment' => 'Comment',\n        ],\n    ],\n];\n",
            "module": "base",
            "path": "/resources/lang/en/crud.php"
          },
          "/routes/api.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Route;\nuse App\\Http\\Controllers\\Api\\TagController;\nuse App\\Http\\Controllers\\Api\\UserController;\nuse App\\Http\\Controllers\\Api\\AuthController;\nuse App\\Http\\Controllers\\Api\\CreatorController;\nuse App\\Http\\Controllers\\Api\\EditionController;\nuse App\\Http\\Controllers\\Api\\DocumentController;\nuse App\\Http\\Controllers\\Api\\LanguageController;\nuse App\\Http\\Controllers\\Api\\LocationController;\nuse App\\Http\\Controllers\\Api\\ActivityController;\nuse App\\Http\\Controllers\\Api\\CollectionController;\nuse App\\Http\\Controllers\\Api\\DocumentTagsController;\nuse App\\Http\\Controllers\\Api\\TagDocumentsController;\nuse App\\Http\\Controllers\\Api\\UserActivitiesController;\nuse App\\Http\\Controllers\\Api\\DocumentEditionsController;\nuse App\\Http\\Controllers\\Api\\DocumentCreatorsController;\nuse App\\Http\\Controllers\\Api\\CreatorDocumentsController;\nuse App\\Http\\Controllers\\Api\\DocumentLanguagesController;\nuse App\\Http\\Controllers\\Api\\DocumentLocationsController;\nuse App\\Http\\Controllers\\Api\\LanguageDocumentsController;\nuse App\\Http\\Controllers\\Api\\LocationDocumentsController;\nuse App\\Http\\Controllers\\Api\\DocumentActivitiesController;\nuse App\\Http\\Controllers\\Api\\DocumentCollectionsController;\nuse App\\Http\\Controllers\\Api\\CollectionDocumentsController;\n\n/*\n|--------------------------------------------------------------------------\n| API Routes\n|--------------------------------------------------------------------------\n|\n| Here is where you can register API routes for your application. These\n| routes are loaded by the RouteServiceProvider within a group which\n| is assigned the \"api\" middleware group. Enjoy building your API!\n|\n*/\n\nRoute::post('/login', [AuthController::class, 'login'])->name('api.login');\n\nRoute::middleware('auth:sanctum')\n    ->get('/user', function (Request $request) {\n        return $request->user();\n    })\n    ->name('api.user');\n\nRoute::name('api.')\n    ->middleware('auth:sanctum')\n    ->group(function () {\n        Route::apiResource('documents', DocumentController::class);\n\n        // Document Editions\n        Route::get('/documents/{document}/editions', [\n            DocumentEditionsController::class,\n            'index',\n        ])->name('documents.editions.index');\n        Route::post('/documents/{document}/editions', [\n            DocumentEditionsController::class,\n            'store',\n        ])->name('documents.editions.store');\n\n        // Document Activities\n        Route::get('/documents/{document}/activities', [\n            DocumentActivitiesController::class,\n            'index',\n        ])->name('documents.activities.index');\n        Route::post('/documents/{document}/activities', [\n            DocumentActivitiesController::class,\n            'store',\n        ])->name('documents.activities.store');\n\n        // Document Languages\n        Route::get('/documents/{document}/languages', [\n            DocumentLanguagesController::class,\n            'index',\n        ])->name('documents.languages.index');\n        Route::post('/documents/{document}/languages/{language}', [\n            DocumentLanguagesController::class,\n            'store',\n        ])->name('documents.languages.store');\n        Route::delete('/documents/{document}/languages/{language}', [\n            DocumentLanguagesController::class,\n            'destroy',\n        ])->name('documents.languages.destroy');\n\n        // Document Tags\n        Route::get('/documents/{document}/tags', [\n            DocumentTagsController::class,\n            'index',\n        ])->name('documents.tags.index');\n        Route::post('/documents/{document}/tags/{tag}', [\n            DocumentTagsController::class,\n            'store',\n        ])->name('documents.tags.store');\n        Route::delete('/documents/{document}/tags/{tag}', [\n            DocumentTagsController::class,\n            'destroy',\n        ])->name('documents.tags.destroy');\n\n        // Document Locations\n        Route::get('/documents/{document}/locations', [\n            DocumentLocationsController::class,\n            'index',\n        ])->name('documents.locations.index');\n        Route::post('/documents/{document}/locations/{location}', [\n            DocumentLocationsController::class,\n            'store',\n        ])->name('documents.locations.store');\n        Route::delete('/documents/{document}/locations/{location}', [\n            DocumentLocationsController::class,\n            'destroy',\n        ])->name('documents.locations.destroy');\n\n        // Document Collections\n        Route::get('/documents/{document}/collections', [\n            DocumentCollectionsController::class,\n            'index',\n        ])->name('documents.collections.index');\n        Route::post('/documents/{document}/collections/{collection}', [\n            DocumentCollectionsController::class,\n            'store',\n        ])->name('documents.collections.store');\n        Route::delete('/documents/{document}/collections/{collection}', [\n            DocumentCollectionsController::class,\n            'destroy',\n        ])->name('documents.collections.destroy');\n\n        // Document Creators\n        Route::get('/documents/{document}/creators', [\n            DocumentCreatorsController::class,\n            'index',\n        ])->name('documents.creators.index');\n        Route::post('/documents/{document}/creators/{creator}', [\n            DocumentCreatorsController::class,\n            'store',\n        ])->name('documents.creators.store');\n        Route::delete('/documents/{document}/creators/{creator}', [\n            DocumentCreatorsController::class,\n            'destroy',\n        ])->name('documents.creators.destroy');\n\n        Route::apiResource('collections', CollectionController::class);\n\n        // Collection Documents\n        Route::get('/collections/{collection}/documents', [\n            CollectionDocumentsController::class,\n            'index',\n        ])->name('collections.documents.index');\n        Route::post('/collections/{collection}/documents/{document}', [\n            CollectionDocumentsController::class,\n            'store',\n        ])->name('collections.documents.store');\n        Route::delete('/collections/{collection}/documents/{document}', [\n            CollectionDocumentsController::class,\n            'destroy',\n        ])->name('collections.documents.destroy');\n\n        Route::apiResource('tags', TagController::class);\n\n        // Tag Documents\n        Route::get('/tags/{tag}/documents', [\n            TagDocumentsController::class,\n            'index',\n        ])->name('tags.documents.index');\n        Route::post('/tags/{tag}/documents/{document}', [\n            TagDocumentsController::class,\n            'store',\n        ])->name('tags.documents.store');\n        Route::delete('/tags/{tag}/documents/{document}', [\n            TagDocumentsController::class,\n            'destroy',\n        ])->name('tags.documents.destroy');\n\n        Route::apiResource('users', UserController::class);\n\n        // User Activities\n        Route::get('/users/{user}/activities', [\n            UserActivitiesController::class,\n            'index',\n        ])->name('users.activities.index');\n        Route::post('/users/{user}/activities', [\n            UserActivitiesController::class,\n            'store',\n        ])->name('users.activities.store');\n\n        Route::apiResource('languages', LanguageController::class);\n\n        // Language Documents\n        Route::get('/languages/{language}/documents', [\n            LanguageDocumentsController::class,\n            'index',\n        ])->name('languages.documents.index');\n        Route::post('/languages/{language}/documents/{document}', [\n            LanguageDocumentsController::class,\n            'store',\n        ])->name('languages.documents.store');\n        Route::delete('/languages/{language}/documents/{document}', [\n            LanguageDocumentsController::class,\n            'destroy',\n        ])->name('languages.documents.destroy');\n\n        Route::apiResource('locations', LocationController::class);\n\n        // Location Documents\n        Route::get('/locations/{location}/documents', [\n            LocationDocumentsController::class,\n            'index',\n        ])->name('locations.documents.index');\n        Route::post('/locations/{location}/documents/{document}', [\n            LocationDocumentsController::class,\n            'store',\n        ])->name('locations.documents.store');\n        Route::delete('/locations/{location}/documents/{document}', [\n            LocationDocumentsController::class,\n            'destroy',\n        ])->name('locations.documents.destroy');\n\n        Route::apiResource('creators', CreatorController::class);\n\n        // Creator Documents\n        Route::get('/creators/{creator}/documents', [\n            CreatorDocumentsController::class,\n            'index',\n        ])->name('creators.documents.index');\n        Route::post('/creators/{creator}/documents/{document}', [\n            CreatorDocumentsController::class,\n            'store',\n        ])->name('creators.documents.store');\n        Route::delete('/creators/{creator}/documents/{document}', [\n            CreatorDocumentsController::class,\n            'destroy',\n        ])->name('creators.documents.destroy');\n\n        Route::apiResource('editions', EditionController::class);\n\n        Route::apiResource('activities', ActivityController::class);\n    });\n",
            "module": "base",
            "path": "/routes/api.php"
          },
          "/routes/web.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Route;\n\n/*\n|--------------------------------------------------------------------------\n| Web Routes\n|--------------------------------------------------------------------------\n|\n| Here is where you can register web routes for your application. These\n| routes are loaded by the RouteServiceProvider within a group which\n| contains the \"web\" middleware group. Now create something great!\n|\n*/\n\nRoute::get('/', function () {\n    return view('welcome');\n});",
            "module": "base",
            "path": "/routes/web.php"
          },
          "/resources/views/components/form-button.blade.php": {
            "deleteOnGeneration": true,
            "content": "@props([\n    'method' => 'POST',\n    'action'\n])\n\n<x-form method=\"{{ $method }}\" action=\"{{ $action }}\">\n    <div>\n        <button type=\"submit\" {{ $attributes }}>\n            {{ $slot }}\n        </button>\n    </div>\n</x-form>",
            "module": "base",
            "path": "/resources/views/components/form-button.blade.php"
          },
          "/resources/views/components/form.blade.php": {
            "deleteOnGeneration": true,
            "content": "@props([\n    'method' => 'POST',\n    'action',\n    'hasFiles' => false,\n    'model'\n])\n\n@php\n    $method = strtoupper($method);\n@endphp\n\n<form method=\"{{ $method !== 'GET' ? 'POST' : $method }}\" action=\"{{ $action }}\" {!! $hasFiles ? 'enctype=\"multipart/form-data\"' : '' !!} {{ $attributes }}>\n    @csrf\n    @if (!in_array($method, ['POST', 'GET']))\n        @method($method)\n    @endif\n    {{ $slot }}\n</form>",
            "module": "base",
            "path": "/resources/views/components/form.blade.php"
          },
          "/resources/views/components/inputs/basic.blade.php": {
            "deleteOnGeneration": true,
            "content": "@props([\n    'name',\n    'label',\n    'value',\n    'type' => 'text',\n    'min' => null,\n    'max' => null,\n    'step' => null,\n])\n\n@if($label ?? null)\n    @include('components.inputs.partials.label')\n@endif\n\n<input\n    type=\"{{ $type }}\"\n    id=\"{{ $name }}\"\n    name=\"{{ $name }}\"\n    value=\"{{ old($name, $value ?? '') }}\"\n    {{ ($required ?? false) ? 'required' : '' }}\n    {{ $attributes->merge(['class' => 'block appearance-none w-full py-1 px-2 text-base leading-normal text-gray-800 border border-gray-200 rounded']) }}\n    {{ $min ? \"min={$min}\" : '' }}\n    {{ $max ? \"max={$max}\" : '' }}\n    {{ $step ? \"step={$step}\" : '' }}\n    autocomplete=\"off\"\n>\n\n@error($name)\n    @include('components.inputs.partials.error')\n@enderror",
            "module": "base",
            "path": "/resources/views/components/inputs/basic.blade.php"
          },
          "/resources/views/components/inputs/checkbox.blade.php": {
            "deleteOnGeneration": true,
            "content": "@props([\n    'id',\n    'name',\n    'label',\n    'value',\n    'checked' => false,\n    'addHiddenValue' => true,\n    'hiddenValue' => 0,\n])\n\n@php\n    $checked = !! $checked\n@endphp\n\n<div class=\"relative block mb-2\">\n\n    {{-- Adds a hidden default value to be send if checked is false --}}\n    @if($addHiddenValue)\n    <input type=\"hidden\" id=\"{{  $id ?? $name }}-hidden\" name=\"{{ $name }}\" value=\"{{ $hiddenValue }}\">\n    @endif\n\n    <input\n        type=\"checkbox\"\n        id=\"{{ $id ?? $name }}\"\n        name=\"{{ $name }}\"\n        value=\"{{ $value ?? 1 }}\"\n        {{ $checked ? 'checked' : '' }}\n        {{ $attributes->merge(['class' => '']) }}\n    >\n\n    @if($label ?? null)\n        <label class=\"text-gray-700 pl-2\" for=\"{{ $name }}\">\n            {{ $label }}\n        </label>\n    @endif\n</div>\n\n@error($name)\n    @include('components.inputs.partials.error')\n@enderror",
            "module": "base",
            "path": "/resources/views/components/inputs/checkbox.blade.php"
          },
          "/resources/views/components/inputs/date.blade.php": {
            "deleteOnGeneration": true,
            "content": "@props([\n    'name',\n    'label',\n    'value',\n])\n\n<x-inputs.basic type=\"date\" :name=\"$name\" label=\"{{ $label ?? ''}}\" :value=\"$value ?? ''\" :attributes=\"$attributes\"></x-inputs.basic>",
            "module": "base",
            "path": "/resources/views/components/inputs/date.blade.php"
          },
          "/resources/views/components/inputs/datetime.blade.php": {
            "deleteOnGeneration": true,
            "content": "@props([\n    'name',\n    'label',\n    'value',\n])\n\n<x-inputs.basic type=\"datetime-local\" :name=\"$name\" label=\"{{ $label ?? ''}}\" :value=\"$value ?? ''\" :attributes=\"$attributes\"></x-inputs.basic>",
            "module": "base",
            "path": "/resources/views/components/inputs/datetime.blade.php"
          },
          "/resources/views/components/inputs/email.blade.php": {
            "deleteOnGeneration": true,
            "content": "@props([\n    'name',\n    'label',\n    'value',\n])\n\n<x-inputs.basic type=\"email\" :name=\"$name\" label=\"{{ $label ?? ''}}\" :value=\"$value ?? ''\" :attributes=\"$attributes\"></x-inputs.basic>",
            "module": "base",
            "path": "/resources/views/components/inputs/email.blade.php"
          },
          "/resources/views/components/inputs/group.blade.php": {
            "deleteOnGeneration": true,
            "content": "<div {{ $attributes->merge(['class' => 'px-4 my-2']) }}>\n    {{ $slot }}\n</div>",
            "module": "base",
            "path": "/resources/views/components/inputs/group.blade.php"
          },
          "/resources/views/components/inputs/hidden.blade.php": {
            "deleteOnGeneration": true,
            "content": "@props([\n    'name',\n    'value',\n])\n\n<x-inputs.basic type=\"hidden\" :name=\"$name\" :value=\"$value ?? ''\" :attributes=\"$attributes\"></x-inputs.basic>",
            "module": "base",
            "path": "/resources/views/components/inputs/hidden.blade.php"
          },
          "/resources/views/components/inputs/number.blade.php": {
            "deleteOnGeneration": true,
            "content": "@props([\n    'name',\n    'label',\n    'value',\n    'min' => null,\n    'max' => null,\n    'step' => null,\n])\n\n<x-inputs.basic type=\"number\" :name=\"$name\" label=\"{{ $label ?? ''}}\" :value=\"$value ?? ''\" :attributes=\"$attributes\" :min=\"$min\" :max=\"$max\" :step=\"$step\"></x-inputs.basic>",
            "module": "base",
            "path": "/resources/views/components/inputs/number.blade.php"
          },
          "/resources/views/components/inputs/partials/error.blade.php": {
            "deleteOnGeneration": true,
            "content": "<p class=\"text-red-600\" role=\"alert\">{{ $message }}</p>",
            "module": "base",
            "path": "/resources/views/components/inputs/partials/error.blade.php"
          },
          "/resources/views/components/inputs/partials/label.blade.php": {
            "deleteOnGeneration": true,
            "content": "<label class=\"{{ ($required ?? false) ? 'label label-required font-medium text-gray-700' : 'label font-medium text-gray-700' }}\" for=\"{{ $name }}\">\n    {{ $label }}\n</label>",
            "module": "base",
            "path": "/resources/views/components/inputs/partials/label.blade.php"
          },
          "/resources/views/components/inputs/password.blade.php": {
            "deleteOnGeneration": true,
            "content": "@props([\n    'name',\n    'label',\n    'value' => '',\n])\n\n<x-inputs.basic type=\"password\" :name=\"$name\" label=\"{{ $label ?? ''}}\" :value=\"$value ?? ''\" :attributes=\"$attributes\"></x-inputs.basic>",
            "module": "base",
            "path": "/resources/views/components/inputs/password.blade.php"
          },
          "/resources/views/components/inputs/select.blade.php": {
            "deleteOnGeneration": true,
            "content": "@props([\n    'name',\n    'label',\n    'type' => 'text',\n])\n\n@if($label ?? null)\n    @include('components.inputs.partials.label')\n@endif\n\n<select\n    id=\"{{ $name }}\"\n    name=\"{{ $name }}\"\n    {{ ($required ?? false) ? 'required' : '' }}\n    {{ $attributes->merge(['class' => 'block appearance-none w-full py-1 px-2 text-base leading-normal text-gray-800 border border-gray-200 rounded']) }}\n    autocomplete=\"off\"\n>{{ $slot }}</select>\n\n@error($name)\n    @include('components.inputs.partials.error')\n@enderror",
            "module": "base",
            "path": "/resources/views/components/inputs/select.blade.php"
          },
          "/resources/views/components/inputs/text.blade.php": {
            "deleteOnGeneration": true,
            "content": "@props([\n    'name',\n    'label',\n    'value',\n])\n\n<x-inputs.basic type=\"text\" :name=\"$name\" label=\"{{ $label ?? ''}}\" :value=\"$value ?? ''\" :attributes=\"$attributes\"></x-inputs.basic>",
            "module": "base",
            "path": "/resources/views/components/inputs/text.blade.php"
          },
          "/resources/views/components/inputs/textarea.blade.php": {
            "deleteOnGeneration": true,
            "content": "@props([\n    'name',\n    'label',\n])\n\n@if($label ?? null)\n    @include('components.inputs.partials.label')\n@endif\n\n<textarea \n    id=\"{{ $name }}\"\n    name=\"{{ $name }}\" \n    rows=\"3\"\n    {{ ($required ?? false) ? 'required' : '' }}\n    {{ $attributes->merge(['class' => 'block appearance-none w-full py-1 px-2 text-base leading-normal text-gray-800 border border-gray-200 rounded']) }}\n    autocomplete=\"off\"\n>{{$slot}}</textarea>\n\n@error($name)\n    @include('components.inputs.partials.error')\n@enderror",
            "module": "base",
            "path": "/resources/views/components/inputs/textarea.blade.php"
          },
          "/resources/views/components/inputs/url.blade.php": {
            "deleteOnGeneration": true,
            "content": "@props([\n    'name',\n    'label',\n    'value',\n])\n\n<x-inputs.basic type=\"url\" :name=\"$name\" label=\"{{ $label ?? ''}}\" :value=\"$value ?? ''\" :attributes=\"$attributes\"></x-inputs.basic>",
            "module": "base",
            "path": "/resources/views/components/inputs/url.blade.php"
          },
          "/resources/views/components/dropdown-link.blade.php": {
            "deleteOnGeneration": true,
            "content": "<a {{ $attributes->merge(['class' => 'block px-4 py-2 text-sm leading-5 text-gray-700 hover:bg-gray-100 focus:outline-none focus:bg-gray-100 transition duration-150 ease-in-out']) }}>{{ $slot }}</a>\n",
            "module": "base",
            "path": "/resources/views/components/dropdown-link.blade.php"
          },
          "/resources/views/components/dropdown.blade.php": {
            "deleteOnGeneration": true,
            "content": "@props(['align' => 'right', 'width' => '48', 'contentClasses' => 'py-1 bg-white'])\n\n@php\nswitch ($align) {\n    case 'left':\n        $alignmentClasses = 'origin-top-left left-0';\n        break;\n    case 'top':\n        $alignmentClasses = 'origin-top';\n        break;\n    case 'right':\n    default:\n        $alignmentClasses = 'origin-top-right right-0';\n        break;\n}\n\nswitch ($width) {\n    case '48':\n        $width = 'w-48';\n        break;\n}\n@endphp\n\n<div class=\"relative\" x-data=\"{ open: false }\" @click.away=\"open = false\" @close.stop=\"open = false\">\n    <div @click=\"open = ! open\">\n        {{ $trigger }}\n    </div>\n\n    <div x-show=\"open\"\n            x-transition:enter=\"transition ease-out duration-200\"\n            x-transition:enter-start=\"transform opacity-0 scale-95\"\n            x-transition:enter-end=\"transform opacity-100 scale-100\"\n            x-transition:leave=\"transition ease-in duration-75\"\n            x-transition:leave-start=\"transform opacity-100 scale-100\"\n            x-transition:leave-end=\"transform opacity-0 scale-95\"\n            class=\"absolute z-50 mt-2 {{ $width }} rounded-md shadow-lg {{ $alignmentClasses }}\"\n            style=\"display: none;\"\n            @click=\"open = false\">\n        <div class=\"rounded-md ring-1 ring-black ring-opacity-5 {{ $contentClasses }}\">\n            {{ $content }}\n        </div>\n    </div>\n</div>\n",
            "module": "base",
            "path": "/resources/views/components/dropdown.blade.php"
          },
          "/resources/views/components/modal.blade.php": {
            "deleteOnGeneration": true,
            "content": "{{-- This modal modal was copied from Jetstream components --}}\n\n@props(['id', 'maxWidth'])\n\n@php\n$id = $id ?? md5($attributes->wire('model'));\n$maxWidth = [\n    'sm' => 'sm:max-w-sm',\n    'md' => 'sm:max-w-md',\n    'lg' => 'sm:max-w-lg',\n    'xl' => 'sm:max-w-xl',\n    '2xl' => 'sm:max-w-2xl',\n][$maxWidth ?? '2xl'];\n@endphp\n\n<div\n    x-data=\"{\n        show: @entangle($attributes->wire('model')).defer,\n        focusables() {\n            // All focusable element types...\n            let selector = 'a, button, input:not([type=\\'hidden\\'], textarea, select, details, [tabindex]:not([tabindex=\\'-1\\'])'\n            return [...$el.querySelectorAll(selector)]\n                // All non-disabled elements...\n                .filter(el => ! el.hasAttribute('disabled'))\n        },\n        firstFocusable() { return this.focusables()[0] },\n        lastFocusable() { return this.focusables().slice(-1)[0] },\n        nextFocusable() { return this.focusables()[this.nextFocusableIndex()] || this.firstFocusable() },\n        prevFocusable() { return this.focusables()[this.prevFocusableIndex()] || this.lastFocusable() },\n        nextFocusableIndex() { return (this.focusables().indexOf(document.activeElement) + 1) % (this.focusables().length + 1) },\n        prevFocusableIndex() { return Math.max(0, this.focusables().indexOf(document.activeElement)) -1 },\n    }\"\n    x-init=\"$watch('show', value => {\n        if (value) {\n            document.body.classList.add('overflow-y-hidden');\n        } else {\n            document.body.classList.remove('overflow-y-hidden');\n        }\n    })\"\n    x-on:close.stop=\"show = false\"\n    x-on:keydown.escape.window=\"show = false\"\n    x-on:keydown.tab.prevent=\"$event.shiftKey || nextFocusable().focus()\"\n    x-on:keydown.shift.tab.prevent=\"prevFocusable().focus()\"\n    x-show=\"show\"\n    id=\"{{ $id }}\"\n    class=\"jetstream-modal fixed inset-0 overflow-y-auto px-4 py-6 sm:px-0 z-50\"\n    style=\"display: none;\"\n>\n    <div x-show=\"show\" class=\"fixed inset-0 transform transition-all\" x-on:click=\"show = false\" x-transition:enter=\"ease-out duration-300\"\n                    x-transition:enter-start=\"opacity-0\"\n                    x-transition:enter-end=\"opacity-100\"\n                    x-transition:leave=\"ease-in duration-200\"\n                    x-transition:leave-start=\"opacity-100\"\n                    x-transition:leave-end=\"opacity-0\">\n        <div class=\"absolute inset-0 bg-gray-500 opacity-75\"></div>\n    </div>\n\n    <div x-show=\"show\" class=\"mb-6 bg-white rounded-lg overflow-hidden shadow-xl transform transition-all sm:w-full {{ $maxWidth }} sm:mx-auto\"\n                    x-transition:enter=\"ease-out duration-300\"\n                    x-transition:enter-start=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n                    x-transition:enter-end=\"opacity-100 translate-y-0 sm:scale-100\"\n                    x-transition:leave=\"ease-in duration-200\"\n                    x-transition:leave-start=\"opacity-100 translate-y-0 sm:scale-100\"\n                    x-transition:leave-end=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\">\n        {{ $slot }}\n    </div>\n</div>",
            "module": "base",
            "path": "/resources/views/components/modal.blade.php"
          },
          "/resources/views/components/nav-dropdown.blade.php": {
            "deleteOnGeneration": true,
            "content": "@props([\n    'title'\n])\n\n<div class=\"hidden sm:flex sm:items-center sm:ml-6\">\n    <x-dropdown align=\"right\" width=\"48\">\n        <x-slot name=\"trigger\">\n            <button class=\"flex items-center text-sm font-medium text-gray-500 hover:text-gray-700 hover:border-gray-300 focus:outline-none focus:text-gray-700 focus:border-gray-300 transition duration-150 ease-in-out\">\n                <div>{{ $title ?? '' }}</div>\n\n                <div class=\"ml-1\">\n                    <svg class=\"fill-current h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path fill-rule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\n                    </svg>\n                </div>\n            </button>\n        </x-slot>\n\n        <x-slot name=\"content\">\n            {{ $slot }}\n        </x-slot>\n    </x-dropdown>\n</div>",
            "module": "base",
            "path": "/resources/views/components/nav-dropdown.blade.php"
          },
          "/resources/views/components/nav-link.blade.php": {
            "deleteOnGeneration": true,
            "content": "@props(['active'])\n\n@php\n$classes = ($active ?? false)\n            ? 'inline-flex items-center px-1 pt-1 border-b-2 border-blue-500 text-sm font-medium leading-5 text-gray-900 focus:outline-none focus:border-blue-700 transition duration-150 ease-in-out'\n            : 'inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium leading-5 text-gray-500 hover:text-gray-700 hover:border-gray-300 focus:outline-none focus:text-gray-700 focus:border-gray-300 transition duration-150 ease-in-out';\n@endphp\n\n<a {{ $attributes->merge(['class' => $classes]) }}>\n    {{ $slot }}\n</a>\n",
            "module": "base",
            "path": "/resources/views/components/nav-link.blade.php"
          },
          "/resources/views/components/partials/card.blade.php": {
            "deleteOnGeneration": true,
            "content": "@props([\n    'bodyClasses' => 'flex-auto p-6',\n])\n\n<div {{ $attributes->merge(['class' => 'relative flex flex-col rounded-lg bg-white break-words shadow-xl']) }}>\n    <div class=\"{{ $bodyClasses }}\">\n        \n        @if(isset($title))\n        <h4 class=\"text-lg font-bold mb-3\">\n            {{ $title }}\n        </h4>\n        @endif\n\n        @if(isset($subtitle))\n        <h5 class=\"text-gray-600 text-sm\">\n            {{ $subtitle }}\n        </h5>\n        @endif\n\n        {{ $slot }}\n    </div>\n</div>",
            "module": "base",
            "path": "/resources/views/components/partials/card.blade.php"
          },
          "/resources/views/components/partials/thumbnail.blade.php": {
            "deleteOnGeneration": true,
            "content": "@props([\n    'src',\n    'size' => 50,\n])\n\n@if($src)\n<img src=\"{{ $src }}\" class=\"object-cover rounded border border-gray-200\" style=\"width: {{ $size }}px; height: {{ $size }}px;\">\n@else\n<div class=\"border rounded border-gray-200 bg-gray-100\" style=\"width: {{ $size }}px; height: {{ $size }}px;\"></div>\n@endif",
            "module": "base",
            "path": "/resources/views/components/partials/thumbnail.blade.php"
          },
          "/resources/views/components/responsive-nav-link.blade.php": {
            "deleteOnGeneration": true,
            "content": "@props(['active'])\n\n@php\n$classes = ($active ?? false)\n            ? 'block pl-3 pr-4 py-2 border-l-4 border-blue-500 text-base font-medium text-blue-700 bg-indigo-50 focus:outline-none focus:text-indigo-800 focus:bg-indigo-100 focus:border-blue-700 transition duration-150 ease-in-out'\n            : 'block pl-3 pr-4 py-2 border-l-4 border-transparent text-base font-medium text-gray-600 hover:text-gray-800 hover:bg-gray-50 hover:border-gray-300 focus:outline-none focus:text-gray-800 focus:bg-gray-50 focus:border-gray-300 transition duration-150 ease-in-out';\n@endphp\n\n<a {{ $attributes->merge(['class' => $classes]) }}>\n    {{ $slot }}\n</a>\n",
            "module": "base",
            "path": "/resources/views/components/responsive-nav-link.blade.php"
          },
          "/resources/views/layouts/app.blade.php": {
            "deleteOnGeneration": true,
            "content": "<!DOCTYPE html>\n<html lang=\"{{ str_replace('_', '-', app()->getLocale()) }}\">\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n        \n        <title>Bahai Library Online</title>\n        \n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700&display=swap\">\n        \n        <!-- Styles -->\n        <link rel=\"stylesheet\" href=\"{{ mix('css/app.css') }}\">\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.css\">\n        \n        <!-- Icons -->\n        <link href=\"https://unpkg.com/ionicons@4.5.10-0/dist/css/ionicons.min.css\" rel=\"stylesheet\">\n        \n        <!-- Scripts -->\n        <script src=\"{{ mix('js/app.js') }}\" defer></script>\n\n        \n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/turbolinks/5.2.0/turbolinks.js\" integrity=\"sha512-G3jAqT2eM4MMkLMyQR5YBhvN5/Da3IG6kqgYqU9zlIH4+2a+GuMdLb5Kpxy6ItMdCfgaKlo2XFhI0dHtMJjoRw==\" crossorigin=\"anonymous\"></script>\n        \n        @livewireStyles\n    </head>\n    <body class=\"font-sans antialiased\">\n        <x-jet-banner />\n\n        <div class=\"min-h-screen bg-gray-100\">\n            @livewire('navigation-menu')\n        \n            <!-- Page Heading -->\n            @if (isset($header))\n                <header class=\"bg-white shadow\">\n                    <div class=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n                        {{ $header }}\n                    </div>\n                </header>\n            @endif\n        \n            <!-- Page Content -->\n            <main>\n                {{ $slot }}\n            </main>\n        </div>\n\n        @stack('modals')\n        \n        @livewireScripts\n        \n        <script src=\"https://cdn.jsdelivr.net/gh/livewire/turbolinks@v0.1.x/dist/livewire-turbolinks.js\" data-turbolinks-eval=\"false\" data-turbo-eval=\"false\"></script>\n        \n        @stack('scripts')\n        \n        <script src=\"https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.js\"></script>\n        \n        @if (session()->has('success')) \n        <script>\n            const notyf = new Notyf({dismissible: true})\n            notyf.success('{{ session('success') }}')\n        </script> \n        @endif\n        \n        <script>\n            /* Simple Alpine Image Viewer */\n            function imageViewer(src = '') {\n                return {\n                    imageUrl: src,\n        \n                    refreshUrl() {\n                        this.imageUrl = this.$el.getAttribute(\"image-url\")\n                    },\n        \n                    fileChosen(event) {\n                        this.fileToDataUrl(event, src => this.imageUrl = src)\n                    },\n        \n                    fileToDataUrl(event, callback) {\n                        if (! event.target.files.length) return\n        \n                        let file = event.target.files[0],\n                            reader = new FileReader()\n        \n                        reader.readAsDataURL(file)\n                        reader.onload = e => callback(e.target.result)\n                    },\n                }\n            }\n        </script>\n    </body>\n</html>\n",
            "module": "base",
            "path": "/resources/views/layouts/app.blade.php"
          },
          "/resources/views/navigation-menu.blade.php": {
            "deleteOnGeneration": true,
            "content": "<nav x-data=\"{ open: false }\" class=\"bg-white border-b border-gray-100\">\n    <!-- Primary Navigation Menu -->\n    <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div class=\"flex justify-between h-16\">\n            <div class=\"flex\">\n                <!-- Logo -->\n                <div class=\"flex-shrink-0 flex items-center\">\n                    <a href=\"{{ route('dashboard') }}\">\n                        <x-jet-application-mark class=\"block h-9 w-auto\" />\n                    </a>\n                </div>\n\n                <!-- Navigation Links -->\n                <div class=\"hidden space-x-8 sm:-my-px sm:ml-10 sm:flex\">\n                    <x-jet-nav-link href=\"{{ route('dashboard') }}\" :active=\"request()->routeIs('dashboard')\">\n                        {{ __('Dashboard') }}\n                    </x-jet-nav-link>\n                </div>\n\n                <x-nav-dropdown title=\"Apps\" align=\"right\" width=\"48\">\n                        @can('view-any', App\\Models\\Document::class)\n                        <x-dropdown-link href=\"{{ route('documents.index') }}\">\n                        Documents\n                        </x-dropdown-link>\n                        @endcan\n                        @can('view-any', App\\Models\\Collection::class)\n                        <x-dropdown-link href=\"{{ route('collections.index') }}\">\n                        Collections\n                        </x-dropdown-link>\n                        @endcan\n                        @can('view-any', App\\Models\\Tag::class)\n                        <x-dropdown-link href=\"{{ route('tags.index') }}\">\n                        Tags\n                        </x-dropdown-link>\n                        @endcan\n                        @can('view-any', App\\Models\\User::class)\n                        <x-dropdown-link href=\"{{ route('users.index') }}\">\n                        Users\n                        </x-dropdown-link>\n                        @endcan\n                        @can('view-any', App\\Models\\Language::class)\n                        <x-dropdown-link href=\"{{ route('languages.index') }}\">\n                        Languages\n                        </x-dropdown-link>\n                        @endcan\n                        @can('view-any', App\\Models\\Location::class)\n                        <x-dropdown-link href=\"{{ route('locations.index') }}\">\n                        Locations\n                        </x-dropdown-link>\n                        @endcan\n                        @can('view-any', App\\Models\\Creator::class)\n                        <x-dropdown-link href=\"{{ route('creators.index') }}\">\n                        Creators\n                        </x-dropdown-link>\n                        @endcan\n                        @can('view-any', App\\Models\\Edition::class)\n                        <x-dropdown-link href=\"{{ route('editions.index') }}\">\n                        Editions\n                        </x-dropdown-link>\n                        @endcan\n                        @can('view-any', App\\Models\\Activity::class)\n                        <x-dropdown-link href=\"{{ route('activities.index') }}\">\n                        Activities\n                        </x-dropdown-link>\n                        @endcan\n                </x-nav-dropdown>\n\n            </div>\n\n            <div class=\"hidden sm:flex sm:items-center sm:ml-6\">\n                <!-- Teams Dropdown -->\n                @if (Laravel\\Jetstream\\Jetstream::hasTeamFeatures())\n                    <div class=\"ml-3 relative\">\n                        <x-jet-dropdown align=\"right\" width=\"60\">\n                            <x-slot name=\"trigger\">\n                                <span class=\"inline-flex rounded-md\">\n                                    <button type=\"button\" class=\"inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-gray-500 bg-white hover:bg-gray-50 hover:text-gray-700 focus:outline-none focus:bg-gray-50 active:bg-gray-50 transition ease-in-out duration-150\">\n                                        {{ Auth::user()->currentTeam->name }}\n\n                                        <svg class=\"ml-2 -mr-0.5 h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                                            <path fill-rule=\"evenodd\" d=\"M10 3a1 1 0 01.707.293l3 3a1 1 0 01-1.414 1.414L10 5.414 7.707 7.707a1 1 0 01-1.414-1.414l3-3A1 1 0 0110 3zm-3.707 9.293a1 1 0 011.414 0L10 14.586l2.293-2.293a1 1 0 011.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\n                                        </svg>\n                                    </button>\n                                </span>\n                            </x-slot>\n\n                            <x-slot name=\"content\">\n                                <div class=\"w-60\">\n                                    <!-- Team Management -->\n                                    <div class=\"block px-4 py-2 text-xs text-gray-400\">\n                                        {{ __('Manage Team') }}\n                                    </div>\n\n                                    <!-- Team Settings -->\n                                    <x-jet-dropdown-link href=\"{{ route('teams.show', Auth::user()->currentTeam->id) }}\">\n                                        {{ __('Team Settings') }}\n                                    </x-jet-dropdown-link>\n\n                                    @can('create', Laravel\\Jetstream\\Jetstream::newTeamModel())\n                                        <x-jet-dropdown-link href=\"{{ route('teams.create') }}\">\n                                            {{ __('Create New Team') }}\n                                        </x-jet-dropdown-link>\n                                    @endcan\n\n                                    <div class=\"border-t border-gray-100\"></div>\n\n                                    <!-- Team Switcher -->\n                                    <div class=\"block px-4 py-2 text-xs text-gray-400\">\n                                        {{ __('Switch Teams') }}\n                                    </div>\n\n                                    @foreach (Auth::user()->allTeams() as $team)\n                                        <x-jet-switchable-team :team=\"$team\" />\n                                    @endforeach\n                                </div>\n                            </x-slot>\n                        </x-jet-dropdown>\n                    </div>\n                @endif\n\n                <!-- Settings Dropdown -->\n                <div class=\"ml-3 relative\">\n                    <x-jet-dropdown align=\"right\" width=\"48\">\n                        <x-slot name=\"trigger\">\n                            @if (Laravel\\Jetstream\\Jetstream::managesProfilePhotos())\n                                <button class=\"flex text-sm border-2 border-transparent rounded-full focus:outline-none focus:border-gray-300 transition duration-150 ease-in-out\">\n                                    <img class=\"h-8 w-8 rounded-full object-cover\" src=\"{{ Auth::user()->profile_photo_url }}\" alt=\"{{ Auth::user()->name }}\" />\n                                </button>\n                            @else\n                                <span class=\"inline-flex rounded-md\">\n                                    <button type=\"button\" class=\"inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-gray-500 bg-white hover:text-gray-700 focus:outline-none transition ease-in-out duration-150\">\n                                        {{ Auth::user()->name }}\n\n                                        <svg class=\"ml-2 -mr-0.5 h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                                            <path fill-rule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\n                                        </svg>\n                                    </button>\n                                </span>\n                            @endif\n                        </x-slot>\n\n                        <x-slot name=\"content\">\n                            <!-- Account Management -->\n                            <div class=\"block px-4 py-2 text-xs text-gray-400\">\n                                {{ __('Manage Account') }}\n                            </div>\n\n                            <x-jet-dropdown-link href=\"{{ route('profile.show') }}\">\n                                {{ __('Profile') }}\n                            </x-jet-dropdown-link>\n\n                            @if (Laravel\\Jetstream\\Jetstream::hasApiFeatures())\n                                <x-jet-dropdown-link href=\"{{ route('api-tokens.index') }}\">\n                                    {{ __('API Tokens') }}\n                                </x-jet-dropdown-link>\n                            @endif\n\n                            <div class=\"border-t border-gray-100\"></div>\n\n                            <!-- Authentication -->\n                            <form method=\"POST\" action=\"{{ route('logout') }}\">\n                                @csrf\n\n                                <x-jet-dropdown-link href=\"{{ route('logout') }}\"\n                                         onclick=\"event.preventDefault();\n                                                this.closest('form').submit();\">\n                                    {{ __('Log Out') }}\n                                </x-jet-dropdown-link>\n                            </form>\n                        </x-slot>\n                    </x-jet-dropdown>\n                </div>\n            </div>\n\n            <!-- Hamburger -->\n            <div class=\"-mr-2 flex items-center sm:hidden\">\n                <button @click=\"open = ! open\" class=\"inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:bg-gray-100 focus:text-gray-500 transition duration-150 ease-in-out\">\n                    <svg class=\"h-6 w-6\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\">\n                        <path :class=\"{'hidden': open, 'inline-flex': ! open }\" class=\"inline-flex\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 12h16M4 18h16\" />\n                        <path :class=\"{'hidden': ! open, 'inline-flex': open }\" class=\"hidden\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <!-- Responsive Navigation Menu -->\n    <div :class=\"{'block': open, 'hidden': ! open}\" class=\"hidden sm:hidden\">\n        <div class=\"pt-2 pb-3 space-y-1\">\n            <x-jet-responsive-nav-link href=\"{{ route('dashboard') }}\" :active=\"request()->routeIs('dashboard')\">\n                {{ __('Dashboard') }}\n            </x-jet-responsive-nav-link>\n            \n                @can('view-any', App\\Models\\Document::class)\n                <x-jet-responsive-nav-link href=\"{{ route('documents.index') }}\">\n                Documents\n                </x-jet-responsive-nav-link>\n                @endcan\n                @can('view-any', App\\Models\\Collection::class)\n                <x-jet-responsive-nav-link href=\"{{ route('collections.index') }}\">\n                Collections\n                </x-jet-responsive-nav-link>\n                @endcan\n                @can('view-any', App\\Models\\Tag::class)\n                <x-jet-responsive-nav-link href=\"{{ route('tags.index') }}\">\n                Tags\n                </x-jet-responsive-nav-link>\n                @endcan\n                @can('view-any', App\\Models\\User::class)\n                <x-jet-responsive-nav-link href=\"{{ route('users.index') }}\">\n                Users\n                </x-jet-responsive-nav-link>\n                @endcan\n                @can('view-any', App\\Models\\Language::class)\n                <x-jet-responsive-nav-link href=\"{{ route('languages.index') }}\">\n                Languages\n                </x-jet-responsive-nav-link>\n                @endcan\n                @can('view-any', App\\Models\\Location::class)\n                <x-jet-responsive-nav-link href=\"{{ route('locations.index') }}\">\n                Locations\n                </x-jet-responsive-nav-link>\n                @endcan\n                @can('view-any', App\\Models\\Creator::class)\n                <x-jet-responsive-nav-link href=\"{{ route('creators.index') }}\">\n                Creators\n                </x-jet-responsive-nav-link>\n                @endcan\n                @can('view-any', App\\Models\\Edition::class)\n                <x-jet-responsive-nav-link href=\"{{ route('editions.index') }}\">\n                Editions\n                </x-jet-responsive-nav-link>\n                @endcan\n                @can('view-any', App\\Models\\Activity::class)\n                <x-jet-responsive-nav-link href=\"{{ route('activities.index') }}\">\n                Activities\n                </x-jet-responsive-nav-link>\n                @endcan\n\n        </div>\n\n        <!-- Responsive Settings Options -->\n        <div class=\"pt-4 pb-1 border-t border-gray-200\">\n            <div class=\"flex items-center px-4\">\n                @if (Laravel\\Jetstream\\Jetstream::managesProfilePhotos())\n                    <div class=\"flex-shrink-0 mr-3\">\n                        <img class=\"h-10 w-10 rounded-full object-cover\" src=\"{{ Auth::user()->profile_photo_url }}\" alt=\"{{ Auth::user()->name }}\" />\n                    </div>\n                @endif\n\n                <div>\n                    <div class=\"font-medium text-base text-gray-800\">{{ Auth::user()->name }}</div>\n                    <div class=\"font-medium text-sm text-gray-500\">{{ Auth::user()->email }}</div>\n                </div>\n            </div>\n\n            <div class=\"mt-3 space-y-1\">\n                <!-- Account Management -->\n                <x-jet-responsive-nav-link href=\"{{ route('profile.show') }}\" :active=\"request()->routeIs('profile.show')\">\n                    {{ __('Profile') }}\n                </x-jet-responsive-nav-link>\n\n                @if (Laravel\\Jetstream\\Jetstream::hasApiFeatures())\n                    <x-jet-responsive-nav-link href=\"{{ route('api-tokens.index') }}\" :active=\"request()->routeIs('api-tokens.index')\">\n                        {{ __('API Tokens') }}\n                    </x-jet-responsive-nav-link>\n                @endif\n\n                <!-- Authentication -->\n                <form method=\"POST\" action=\"{{ route('logout') }}\">\n                    @csrf\n\n                    <x-jet-responsive-nav-link href=\"{{ route('logout') }}\"\n                                   onclick=\"event.preventDefault();\n                                    this.closest('form').submit();\">\n                        {{ __('Log Out') }}\n                    </x-jet-responsive-nav-link>\n                </form>\n\n                <!-- Team Management -->\n                @if (Laravel\\Jetstream\\Jetstream::hasTeamFeatures())\n                    <div class=\"border-t border-gray-200\"></div>\n\n                    <div class=\"block px-4 py-2 text-xs text-gray-400\">\n                        {{ __('Manage Team') }}\n                    </div>\n\n                    <!-- Team Settings -->\n                    <x-jet-responsive-nav-link href=\"{{ route('teams.show', Auth::user()->currentTeam->id) }}\" :active=\"request()->routeIs('teams.show')\">\n                        {{ __('Team Settings') }}\n                    </x-jet-responsive-nav-link>\n\n                    @can('create', Laravel\\Jetstream\\Jetstream::newTeamModel())\n                        <x-jet-responsive-nav-link href=\"{{ route('teams.create') }}\" :active=\"request()->routeIs('teams.create')\">\n                            {{ __('Create New Team') }}\n                        </x-jet-responsive-nav-link>\n                    @endcan\n\n                    <div class=\"border-t border-gray-200\"></div>\n\n                    <!-- Team Switcher -->\n                    <div class=\"block px-4 py-2 text-xs text-gray-400\">\n                        {{ __('Switch Teams') }}\n                    </div>\n\n                    @foreach (Auth::user()->allTeams() as $team)\n                        <x-jet-switchable-team :team=\"$team\" component=\"jet-responsive-nav-link\" />\n                    @endforeach\n                @endif\n            </div>\n        </div>\n    </div>\n</nav>",
            "module": "base",
            "path": "/resources/views/navigation-menu.blade.php"
          },
          "/database/factories/ActivityFactory.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\Activity;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass ActivityFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = Activity::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array\n     */\n    public function definition()\n    {\n        return [\n            'activity_type' => 'created',\n            'comment' => $this->faker->text(255),\n            'document_id' => \\App\\Models\\Document::factory(),\n            'user_id' => \\App\\Models\\User::factory(),\n        ];\n    }\n}\n",
            "module": "entity:43",
            "path": "/database/factories/ActivityFactory.php"
          },
          "/database/factories/CollectionFactory.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\Collection;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass CollectionFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = Collection::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array\n     */\n    public function definition()\n    {\n        return [\n            'slug' => $this->faker->text(255),\n            'name' => $this->faker->text,\n            'shortname' => $this->faker->text(255),\n        ];\n    }\n}\n",
            "module": "entity:29",
            "path": "/database/factories/CollectionFactory.php"
          },
          "/database/factories/CreatorFactory.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\Creator;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass CreatorFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = Creator::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array\n     */\n    public function definition()\n    {\n        return [\n            'first_names' => $this->faker->text(255),\n            'last_names' => $this->faker->text(255),\n            'is_author' => $this->faker->boolean,\n            'is_editor' => $this->faker->boolean,\n            'is_translator' => $this->faker->boolean,\n            'is_compiler' => $this->faker->boolean,\n        ];\n    }\n}\n",
            "module": "entity:30",
            "path": "/database/factories/CreatorFactory.php"
          },
          "/database/factories/DocumentFactory.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\Document;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass DocumentFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = Document::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array\n     */\n    public function definition()\n    {\n        return [\n            'is_pdf' => $this->faker->boolean,\n            'is_audio' => $this->faker->boolean,\n            'is_image' => $this->faker->boolean,\n            'is_video' => $this->faker->boolean,\n            'is_html' => $this->faker->boolean,\n            'file_url' => $this->faker->text(255),\n            'blurb' => $this->faker->text,\n            'content_html' => $this->faker->text,\n            'content_size' => $this->faker->word,\n            'edit_quality' => 'high',\n            'formatting_quality' => 'high',\n            'publication_permission' => 'author',\n            'notes' => $this->faker->text,\n            'input_type' => 'scanned',\n            'publication_approval' => 'approved',\n            'views' => 0,\n        ];\n    }\n}\n",
            "module": "entity:39",
            "path": "/database/factories/DocumentFactory.php"
          },
          "/database/factories/EditionFactory.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\Edition;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass EditionFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = Edition::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array\n     */\n    public function definition()\n    {\n        return [\n            'title' => $this->faker->sentence(10),\n            'subtitle' => $this->faker->text(255),\n            'title_parent' => $this->faker->text(255),\n            'volume' => $this->faker->text(255),\n            'page_range' => $this->faker->word(255),\n            'page_total' => $this->faker->word(255),\n            'publisher_name' => $this->faker->text(255),\n            'publisher_city' => $this->faker->text(255),\n            'date' => $this->faker->date,\n            'isbn' => $this->faker->text(255),\n            'document_id' => \\App\\Models\\Document::factory(),\n        ];\n    }\n}\n",
            "module": "entity:40",
            "path": "/database/factories/EditionFactory.php"
          },
          "/database/factories/LanguageFactory.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\Language;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass LanguageFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = Language::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array\n     */\n    public function definition()\n    {\n        return [\n            'language' => $this->faker->text(255),\n            'language_tag' => $this->faker->word(255),\n        ];\n    }\n}\n",
            "module": "entity:28",
            "path": "/database/factories/LanguageFactory.php"
          },
          "/database/factories/LocationFactory.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\Location;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass LocationFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = Location::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array\n     */\n    public function definition()\n    {\n        return [\n            'continent' => $this->faker->text(255),\n            'country' => $this->faker->country,\n            'locality' => $this->faker->text(255),\n        ];\n    }\n}\n",
            "module": "entity:26",
            "path": "/database/factories/LocationFactory.php"
          },
          "/database/factories/TagFactory.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\Tag;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass TagFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = Tag::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array\n     */\n    public function definition()\n    {\n        return [\n            'label' => $this->faker->text(255),\n        ];\n    }\n}\n",
            "module": "entity:27",
            "path": "/database/factories/TagFactory.php"
          },
          "/database/factories/UserFactory.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\User;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass UserFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = User::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array\n     */\n    public function definition()\n    {\n        return [\n            'name' => $this->faker->name,\n            'email' => $this->faker->email,\n            'email_verified_at' => now(),\n            'password' => \\Hash::make('password'),\n            'remember_token' => Str::random(10),\n            'status' => 'contributor',\n        ];\n    }\n\n    /**\n     * Indicate that the model's email address should be unverified.\n     *\n     * @return \\Illuminate\\Database\\Eloquent\\Factories\\Factory\n     */\n    public function unverified()\n    {\n        return $this->state(function (array $attributes) {\n            return [\n                'email_verified_at' => null,\n            ];\n        });\n    }\n}\n",
            "module": "entity:31",
            "path": "/database/factories/UserFactory.php"
          },
          "/database/seeders/ActivitySeeder.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Database\\Seeders;\n\nuse App\\Models\\Activity;\nuse Illuminate\\Database\\Seeder;\n\nclass ActivitySeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        Activity::factory()\n            ->count(5)\n            ->create();\n    }\n}\n",
            "module": "entity:43",
            "path": "/database/seeders/ActivitySeeder.php"
          },
          "/database/seeders/CollectionSeeder.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Database\\Seeders;\n\nuse App\\Models\\Collection;\nuse Illuminate\\Database\\Seeder;\n\nclass CollectionSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        Collection::factory()\n            ->count(5)\n            ->create();\n    }\n}\n",
            "module": "entity:29",
            "path": "/database/seeders/CollectionSeeder.php"
          },
          "/database/seeders/CreatorSeeder.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Database\\Seeders;\n\nuse App\\Models\\Creator;\nuse Illuminate\\Database\\Seeder;\n\nclass CreatorSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        Creator::factory()\n            ->count(5)\n            ->create();\n    }\n}\n",
            "module": "entity:30",
            "path": "/database/seeders/CreatorSeeder.php"
          },
          "/database/seeders/DocumentSeeder.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Database\\Seeders;\n\nuse App\\Models\\Document;\nuse Illuminate\\Database\\Seeder;\n\nclass DocumentSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        Document::factory()\n            ->count(5)\n            ->create();\n    }\n}\n",
            "module": "entity:39",
            "path": "/database/seeders/DocumentSeeder.php"
          },
          "/database/seeders/EditionSeeder.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Database\\Seeders;\n\nuse App\\Models\\Edition;\nuse Illuminate\\Database\\Seeder;\n\nclass EditionSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        Edition::factory()\n            ->count(5)\n            ->create();\n    }\n}\n",
            "module": "entity:40",
            "path": "/database/seeders/EditionSeeder.php"
          },
          "/database/seeders/LanguageSeeder.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Database\\Seeders;\n\nuse App\\Models\\Language;\nuse Illuminate\\Database\\Seeder;\n\nclass LanguageSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        Language::factory()\n            ->count(5)\n            ->create();\n    }\n}\n",
            "module": "entity:28",
            "path": "/database/seeders/LanguageSeeder.php"
          },
          "/database/seeders/LocationSeeder.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Database\\Seeders;\n\nuse App\\Models\\Location;\nuse Illuminate\\Database\\Seeder;\n\nclass LocationSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        Location::factory()\n            ->count(5)\n            ->create();\n    }\n}\n",
            "module": "entity:26",
            "path": "/database/seeders/LocationSeeder.php"
          },
          "/database/seeders/TagSeeder.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Database\\Seeders;\n\nuse App\\Models\\Tag;\nuse Illuminate\\Database\\Seeder;\n\nclass TagSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        Tag::factory()\n            ->count(5)\n            ->create();\n    }\n}\n",
            "module": "entity:27",
            "path": "/database/seeders/TagSeeder.php"
          },
          "/database/seeders/UserSeeder.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Database\\Seeders;\n\nuse App\\Models\\User;\nuse Illuminate\\Database\\Seeder;\n\nclass UserSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        User::factory()\n            ->count(5)\n            ->create();\n    }\n}\n",
            "module": "entity:31",
            "path": "/database/seeders/UserSeeder.php"
          },
          "/database/seeders/DatabaseSeeder.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Seeder;\n\nclass DatabaseSeeder extends Seeder\n{\n    /**\n     * Seed the application's database.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        // Adding an admin user\n        $user = \\App\\Models\\User::factory()\n            ->count(1)\n            ->create([\n                'email' => 'admin@admin.com',\n                'password' => \\Hash::make('admin'),\n            ]);\n\n        $this->call(ActivitySeeder::class);\n        $this->call(CollectionSeeder::class);\n        $this->call(CreatorSeeder::class);\n        $this->call(DocumentSeeder::class);\n        $this->call(EditionSeeder::class);\n        $this->call(LanguageSeeder::class);\n        $this->call(LocationSeeder::class);\n        $this->call(TagSeeder::class);\n        $this->call(UserSeeder::class);\n    }\n}\n",
            "module": "base",
            "path": "/database/seeders/DatabaseSeeder.php"
          },
          "/app/Policies/ActivityPolicy.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\User;\nuse App\\Models\\Activity;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\n\nclass ActivityPolicy\n{\n    use HandlesAuthorization;\n\n    /**\n     * Determine whether the activity can view any models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function viewAny(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the activity can view the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Activity  $model\n     * @return mixed\n     */\n    public function view(User $user, Activity $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the activity can create models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function create(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the activity can update the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Activity  $model\n     * @return mixed\n     */\n    public function update(User $user, Activity $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the activity can delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Activity  $model\n     * @return mixed\n     */\n    public function delete(User $user, Activity $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the user can delete multiple instances of the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Activity  $model\n     * @return mixed\n     */\n    public function deleteAny(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the activity can restore the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Activity  $model\n     * @return mixed\n     */\n    public function restore(User $user, Activity $model)\n    {\n        return false;\n    }\n\n    /**\n     * Determine whether the activity can permanently delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Activity  $model\n     * @return mixed\n     */\n    public function forceDelete(User $user, Activity $model)\n    {\n        return false;\n    }\n}\n",
            "module": "entity:43",
            "path": "/app/Policies/ActivityPolicy.php"
          },
          "/app/Policies/CollectionPolicy.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\User;\nuse App\\Models\\Collection;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\n\nclass CollectionPolicy\n{\n    use HandlesAuthorization;\n\n    /**\n     * Determine whether the collection can view any models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function viewAny(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the collection can view the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Collection  $model\n     * @return mixed\n     */\n    public function view(User $user, Collection $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the collection can create models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function create(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the collection can update the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Collection  $model\n     * @return mixed\n     */\n    public function update(User $user, Collection $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the collection can delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Collection  $model\n     * @return mixed\n     */\n    public function delete(User $user, Collection $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the user can delete multiple instances of the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Collection  $model\n     * @return mixed\n     */\n    public function deleteAny(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the collection can restore the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Collection  $model\n     * @return mixed\n     */\n    public function restore(User $user, Collection $model)\n    {\n        return false;\n    }\n\n    /**\n     * Determine whether the collection can permanently delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Collection  $model\n     * @return mixed\n     */\n    public function forceDelete(User $user, Collection $model)\n    {\n        return false;\n    }\n}\n",
            "module": "entity:29",
            "path": "/app/Policies/CollectionPolicy.php"
          },
          "/app/Policies/CreatorPolicy.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\User;\nuse App\\Models\\Creator;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\n\nclass CreatorPolicy\n{\n    use HandlesAuthorization;\n\n    /**\n     * Determine whether the creator can view any models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function viewAny(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the creator can view the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Creator  $model\n     * @return mixed\n     */\n    public function view(User $user, Creator $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the creator can create models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function create(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the creator can update the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Creator  $model\n     * @return mixed\n     */\n    public function update(User $user, Creator $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the creator can delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Creator  $model\n     * @return mixed\n     */\n    public function delete(User $user, Creator $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the user can delete multiple instances of the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Creator  $model\n     * @return mixed\n     */\n    public function deleteAny(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the creator can restore the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Creator  $model\n     * @return mixed\n     */\n    public function restore(User $user, Creator $model)\n    {\n        return false;\n    }\n\n    /**\n     * Determine whether the creator can permanently delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Creator  $model\n     * @return mixed\n     */\n    public function forceDelete(User $user, Creator $model)\n    {\n        return false;\n    }\n}\n",
            "module": "entity:30",
            "path": "/app/Policies/CreatorPolicy.php"
          },
          "/app/Policies/DocumentPolicy.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\User;\nuse App\\Models\\Document;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\n\nclass DocumentPolicy\n{\n    use HandlesAuthorization;\n\n    /**\n     * Determine whether the document can view any models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function viewAny(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the document can view the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Document  $model\n     * @return mixed\n     */\n    public function view(User $user, Document $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the document can create models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function create(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the document can update the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Document  $model\n     * @return mixed\n     */\n    public function update(User $user, Document $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the document can delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Document  $model\n     * @return mixed\n     */\n    public function delete(User $user, Document $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the user can delete multiple instances of the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Document  $model\n     * @return mixed\n     */\n    public function deleteAny(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the document can restore the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Document  $model\n     * @return mixed\n     */\n    public function restore(User $user, Document $model)\n    {\n        return false;\n    }\n\n    /**\n     * Determine whether the document can permanently delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Document  $model\n     * @return mixed\n     */\n    public function forceDelete(User $user, Document $model)\n    {\n        return false;\n    }\n}\n",
            "module": "entity:39",
            "path": "/app/Policies/DocumentPolicy.php"
          },
          "/app/Policies/EditionPolicy.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\User;\nuse App\\Models\\Edition;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\n\nclass EditionPolicy\n{\n    use HandlesAuthorization;\n\n    /**\n     * Determine whether the edition can view any models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function viewAny(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the edition can view the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Edition  $model\n     * @return mixed\n     */\n    public function view(User $user, Edition $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the edition can create models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function create(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the edition can update the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Edition  $model\n     * @return mixed\n     */\n    public function update(User $user, Edition $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the edition can delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Edition  $model\n     * @return mixed\n     */\n    public function delete(User $user, Edition $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the user can delete multiple instances of the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Edition  $model\n     * @return mixed\n     */\n    public function deleteAny(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the edition can restore the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Edition  $model\n     * @return mixed\n     */\n    public function restore(User $user, Edition $model)\n    {\n        return false;\n    }\n\n    /**\n     * Determine whether the edition can permanently delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Edition  $model\n     * @return mixed\n     */\n    public function forceDelete(User $user, Edition $model)\n    {\n        return false;\n    }\n}\n",
            "module": "entity:40",
            "path": "/app/Policies/EditionPolicy.php"
          },
          "/app/Policies/LanguagePolicy.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\User;\nuse App\\Models\\Language;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\n\nclass LanguagePolicy\n{\n    use HandlesAuthorization;\n\n    /**\n     * Determine whether the language can view any models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function viewAny(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the language can view the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Language  $model\n     * @return mixed\n     */\n    public function view(User $user, Language $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the language can create models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function create(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the language can update the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Language  $model\n     * @return mixed\n     */\n    public function update(User $user, Language $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the language can delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Language  $model\n     * @return mixed\n     */\n    public function delete(User $user, Language $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the user can delete multiple instances of the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Language  $model\n     * @return mixed\n     */\n    public function deleteAny(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the language can restore the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Language  $model\n     * @return mixed\n     */\n    public function restore(User $user, Language $model)\n    {\n        return false;\n    }\n\n    /**\n     * Determine whether the language can permanently delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Language  $model\n     * @return mixed\n     */\n    public function forceDelete(User $user, Language $model)\n    {\n        return false;\n    }\n}\n",
            "module": "entity:28",
            "path": "/app/Policies/LanguagePolicy.php"
          },
          "/app/Policies/LocationPolicy.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\User;\nuse App\\Models\\Location;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\n\nclass LocationPolicy\n{\n    use HandlesAuthorization;\n\n    /**\n     * Determine whether the location can view any models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function viewAny(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the location can view the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Location  $model\n     * @return mixed\n     */\n    public function view(User $user, Location $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the location can create models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function create(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the location can update the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Location  $model\n     * @return mixed\n     */\n    public function update(User $user, Location $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the location can delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Location  $model\n     * @return mixed\n     */\n    public function delete(User $user, Location $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the user can delete multiple instances of the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Location  $model\n     * @return mixed\n     */\n    public function deleteAny(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the location can restore the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Location  $model\n     * @return mixed\n     */\n    public function restore(User $user, Location $model)\n    {\n        return false;\n    }\n\n    /**\n     * Determine whether the location can permanently delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Location  $model\n     * @return mixed\n     */\n    public function forceDelete(User $user, Location $model)\n    {\n        return false;\n    }\n}\n",
            "module": "entity:26",
            "path": "/app/Policies/LocationPolicy.php"
          },
          "/app/Policies/TagPolicy.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\Tag;\nuse App\\Models\\User;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\n\nclass TagPolicy\n{\n    use HandlesAuthorization;\n\n    /**\n     * Determine whether the tag can view any models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function viewAny(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the tag can view the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Tag  $model\n     * @return mixed\n     */\n    public function view(User $user, Tag $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the tag can create models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function create(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the tag can update the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Tag  $model\n     * @return mixed\n     */\n    public function update(User $user, Tag $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the tag can delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Tag  $model\n     * @return mixed\n     */\n    public function delete(User $user, Tag $model)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the user can delete multiple instances of the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Tag  $model\n     * @return mixed\n     */\n    public function deleteAny(User $user)\n    {\n        return true;\n    }\n\n    /**\n     * Determine whether the tag can restore the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Tag  $model\n     * @return mixed\n     */\n    public function restore(User $user, Tag $model)\n    {\n        return false;\n    }\n\n    /**\n     * Determine whether the tag can permanently delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Tag  $model\n     * @return mixed\n     */\n    public function forceDelete(User $user, Tag $model)\n    {\n        return false;\n    }\n}\n",
            "module": "entity:27",
            "path": "/app/Policies/TagPolicy.php"
          },
          "/app/Policies/UserPolicy.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\User;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\n\nclass UserPolicy\n{\n    use HandlesAuthorization;\n\n    /**\n     * Determine whether the user can view any models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function viewAny(User $user)\n    {\n        return $user->isSuperAdmin();\n    }\n\n    /**\n     * Determine whether the user can view the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\User  $model\n     * @return mixed\n     */\n    public function view(User $user, User $model)\n    {\n        return $user->isSuperAdmin();\n    }\n\n    /**\n     * Determine whether the user can create models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function create(User $user)\n    {\n        return $user->isSuperAdmin();\n    }\n\n    /**\n     * Determine whether the user can update the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\User  $model\n     * @return mixed\n     */\n    public function update(User $user, User $model)\n    {\n        return $user->isSuperAdmin();\n    }\n\n    /**\n     * Determine whether the user can delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\User  $model\n     * @return mixed\n     */\n    public function delete(User $user, User $model)\n    {\n        return $user->isSuperAdmin();\n    }\n\n    /**\n     * Determine whether the user can delete multiple instances of the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\User  $model\n     * @return mixed\n     */\n    public function deleteAny(User $user)\n    {\n        return $user->isSuperAdmin();\n    }\n\n    /**\n     * Determine whether the user can restore the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\User  $model\n     * @return mixed\n     */\n    public function restore(User $user, User $model)\n    {\n        return false;\n    }\n\n    /**\n     * Determine whether the user can permanently delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\User  $model\n     * @return mixed\n     */\n    public function forceDelete(User $user, User $model)\n    {\n        return false;\n    }\n}\n",
            "module": "entity:31",
            "path": "/app/Policies/UserPolicy.php"
          },
          "/database/migrations/2021_04_07_000000_create_activities_table.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateActivitiesTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('activities', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->unsignedBigInteger('document_id');\n            $table->unsignedBigInteger('user_id');\n            $table->enum('activity_type', [\n                'created',\n                'proofread',\n                'formatted',\n                'published',\n                'depublished',\n            ]);\n            $table->string('comment');\n\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('activities');\n    }\n}\n",
            "module": "entity:43",
            "path": "/database/migrations/2021_04_07_000000_create_activities_table.php"
          },
          "/database/migrations/2021_04_07_000009_create_collections_table.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateCollectionsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('collections', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->string('slug');\n            $table->text('name');\n            $table->string('shortname');\n\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('collections');\n    }\n}\n",
            "module": "entity:29",
            "path": "/database/migrations/2021_04_07_000009_create_collections_table.php"
          },
          "/database/migrations/2021_04_07_000011_create_creators_table.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateCreatorsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('creators', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->string('first_names')->nullable();\n            $table->string('last_names')->nullable();\n            $table->boolean('is_author')->nullable();\n            $table->boolean('is_editor')->nullable();\n            $table->boolean('is_translator')->nullable();\n            $table->boolean('is_compiler')->nullable();\n\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('creators');\n    }\n}\n",
            "module": "entity:30",
            "path": "/database/migrations/2021_04_07_000011_create_creators_table.php"
          },
          "/database/migrations/2021_04_07_000012_create_documents_table.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateDocumentsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('documents', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->string('slug');\n            $table->boolean('is_pdf')->nullable();\n            $table->boolean('is_audio')->nullable();\n            $table->boolean('is_image')->nullable();\n            $table->boolean('is_video')->nullable();\n            $table->boolean('is_html')->nullable();\n            $table->string('file_url')->nullable();\n            $table->text('blurb')->nullable();\n            $table->longText('content_html')->nullable();\n            $table->bigInteger('content_size')->nullable();\n            $table->enum('edit_quality', ['high', 'medium', 'low'])->nullable();\n            $table\n                ->enum('formatting_quality', ['high', 'medium', 'low'])\n                ->nullable();\n            $table->enum('publication_permission', [\n                'author',\n                'editor',\n                'publisher',\n                'translator',\n                'recipient',\n                'fair use',\n                'unknown',\n            ]);\n            $table->text('notes')->nullable();\n            $table->enum('input_type', ['scanned', 'typed', 'transcribed']);\n            $table->enum('publication_approval', [\n                'approved',\n                'rejected',\n                'pending',\n            ]);\n            $table->bigInteger('views');\n\n            $table->timestamps();\n            $table->softDeletes();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('documents');\n    }\n}\n",
            "module": "entity:39",
            "path": "/database/migrations/2021_04_07_000012_create_documents_table.php"
          },
          "/database/migrations/2021_04_07_000006_create_document_language_table.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateDocumentLanguageTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('document_language', function (Blueprint $table) {\n            $table->unsignedBigInteger('document_id');\n            $table->unsignedBigInteger('language_id');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('document_language');\n    }\n}\n",
            "module": "entity:36",
            "path": "/database/migrations/2021_04_07_000006_create_document_language_table.php"
          },
          "/database/migrations/2021_04_07_000004_create_document_tag_table.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateDocumentTagTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('document_tag', function (Blueprint $table) {\n            $table->unsignedBigInteger('document_id');\n            $table->unsignedBigInteger('tag_id');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('document_tag');\n    }\n}\n",
            "module": "entity:35",
            "path": "/database/migrations/2021_04_07_000004_create_document_tag_table.php"
          },
          "/database/migrations/2021_04_07_000013_create_editions_table.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateEditionsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('editions', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->unsignedBigInteger('document_id');\n            $table->string('title');\n            $table->string('subtitle')->nullable();\n            $table->string('title_parent')->nullable();\n            $table->string('volume')->nullable();\n            $table->char('page_range')->nullable();\n            $table->char('page_total')->nullable();\n            $table->string('publisher_name')->nullable();\n            $table->string('publisher_city')->nullable();\n            $table->date('date')->nullable();\n            $table->string('isbn')->nullable();\n\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('editions');\n    }\n}\n",
            "module": "entity:40",
            "path": "/database/migrations/2021_04_07_000013_create_editions_table.php"
          },
          "/database/migrations/2021_04_07_000007_create_languages_table.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateLanguagesTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('languages', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->string('language');\n            $table->char('language_tag');\n\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('languages');\n    }\n}\n",
            "module": "entity:28",
            "path": "/database/migrations/2021_04_07_000007_create_languages_table.php"
          },
          "/database/migrations/2021_04_07_000001_create_locations_table.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateLocationsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('locations', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->string('continent');\n            $table->string('country');\n            $table->string('locality');\n\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('locations');\n    }\n}\n",
            "module": "entity:26",
            "path": "/database/migrations/2021_04_07_000001_create_locations_table.php"
          },
          "/database/migrations/2021_04_07_000005_create_tags_table.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateTagsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('tags', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->string('label');\n\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('tags');\n    }\n}\n",
            "module": "entity:27",
            "path": "/database/migrations/2021_04_07_000005_create_tags_table.php"
          },
          "/database/migrations/2014_10_12_000000_create_users_table.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->string('name');\n            $table->string('email')->unique();\n            $table->timestamp('email_verified_at')->nullable();\n            $table->string('password');\n            $table->string('remember_token', 100)->nullable();\n            $table->text('two_factor_secret')->nullable();\n            $table->text('two_factor_recovery_codes')->nullable();\n            $table->text('profile_photo_path')->nullable();\n            $table->enum('status', ['contributor', 'editor', 'admin']);\n\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('users');\n    }\n}\n",
            "module": "entity:31",
            "path": "/database/migrations/2014_10_12_000000_create_users_table.php"
          },
          "/database/migrations/2021_04_07_009010_add_foreigns_to_activities_table.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass AddForeignsToActivitiesTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::table('activities', function (Blueprint $table) {\n            $table\n                ->foreign('document_id')\n                ->references('id')\n                ->on('documents');\n\n            $table\n                ->foreign('user_id')\n                ->references('id')\n                ->on('users');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::table('activities', function (Blueprint $table) {\n            $table->dropForeign(['document_id']);\n            $table->dropForeign(['user_id']);\n        });\n    }\n}\n",
            "module": "entity:43|entity:39|entity:31",
            "path": "/database/migrations/2021_04_07_009010_add_foreigns_to_activities_table.php"
          },
          "/database/migrations/2021_04_07_009004_add_foreigns_to_document_language_table.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass AddForeignsToDocumentLanguageTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::table('document_language', function (Blueprint $table) {\n            $table\n                ->foreign('document_id')\n                ->references('id')\n                ->on('documents');\n\n            $table\n                ->foreign('language_id')\n                ->references('id')\n                ->on('languages');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::table('document_language', function (Blueprint $table) {\n            $table->dropForeign(['document_id']);\n            $table->dropForeign(['language_id']);\n        });\n    }\n}\n",
            "module": "entity:36|entity:39|entity:28",
            "path": "/database/migrations/2021_04_07_009004_add_foreigns_to_document_language_table.php"
          },
          "/database/migrations/2021_04_07_009003_add_foreigns_to_document_tag_table.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass AddForeignsToDocumentTagTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::table('document_tag', function (Blueprint $table) {\n            $table\n                ->foreign('document_id')\n                ->references('id')\n                ->on('documents');\n\n            $table\n                ->foreign('tag_id')\n                ->references('id')\n                ->on('tags');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::table('document_tag', function (Blueprint $table) {\n            $table->dropForeign(['document_id']);\n            $table->dropForeign(['tag_id']);\n        });\n    }\n}\n",
            "module": "entity:35|entity:39|entity:27",
            "path": "/database/migrations/2021_04_07_009003_add_foreigns_to_document_tag_table.php"
          },
          "/database/migrations/2021_04_07_009008_add_foreigns_to_editions_table.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass AddForeignsToEditionsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::table('editions', function (Blueprint $table) {\n            $table\n                ->foreign('document_id')\n                ->references('id')\n                ->on('documents');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::table('editions', function (Blueprint $table) {\n            $table->dropForeign(['document_id']);\n        });\n    }\n}\n",
            "module": "entity:40|entity:39",
            "path": "/database/migrations/2021_04_07_009008_add_foreigns_to_editions_table.php"
          },
          "/app/Models/Activity.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Scopes\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n\nclass Activity extends Model\n{\n    use HasFactory;\n    use Searchable;\n\n    protected $fillable = [\n        'document_id',\n        'user_id',\n        'activity_type',\n        'comment',\n    ];\n\n    protected $searchableFields = ['*'];\n\n    public function document()\n    {\n        return $this->belongsTo(Document::class);\n    }\n\n    public function user()\n    {\n        return $this->belongsTo(User::class);\n    }\n}\n",
            "module": "entity:43",
            "path": "/app/Models/Activity.php"
          },
          "/app/Models/Collection.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Scopes\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n\nclass Collection extends Model\n{\n    use HasFactory;\n    use Searchable;\n\n    protected $fillable = ['slug', 'name', 'shortname'];\n\n    protected $searchableFields = ['*'];\n\n    public function documents()\n    {\n        return $this->belongsToMany(Document::class);\n    }\n}\n",
            "module": "entity:29",
            "path": "/app/Models/Collection.php"
          },
          "/app/Models/Creator.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Scopes\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n\nclass Creator extends Model\n{\n    use HasFactory;\n    use Searchable;\n\n    protected $fillable = [\n        'first_names',\n        'last_names',\n        'is_author',\n        'is_editor',\n        'is_translator',\n        'is_compiler',\n    ];\n\n    protected $searchableFields = ['*'];\n\n    protected $casts = [\n        'is_author' => 'boolean',\n        'is_editor' => 'boolean',\n        'is_translator' => 'boolean',\n        'is_compiler' => 'boolean',\n    ];\n\n    public function documents()\n    {\n        return $this->belongsToMany(Document::class);\n    }\n}\n",
            "module": "entity:30",
            "path": "/app/Models/Creator.php"
          },
          "/app/Models/Document.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Scopes\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n\nclass Document extends Model\n{\n    use HasFactory;\n    use Searchable;\n    use SoftDeletes;\n\n    protected $fillable = [\n        'slug',\n        'is_pdf',\n        'is_audio',\n        'is_image',\n        'is_video',\n        'is_html',\n        'file_url',\n        'blurb',\n        'content_html',\n        'content_size',\n        'edit_quality',\n        'formatting_quality',\n        'publication_permission',\n        'notes',\n        'input_type',\n        'publication_approval',\n        'views',\n    ];\n\n    protected $searchableFields = ['*'];\n\n    protected $casts = [\n        'is_pdf' => 'boolean',\n        'is_audio' => 'boolean',\n        'is_image' => 'boolean',\n        'is_video' => 'boolean',\n        'is_html' => 'boolean',\n    ];\n\n    public function editions()\n    {\n        return $this->hasMany(Edition::class);\n    }\n\n    public function activities()\n    {\n        return $this->hasMany(Activity::class);\n    }\n\n    public function languages()\n    {\n        return $this->belongsToMany(Language::class);\n    }\n\n    public function tags()\n    {\n        return $this->belongsToMany(Tag::class);\n    }\n\n    public function locations()\n    {\n        return $this->belongsToMany(Location::class);\n    }\n\n    public function collections()\n    {\n        return $this->belongsToMany(Collection::class);\n    }\n\n    public function creators()\n    {\n        return $this->belongsToMany(Creator::class);\n    }\n}\n",
            "module": "entity:39",
            "path": "/app/Models/Document.php"
          },
          "/app/Models/Edition.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Scopes\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n\nclass Edition extends Model\n{\n    use HasFactory;\n    use Searchable;\n\n    protected $fillable = [\n        'document_id',\n        'title',\n        'subtitle',\n        'title_parent',\n        'volume',\n        'page_range',\n        'page_total',\n        'publisher_name',\n        'publisher_city',\n        'date',\n        'isbn',\n    ];\n\n    protected $searchableFields = ['*'];\n\n    protected $casts = [\n        'date' => 'date',\n    ];\n\n    public function document()\n    {\n        return $this->belongsTo(Document::class);\n    }\n}\n",
            "module": "entity:40",
            "path": "/app/Models/Edition.php"
          },
          "/app/Models/Language.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Scopes\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n\nclass Language extends Model\n{\n    use HasFactory;\n    use Searchable;\n\n    protected $fillable = ['language', 'language_tag'];\n\n    protected $searchableFields = ['*'];\n\n    public function documents()\n    {\n        return $this->belongsToMany(Document::class);\n    }\n}\n",
            "module": "entity:28",
            "path": "/app/Models/Language.php"
          },
          "/app/Models/Location.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Scopes\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n\nclass Location extends Model\n{\n    use HasFactory;\n    use Searchable;\n\n    protected $fillable = ['continent', 'country', 'locality'];\n\n    protected $searchableFields = ['*'];\n\n    public function documents()\n    {\n        return $this->belongsToMany(Document::class);\n    }\n}\n",
            "module": "entity:26",
            "path": "/app/Models/Location.php"
          },
          "/app/Models/Tag.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Scopes\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n\nclass Tag extends Model\n{\n    use HasFactory;\n    use Searchable;\n\n    protected $fillable = ['label'];\n\n    protected $searchableFields = ['*'];\n\n    public function documents()\n    {\n        return $this->belongsToMany(Document::class);\n    }\n}\n",
            "module": "entity:27",
            "path": "/app/Models/Tag.php"
          },
          "/app/Models/User.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Models;\n\nuse Laravel\\Sanctum\\HasApiTokens;\nuse App\\Models\\Scopes\\Searchable;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Contracts\\Auth\\MustVerifyEmail;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\nclass User extends Authenticatable\n{\n    use Notifiable;\n    use HasFactory;\n    use Searchable;\n    use HasApiTokens;\n\n    protected $fillable = ['name', 'email', 'password', 'status'];\n\n    protected $searchableFields = ['*'];\n\n    protected $hidden = [\n        'password',\n        'remember_token',\n        'two_factor_secret',\n        'two_factor_recovery_codes',\n    ];\n\n    protected $casts = [\n        'email_verified_at' => 'datetime',\n    ];\n\n    public function activities()\n    {\n        return $this->hasMany(Activity::class);\n    }\n\n    public function isSuperAdmin()\n    {\n        return in_array($this->email, config('auth.super_admins'));\n    }\n}\n",
            "module": "entity:31",
            "path": "/app/Models/User.php"
          },
          "/app/Models/Scopes/Searchable.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace App\\Models\\Scopes;\n\ntrait Searchable\n{\n    /**\n     * Search paginated items ordering by ID descending\n     *\n     * @param string $search\n     * @param integer $paginationQuantity\n     * @return void\n     */\n    public function scopeSearchLatestPaginated(\n        $query,\n        string $search,\n        $paginationQuantity = 10\n    ) {\n        return $query\n            ->search($search)\n            ->orderBy('updated_at', 'desc')\n            ->paginate($paginationQuantity);\n    }\n\n    /**\n     * Adds a scope to search the table based on the\n     * $searchableFields array inside the model\n     *\n     * @param [type] $query\n     * @param [type] $search\n     * @return void\n     */\n    public function scopeSearch($query, $search)\n    {\n        $query->where(function ($query) use ($search) {\n            foreach ($this->getSearchableFields() as $field) {\n                $query->orWhere($field, 'like', \"%{$search}%\");\n            }\n        });\n\n        return $query;\n    }\n\n    /**\n     * Returns the searchable fields. If $searchableFields is undefined,\n     * or is an empty array, or its first element is '*', it will search\n     * in all table fields\n     *\n     * @return array\n     */\n    protected function getSearchableFields()\n    {\n        if (isset($this->searchableFields) && count($this->searchableFields)) {\n            return $this->searchableFields[0] === '*'\n                ? $this->getAllModelTableFields()\n                : $this->searchableFields;\n        }\n\n        return $this->getAllModelTableFields();\n    }\n\n    /**\n     * Gets all fields from Model's table\n     *\n     * @return array\n     */\n    protected function getAllModelTableFields()\n    {\n        $tableName = $this->getTable();\n\n        return $this->getConnection()\n            ->getSchemaBuilder()\n            ->getColumnListing($tableName);\n    }\n}\n",
            "module": "base",
            "path": "/app/Models/Scopes/Searchable.php"
          },
          "/app/Http/Controllers/Api/AuthController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Validation\\ValidationException;\n\nclass AuthController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function login(Request $request)\n    {\n        $credentials = $request->validate([\n            'email' => 'required|email',\n            'password' => 'required',\n        ]);\n\n        if (!auth()->attempt($credentials)) {\n            throw ValidationException::withMessages([\n                'email' => [trans('auth.failed')],\n            ]);\n        }\n\n        $user = User::whereEmail($request->email)->firstOrFail();\n\n        $token = $user->createToken('auth-token');\n\n        return response()->json([\n            'token' => $token->plainTextToken,\n        ]);\n    }\n}\n",
            "module": "base",
            "path": "/app/Http/Controllers/Api/AuthController.php"
          },
          "/webpack.mix.js": {
            "deleteOnGeneration": true,
            "content": "const mix = require('laravel-mix');\n\n/*\n |--------------------------------------------------------------------------\n | Mix Asset Management\n |--------------------------------------------------------------------------\n |\n | Mix provides a clean, fluent API for defining some Webpack build steps\n | for your Laravel application. By default, we are compiling the Sass\n | file for the application as well as bundling up all the JS files.\n |\n */\n\nmix.js('resources/js/app.js', 'public/js')\n    .postCss('resources/css/app.css', 'public/css', [\n        require('tailwindcss')\n    ])\n    .sourceMaps();\n",
            "module": "base",
            "path": "/webpack.mix.js"
          },
          "/tailwind.config.js": {
            "deleteOnGeneration": true,
            "content": "const defaultTheme = require('tailwindcss/defaultTheme');\n\nmodule.exports = {\n    purge: [\n        './vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php',\n        './vendor/laravel/jetstream/**/*.blade.php',\n        './storage/framework/views/*.php',\n        './resources/views/**/*.blade.php',\n    ],\n\n    theme: {\n        extend: {\n            fontFamily: {\n                sans: ['Nunito', ...defaultTheme.fontFamily.sans],\n            },\n        },\n    },\n\n    variants: {\n        extend: {\n            opacity: ['disabled'],\n        },\n    },\n\n    plugins: [require('@tailwindcss/forms'), require('@tailwindcss/typography')],\n};\n",
            "module": "base",
            "path": "/tailwind.config.js"
          },
          "/resources/css/app.css": {
            "deleteOnGeneration": true,
            "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n.button {\n    @apply inline-flex items-center px-4 py-2 bg-gray-100 text-gray-800 border border-transparent rounded-md font-semibold text-xs tracking-widest transition ease-in-out duration-150 ring-gray-300;\n}\n\n.button:hover {\n    @apply bg-gray-200;\n}\n\n.button:active, .button:focus {\n    @apply bg-gray-300 ring;\n}\n\n.button.button-primary {\n    @apply bg-indigo-500 text-white !important;\n}\n\n.button-primary:hover, .button.button-primary:active, .button.button-primary:focus {\n    @apply bg-indigo-600 !important;\n}\n\n.button.button-primary:disabled {\n    @apply bg-indigo-200 !important;\n}\n\n.button.button-danger {\n    @apply bg-red-500 text-white !important;\n}\n\n.button-danger:hover, .button.button-danger:active, .button.button-danger:focus {\n    @apply bg-red-600 !important;\n}\n\n.button.button-danger:disabled {\n    @apply bg-red-200 !important;\n}",
            "module": "base",
            "path": "/resources/css/app.css"
          },
          "/resources/js/bootstrap.js": {
            "deleteOnGeneration": true,
            "content": "window._ = require('lodash');\n\n/**\n * We'll load the axios HTTP library which allows us to easily issue requests\n * to our Laravel back-end. This library automatically handles sending the\n * CSRF token as a header based on the value of the \"XSRF\" token cookie.\n */\n\nwindow.axios = require('axios');\n\nwindow.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n\n/**\n * Echo exposes an expressive API for subscribing to channels and listening\n * for events that are broadcast by Laravel. Echo and event broadcasting\n * allows your team to easily build robust real-time web applications.\n */\n\n// import Echo from 'laravel-echo';\n\n// window.Pusher = require('pusher-js');\n\n// window.Echo = new Echo({\n//     broadcaster: 'pusher',\n//     key: process.env.MIX_PUSHER_APP_KEY,\n//     cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n//     forceTLS: true\n// });\n",
            "module": "base",
            "path": "/resources/js/bootstrap.js"
          },
          "/app/Http/Controllers/Api/DocumentLocationsController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Document;\nuse App\\Models\\Location;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\LocationCollection;\n\nclass DocumentLocationsController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request, Document $document)\n    {\n        $this->authorize('view', $document);\n\n        $search = $request->get('search', '');\n\n        $locations = $document\n            ->locations()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new LocationCollection($locations);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @param \\App\\Models\\Location $location\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(\n        Request $request,\n        Document $document,\n        Location $location\n    ) {\n        $this->authorize('update', $document);\n\n        $document->locations()->syncWithoutDetaching([$location->id]);\n\n        return response()->noContent();\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Document $document\n     * @param \\App\\Models\\Location $location\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(\n        Request $request,\n        Document $document,\n        Location $location\n    ) {\n        $this->authorize('update', $document);\n\n        $document->locations()->detach($location);\n\n        return response()->noContent();\n    }\n}\n",
            "module": "crud:22",
            "path": "/app/Http/Controllers/Api/DocumentLocationsController.php"
          },
          "/tests/Feature/Api/DocumentLocationsTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Document;\nuse App\\Models\\Location;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass DocumentLocationsTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_document_locations()\n    {\n        $document = Document::factory()->create();\n        $location = Location::factory()->create();\n\n        $document->locations()->attach($location);\n\n        $response = $this->getJson(\n            route('api.documents.locations.index', $document)\n        );\n\n        $response->assertOk()->assertSee($location->continent);\n    }\n\n    /**\n     * @test\n     */\n    public function it_can_attach_locations_to_document()\n    {\n        $document = Document::factory()->create();\n        $location = Location::factory()->create();\n\n        $response = $this->postJson(\n            route('api.documents.locations.store', [$document, $location])\n        );\n\n        $response->assertNoContent();\n\n        $this->assertTrue(\n            $document\n                ->locations()\n                ->where('locations.id', $location->id)\n                ->exists()\n        );\n    }\n\n    /**\n     * @test\n     */\n    public function it_can_detach_locations_from_document()\n    {\n        $document = Document::factory()->create();\n        $location = Location::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.documents.locations.store', [$document, $location])\n        );\n\n        $response->assertNoContent();\n\n        $this->assertFalse(\n            $document\n                ->locations()\n                ->where('locations.id', $location->id)\n                ->exists()\n        );\n    }\n}\n",
            "module": "crud:22",
            "path": "/tests/Feature/Api/DocumentLocationsTest.php"
          },
          "/app/Http/Controllers/Api/LocationDocumentsController.php": {
            "deleteOnGeneration": true,
            "content": "<?php\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Location;\nuse App\\Models\\Document;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\DocumentCollection;\n\nclass LocationDocumentsController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Location $location\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request, Location $location)\n    {\n        $this->authorize('view', $location);\n\n        $search = $request->get('search', '');\n\n        $documents = $location\n            ->documents()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new DocumentCollection($documents);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Location $location\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(\n        Request $request,\n        Location $location,\n        Document $document\n    ) {\n        $this->authorize('update', $location);\n\n        $location->documents()->syncWithoutDetaching([$document->id]);\n\n        return response()->noContent();\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Location $location\n     * @param \\App\\Models\\Document $document\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(\n        Request $request,\n        Location $location,\n        Document $document\n    ) {\n        $this->authorize('update', $location);\n\n        $location->documents()->detach($document);\n\n        return response()->noContent();\n    }\n}\n",
            "module": "crud:15",
            "path": "/app/Http/Controllers/Api/LocationDocumentsController.php"
          },
          "/tests/Feature/Api/LocationDocumentsTest.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Location;\nuse App\\Models\\Document;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass LocationDocumentsTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_location_documents()\n    {\n        $location = Location::factory()->create();\n        $document = Document::factory()->create();\n\n        $location->documents()->attach($document);\n\n        $response = $this->getJson(\n            route('api.locations.documents.index', $location)\n        );\n\n        $response->assertOk()->assertSee($document->slug);\n    }\n\n    /**\n     * @test\n     */\n    public function it_can_attach_documents_to_location()\n    {\n        $location = Location::factory()->create();\n        $document = Document::factory()->create();\n\n        $response = $this->postJson(\n            route('api.locations.documents.store', [$location, $document])\n        );\n\n        $response->assertNoContent();\n\n        $this->assertTrue(\n            $location\n                ->documents()\n                ->where('documents.id', $document->id)\n                ->exists()\n        );\n    }\n\n    /**\n     * @test\n     */\n    public function it_can_detach_documents_from_location()\n    {\n        $location = Location::factory()->create();\n        $document = Document::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.locations.documents.store', [$location, $document])\n        );\n\n        $response->assertNoContent();\n\n        $this->assertFalse(\n            $location\n                ->documents()\n                ->where('documents.id', $document->id)\n                ->exists()\n        );\n    }\n}\n",
            "module": "crud:15",
            "path": "/tests/Feature/Api/LocationDocumentsTest.php"
          },
          "/database/migrations/2021_04_07_000017_create_document_location_table.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateDocumentLocationTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('document_location', function (Blueprint $table) {\n            $table->unsignedBigInteger('document_id');\n            $table->unsignedBigInteger('location_id');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('document_location');\n    }\n}\n",
            "module": "entity:52",
            "path": "/database/migrations/2021_04_07_000017_create_document_location_table.php"
          },
          "/database/migrations/2021_04_07_009013_add_foreigns_to_document_location_table.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass AddForeignsToDocumentLocationTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::table('document_location', function (Blueprint $table) {\n            $table\n                ->foreign('document_id')\n                ->references('id')\n                ->on('documents');\n\n            $table\n                ->foreign('location_id')\n                ->references('id')\n                ->on('locations');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::table('document_location', function (Blueprint $table) {\n            $table->dropForeign(['document_id']);\n            $table->dropForeign(['location_id']);\n        });\n    }\n}\n",
            "module": "entity:52|entity:39|entity:26",
            "path": "/database/migrations/2021_04_07_009013_add_foreigns_to_document_location_table.php"
          },
          "/database/migrations/2021_04_07_000010_create_collection_document_table.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateCollectionDocumentTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('collection_document', function (Blueprint $table) {\n            $table->unsignedBigInteger('document_id');\n            $table->unsignedBigInteger('collection_id');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('collection_document');\n    }\n}\n",
            "module": "entity:55",
            "path": "/database/migrations/2021_04_07_000010_create_collection_document_table.php"
          },
          "/database/migrations/2021_04_07_000012_create_creator_document_table.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateCreatorDocumentTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('creator_document', function (Blueprint $table) {\n            $table->unsignedBigInteger('document_id');\n            $table->unsignedBigInteger('creator_id');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('creator_document');\n    }\n}\n",
            "module": "entity:56",
            "path": "/database/migrations/2021_04_07_000012_create_creator_document_table.php"
          },
          "/database/migrations/2021_04_07_009011_add_foreigns_to_collection_document_table.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass AddForeignsToCollectionDocumentTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::table('collection_document', function (Blueprint $table) {\n            $table\n                ->foreign('document_id')\n                ->references('id')\n                ->on('documents');\n\n            $table\n                ->foreign('collection_id')\n                ->references('id')\n                ->on('collections');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::table('collection_document', function (Blueprint $table) {\n            $table->dropForeign(['document_id']);\n            $table->dropForeign(['collection_id']);\n        });\n    }\n}\n",
            "module": "entity:55|entity:39|entity:29",
            "path": "/database/migrations/2021_04_07_009011_add_foreigns_to_collection_document_table.php"
          },
          "/database/migrations/2021_04_07_009012_add_foreigns_to_creator_document_table.php": {
            "deleteOnGeneration": true,
            "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass AddForeignsToCreatorDocumentTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::table('creator_document', function (Blueprint $table) {\n            $table\n                ->foreign('document_id')\n                ->references('id')\n                ->on('documents');\n\n            $table\n                ->foreign('creator_id')\n                ->references('id')\n                ->on('creators');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::table('creator_document', function (Blueprint $table) {\n            $table->dropForeign(['document_id']);\n            $table->dropForeign(['creator_id']);\n        });\n    }\n}\n",
            "module": "entity:56|entity:39|entity:30",
            "path": "/database/migrations/2021_04_07_009012_add_foreigns_to_creator_document_table.php"
          }
        },
        "skippedFiles": {},
        "removedModules": [],
        "migrationsDate": "2021_04_07",
        "hasFixedForeignCallbacks": true,
        "hasFixedMigrations": true,
        "id": 3,
        "createdAt": "2021-04-07 06:26:20",
        "updatedAt": "2021-10-11 21:41:59",
        "pluginsData": {}
      }
    },
    "manytomanycomponents": {},
    "hasmanydetails": {},
    "morphrelationships": {}
  },
  "exportedItems": [
    "projects:3"
  ],
  "exportedRelationships": [
    "Project:3:cruds",
    "Crud:22:inputs",
    "Crud:22:manyToManyComponents",
    "Crud:22:hasManyDetails",
    "Crud:18:inputs",
    "Crud:18:manyToManyComponents",
    "Crud:18:hasManyDetails",
    "Crud:16:inputs",
    "Crud:16:manyToManyComponents",
    "Crud:16:hasManyDetails",
    "Crud:20:inputs",
    "Crud:20:manyToManyComponents",
    "Crud:20:hasManyDetails",
    "Crud:17:inputs",
    "Crud:17:manyToManyComponents",
    "Crud:17:hasManyDetails",
    "Crud:15:inputs",
    "Crud:15:manyToManyComponents",
    "Crud:15:hasManyDetails",
    "Crud:19:inputs",
    "Crud:19:manyToManyComponents",
    "Crud:19:hasManyDetails",
    "Crud:23:inputs",
    "Crud:23:manyToManyComponents",
    "Crud:23:hasManyDetails",
    "Crud:24:inputs",
    "Crud:24:manyToManyComponents",
    "Crud:24:hasManyDetails",
    "Project:3:entities",
    "Entity:43:authProject",
    "Entity:43:cruds",
    "Entity:43:fields",
    "Field:232:inputs",
    "Field:232:foreign",
    "Field:232:relatedForeigns",
    "Field:232:basicParentRelationships",
    "Field:232:basicForeignRelationships",
    "Field:232:manyToManyModelRelationships",
    "Field:232:manyToManylocalModelRelationships",
    "Field:232:typedMorphRelationships",
    "Field:232:identifiedMorphRelationships",
    "Field:234:inputs",
    "Field:234:foreign",
    "Field:234:relatedForeigns",
    "Field:234:basicParentRelationships",
    "Field:234:basicForeignRelationships",
    "BasicRelationship:20:inputs",
    "BasicRelationship:20:contrary",
    "BasicRelationship:19:inputs",
    "BasicRelationship:19:contrary",
    "BasicRelationship:20:hasManyDetails",
    "BasicRelationship:19:hasManyDetails",
    "Field:234:manyToManyModelRelationships",
    "Field:234:manyToManylocalModelRelationships",
    "Field:234:typedMorphRelationships",
    "Field:234:identifiedMorphRelationships",
    "Field:235:inputs",
    "Field:235:foreign",
    "Field:235:relatedForeigns",
    "Field:235:basicParentRelationships",
    "Field:235:basicForeignRelationships",
    "BasicRelationship:22:inputs",
    "BasicRelationship:22:contrary",
    "BasicRelationship:21:inputs",
    "BasicRelationship:21:contrary",
    "BasicRelationship:22:hasManyDetails",
    "BasicRelationship:21:hasManyDetails",
    "Field:235:manyToManyModelRelationships",
    "Field:235:manyToManylocalModelRelationships",
    "Field:235:typedMorphRelationships",
    "Field:235:identifiedMorphRelationships",
    "Field:236:inputs",
    "Field:236:foreign",
    "Field:236:relatedForeigns",
    "Field:236:basicParentRelationships",
    "Field:236:basicForeignRelationships",
    "Field:236:manyToManyModelRelationships",
    "Field:236:manyToManylocalModelRelationships",
    "Field:236:typedMorphRelationships",
    "Field:236:identifiedMorphRelationships",
    "Field:237:inputs",
    "Field:237:foreign",
    "Field:237:relatedForeigns",
    "Field:237:basicParentRelationships",
    "Field:237:basicForeignRelationships",
    "Field:237:manyToManyModelRelationships",
    "Field:237:manyToManylocalModelRelationships",
    "Field:237:typedMorphRelationships",
    "Field:237:identifiedMorphRelationships",
    "Entity:43:foreigns",
    "Entity:43:pivotRelationships",
    "Entity:43:pivotMorphRelationships",
    "Entity:43:basicRelationships",
    "Entity:43:basicRelatedRelationships",
    "Entity:43:manyToManyRelationships",
    "Entity:43:manyToManyRelatedRelationships",
    "Entity:43:morphRelationships",
    "Entity:43:morphRelatedRelationships",
    "Entity:29:authProject",
    "Entity:29:cruds",
    "Entity:29:fields",
    "Field:153:inputs",
    "Field:153:foreign",
    "Field:153:relatedForeigns",
    "Field:153:basicParentRelationships",
    "Field:153:basicForeignRelationships",
    "Field:153:manyToManyModelRelationships",
    "Field:153:manyToManylocalModelRelationships",
    "Field:153:typedMorphRelationships",
    "Field:153:identifiedMorphRelationships",
    "Field:155:inputs",
    "Field:155:foreign",
    "Field:155:relatedForeigns",
    "Field:155:basicParentRelationships",
    "Field:155:basicForeignRelationships",
    "Field:155:manyToManyModelRelationships",
    "Field:155:manyToManylocalModelRelationships",
    "Field:155:typedMorphRelationships",
    "Field:155:identifiedMorphRelationships",
    "Field:154:inputs",
    "Field:154:foreign",
    "Field:154:relatedForeigns",
    "Field:154:basicParentRelationships",
    "Field:154:basicForeignRelationships",
    "Field:154:manyToManyModelRelationships",
    "Field:154:manyToManylocalModelRelationships",
    "Field:154:typedMorphRelationships",
    "Field:154:identifiedMorphRelationships",
    "Field:156:inputs",
    "Field:156:foreign",
    "Field:156:relatedForeigns",
    "Field:156:basicParentRelationships",
    "Field:156:basicForeignRelationships",
    "Field:156:manyToManyModelRelationships",
    "Field:156:manyToManylocalModelRelationships",
    "Field:156:typedMorphRelationships",
    "Field:156:identifiedMorphRelationships",
    "Entity:29:foreigns",
    "Entity:29:pivotRelationships",
    "Entity:29:pivotMorphRelationships",
    "Entity:29:basicRelationships",
    "Entity:29:basicRelatedRelationships",
    "Entity:29:manyToManyRelationships",
    "ManyToManyRelationship:37:contrary",
    "ManyToManyRelationship:38:contrary",
    "ManyToManyRelationship:37:components",
    "ManyToManyRelationship:38:components",
    "Entity:29:manyToManyRelatedRelationships",
    "Entity:29:morphRelationships",
    "Entity:29:morphRelatedRelationships",
    "Entity:55:authProject",
    "Entity:55:cruds",
    "Entity:55:fields",
    "Field:290:inputs",
    "Field:290:foreign",
    "Field:290:relatedForeigns",
    "Field:290:basicParentRelationships",
    "Field:290:basicForeignRelationships",
    "Field:290:manyToManyModelRelationships",
    "Field:290:manyToManylocalModelRelationships",
    "Field:290:typedMorphRelationships",
    "Field:290:identifiedMorphRelationships",
    "Field:291:inputs",
    "Field:291:foreign",
    "Field:291:relatedForeigns",
    "Field:291:basicParentRelationships",
    "Field:291:basicForeignRelationships",
    "Field:291:manyToManyModelRelationships",
    "Field:291:manyToManylocalModelRelationships",
    "Field:291:typedMorphRelationships",
    "Field:291:identifiedMorphRelationships",
    "Entity:55:foreigns",
    "Entity:55:pivotRelationships",
    "Entity:55:pivotMorphRelationships",
    "Entity:55:basicRelationships",
    "Entity:55:basicRelatedRelationships",
    "Entity:55:manyToManyRelationships",
    "Entity:55:manyToManyRelatedRelationships",
    "Entity:55:morphRelationships",
    "Entity:55:morphRelatedRelationships",
    "Entity:30:authProject",
    "Entity:30:cruds",
    "Entity:30:fields",
    "Field:157:inputs",
    "Field:157:foreign",
    "Field:157:relatedForeigns",
    "Field:157:basicParentRelationships",
    "Field:157:basicForeignRelationships",
    "Field:157:manyToManyModelRelationships",
    "Field:157:manyToManylocalModelRelationships",
    "Field:157:typedMorphRelationships",
    "Field:157:identifiedMorphRelationships",
    "Field:162:inputs",
    "Field:162:foreign",
    "Field:162:relatedForeigns",
    "Field:162:basicParentRelationships",
    "Field:162:basicForeignRelationships",
    "Field:162:manyToManyModelRelationships",
    "Field:162:manyToManylocalModelRelationships",
    "Field:162:typedMorphRelationships",
    "Field:162:identifiedMorphRelationships",
    "Field:163:inputs",
    "Field:163:foreign",
    "Field:163:relatedForeigns",
    "Field:163:basicParentRelationships",
    "Field:163:basicForeignRelationships",
    "Field:163:manyToManyModelRelationships",
    "Field:163:manyToManylocalModelRelationships",
    "Field:163:typedMorphRelationships",
    "Field:163:identifiedMorphRelationships",
    "Field:161:inputs",
    "Field:161:foreign",
    "Field:161:relatedForeigns",
    "Field:161:basicParentRelationships",
    "Field:161:basicForeignRelationships",
    "Field:161:manyToManyModelRelationships",
    "Field:161:manyToManylocalModelRelationships",
    "Field:161:typedMorphRelationships",
    "Field:161:identifiedMorphRelationships",
    "Field:160:inputs",
    "Field:160:foreign",
    "Field:160:relatedForeigns",
    "Field:160:basicParentRelationships",
    "Field:160:basicForeignRelationships",
    "Field:160:manyToManyModelRelationships",
    "Field:160:manyToManylocalModelRelationships",
    "Field:160:typedMorphRelationships",
    "Field:160:identifiedMorphRelationships",
    "Field:159:inputs",
    "Field:159:foreign",
    "Field:159:relatedForeigns",
    "Field:159:basicParentRelationships",
    "Field:159:basicForeignRelationships",
    "Field:159:manyToManyModelRelationships",
    "Field:159:manyToManylocalModelRelationships",
    "Field:159:typedMorphRelationships",
    "Field:159:identifiedMorphRelationships",
    "Field:158:inputs",
    "Field:158:foreign",
    "Field:158:relatedForeigns",
    "Field:158:basicParentRelationships",
    "Field:158:basicForeignRelationships",
    "Field:158:manyToManyModelRelationships",
    "Field:158:manyToManylocalModelRelationships",
    "Field:158:typedMorphRelationships",
    "Field:158:identifiedMorphRelationships",
    "Entity:30:foreigns",
    "Entity:30:pivotRelationships",
    "Entity:30:pivotMorphRelationships",
    "Entity:30:basicRelationships",
    "Entity:30:basicRelatedRelationships",
    "Entity:30:manyToManyRelationships",
    "ManyToManyRelationship:39:contrary",
    "ManyToManyRelationship:40:contrary",
    "ManyToManyRelationship:39:components",
    "ManyToManyRelationship:40:components",
    "Entity:30:manyToManyRelatedRelationships",
    "Entity:30:morphRelationships",
    "Entity:30:morphRelatedRelationships",
    "Entity:56:authProject",
    "Entity:56:cruds",
    "Entity:56:fields",
    "Field:292:inputs",
    "Field:292:foreign",
    "Field:292:relatedForeigns",
    "Field:292:basicParentRelationships",
    "Field:292:basicForeignRelationships",
    "Field:292:manyToManyModelRelationships",
    "Field:292:manyToManylocalModelRelationships",
    "Field:292:typedMorphRelationships",
    "Field:292:identifiedMorphRelationships",
    "Field:293:inputs",
    "Field:293:foreign",
    "Field:293:relatedForeigns",
    "Field:293:basicParentRelationships",
    "Field:293:basicForeignRelationships",
    "Field:293:manyToManyModelRelationships",
    "Field:293:manyToManylocalModelRelationships",
    "Field:293:typedMorphRelationships",
    "Field:293:identifiedMorphRelationships",
    "Entity:56:foreigns",
    "Entity:56:pivotRelationships",
    "Entity:56:pivotMorphRelationships",
    "Entity:56:basicRelationships",
    "Entity:56:basicRelatedRelationships",
    "Entity:56:manyToManyRelationships",
    "Entity:56:manyToManyRelatedRelationships",
    "Entity:56:morphRelationships",
    "Entity:56:morphRelatedRelationships",
    "Entity:39:authProject",
    "Entity:39:cruds",
    "Entity:39:fields",
    "Field:189:inputs",
    "Field:189:foreign",
    "Field:189:relatedForeigns",
    "Field:189:basicParentRelationships",
    "BasicRelationship:15:inputs",
    "BasicRelationship:15:contrary",
    "BasicRelationship:16:inputs",
    "BasicRelationship:16:contrary",
    "BasicRelationship:15:hasManyDetails",
    "BasicRelationship:16:hasManyDetails",
    "Field:189:basicForeignRelationships",
    "Field:189:manyToManyModelRelationships",
    "Field:189:manyToManylocalModelRelationships",
    "Field:189:typedMorphRelationships",
    "Field:189:identifiedMorphRelationships",
    "Field:190:inputs",
    "Field:190:foreign",
    "Field:190:relatedForeigns",
    "Field:190:basicParentRelationships",
    "Field:190:basicForeignRelationships",
    "Field:190:manyToManyModelRelationships",
    "Field:190:manyToManylocalModelRelationships",
    "Field:190:typedMorphRelationships",
    "Field:190:identifiedMorphRelationships",
    "Field:191:inputs",
    "Field:191:foreign",
    "Field:191:relatedForeigns",
    "Field:191:basicParentRelationships",
    "Field:191:basicForeignRelationships",
    "Field:191:manyToManyModelRelationships",
    "Field:191:manyToManylocalModelRelationships",
    "Field:191:typedMorphRelationships",
    "Field:191:identifiedMorphRelationships",
    "Field:192:inputs",
    "Field:192:foreign",
    "Field:192:relatedForeigns",
    "Field:192:basicParentRelationships",
    "Field:192:basicForeignRelationships",
    "Field:192:manyToManyModelRelationships",
    "Field:192:manyToManylocalModelRelationships",
    "Field:192:typedMorphRelationships",
    "Field:192:identifiedMorphRelationships",
    "Field:193:inputs",
    "Field:193:foreign",
    "Field:193:relatedForeigns",
    "Field:193:basicParentRelationships",
    "Field:193:basicForeignRelationships",
    "Field:193:manyToManyModelRelationships",
    "Field:193:manyToManylocalModelRelationships",
    "Field:193:typedMorphRelationships",
    "Field:193:identifiedMorphRelationships",
    "Field:194:inputs",
    "Field:194:foreign",
    "Field:194:relatedForeigns",
    "Field:194:basicParentRelationships",
    "Field:194:basicForeignRelationships",
    "Field:194:manyToManyModelRelationships",
    "Field:194:manyToManylocalModelRelationships",
    "Field:194:typedMorphRelationships",
    "Field:194:identifiedMorphRelationships",
    "Field:195:inputs",
    "Field:195:foreign",
    "Field:195:relatedForeigns",
    "Field:195:basicParentRelationships",
    "Field:195:basicForeignRelationships",
    "Field:195:manyToManyModelRelationships",
    "Field:195:manyToManylocalModelRelationships",
    "Field:195:typedMorphRelationships",
    "Field:195:identifiedMorphRelationships",
    "Field:196:inputs",
    "Field:196:foreign",
    "Field:196:relatedForeigns",
    "Field:196:basicParentRelationships",
    "Field:196:basicForeignRelationships",
    "Field:196:manyToManyModelRelationships",
    "Field:196:manyToManylocalModelRelationships",
    "Field:196:typedMorphRelationships",
    "Field:196:identifiedMorphRelationships",
    "Field:197:inputs",
    "Field:197:foreign",
    "Field:197:relatedForeigns",
    "Field:197:basicParentRelationships",
    "Field:197:basicForeignRelationships",
    "Field:197:manyToManyModelRelationships",
    "Field:197:manyToManylocalModelRelationships",
    "Field:197:typedMorphRelationships",
    "Field:197:identifiedMorphRelationships",
    "Field:198:inputs",
    "Field:198:foreign",
    "Field:198:relatedForeigns",
    "Field:198:basicParentRelationships",
    "Field:198:basicForeignRelationships",
    "Field:198:manyToManyModelRelationships",
    "Field:198:manyToManylocalModelRelationships",
    "Field:198:typedMorphRelationships",
    "Field:198:identifiedMorphRelationships",
    "Field:214:inputs",
    "Field:214:foreign",
    "Field:214:relatedForeigns",
    "Field:214:basicParentRelationships",
    "Field:214:basicForeignRelationships",
    "Field:214:manyToManyModelRelationships",
    "Field:214:manyToManylocalModelRelationships",
    "Field:214:typedMorphRelationships",
    "Field:214:identifiedMorphRelationships",
    "Field:207:inputs",
    "Field:207:foreign",
    "Field:207:relatedForeigns",
    "Field:207:basicParentRelationships",
    "Field:207:basicForeignRelationships",
    "Field:207:manyToManyModelRelationships",
    "Field:207:manyToManylocalModelRelationships",
    "Field:207:typedMorphRelationships",
    "Field:207:identifiedMorphRelationships",
    "Field:208:inputs",
    "Field:208:foreign",
    "Field:208:relatedForeigns",
    "Field:208:basicParentRelationships",
    "Field:208:basicForeignRelationships",
    "Field:208:manyToManyModelRelationships",
    "Field:208:manyToManylocalModelRelationships",
    "Field:208:typedMorphRelationships",
    "Field:208:identifiedMorphRelationships",
    "Field:211:inputs",
    "Field:211:foreign",
    "Field:211:relatedForeigns",
    "Field:211:basicParentRelationships",
    "Field:211:basicForeignRelationships",
    "Field:211:manyToManyModelRelationships",
    "Field:211:manyToManylocalModelRelationships",
    "Field:211:typedMorphRelationships",
    "Field:211:identifiedMorphRelationships",
    "Field:199:inputs",
    "Field:199:foreign",
    "Field:199:relatedForeigns",
    "Field:199:basicParentRelationships",
    "Field:199:basicForeignRelationships",
    "Field:199:manyToManyModelRelationships",
    "Field:199:manyToManylocalModelRelationships",
    "Field:199:typedMorphRelationships",
    "Field:199:identifiedMorphRelationships",
    "Field:210:inputs",
    "Field:210:foreign",
    "Field:210:relatedForeigns",
    "Field:210:basicParentRelationships",
    "Field:210:basicForeignRelationships",
    "Field:210:manyToManyModelRelationships",
    "Field:210:manyToManylocalModelRelationships",
    "Field:210:typedMorphRelationships",
    "Field:210:identifiedMorphRelationships",
    "Field:209:inputs",
    "Field:209:foreign",
    "Field:209:relatedForeigns",
    "Field:209:basicParentRelationships",
    "Field:209:basicForeignRelationships",
    "Field:209:manyToManyModelRelationships",
    "Field:209:manyToManylocalModelRelationships",
    "Field:209:typedMorphRelationships",
    "Field:209:identifiedMorphRelationships",
    "Field:206:inputs",
    "Field:206:foreign",
    "Field:206:relatedForeigns",
    "Field:206:basicParentRelationships",
    "Field:206:basicForeignRelationships",
    "Field:206:manyToManyModelRelationships",
    "Field:206:manyToManylocalModelRelationships",
    "Field:206:typedMorphRelationships",
    "Field:206:identifiedMorphRelationships",
    "Entity:39:foreigns",
    "Entity:39:pivotRelationships",
    "Entity:39:pivotMorphRelationships",
    "Entity:39:basicRelationships",
    "Entity:39:basicRelatedRelationships",
    "Entity:39:manyToManyRelationships",
    "ManyToManyRelationship:20:contrary",
    "ManyToManyRelationship:19:contrary",
    "ManyToManyRelationship:20:components",
    "ManyToManyRelationship:19:components",
    "ManyToManyRelationship:18:contrary",
    "ManyToManyRelationship:17:contrary",
    "ManyToManyRelationship:18:components",
    "ManyToManyRelationship:17:components",
    "ManyToManyRelationship:31:contrary",
    "ManyToManyRelationship:32:contrary",
    "ManyToManyRelationship:31:components",
    "ManyToManyRelationship:32:components",
    "Entity:39:manyToManyRelatedRelationships",
    "Entity:39:morphRelationships",
    "Entity:39:morphRelatedRelationships",
    "Entity:36:authProject",
    "Entity:36:cruds",
    "Entity:36:fields",
    "Field:183:inputs",
    "Field:183:foreign",
    "Field:183:relatedForeigns",
    "Field:183:basicParentRelationships",
    "Field:183:basicForeignRelationships",
    "Field:183:manyToManyModelRelationships",
    "Field:183:manyToManylocalModelRelationships",
    "Field:183:typedMorphRelationships",
    "Field:183:identifiedMorphRelationships",
    "Field:184:inputs",
    "Field:184:foreign",
    "Field:184:relatedForeigns",
    "Field:184:basicParentRelationships",
    "Field:184:basicForeignRelationships",
    "Field:184:manyToManyModelRelationships",
    "Field:184:manyToManylocalModelRelationships",
    "Field:184:typedMorphRelationships",
    "Field:184:identifiedMorphRelationships",
    "Entity:36:foreigns",
    "Entity:36:pivotRelationships",
    "Entity:36:pivotMorphRelationships",
    "Entity:36:basicRelationships",
    "Entity:36:basicRelatedRelationships",
    "Entity:36:manyToManyRelationships",
    "Entity:36:manyToManyRelatedRelationships",
    "Entity:36:morphRelationships",
    "Entity:36:morphRelatedRelationships",
    "Entity:52:authProject",
    "Entity:52:cruds",
    "Entity:52:fields",
    "Field:285:inputs",
    "Field:285:foreign",
    "Field:285:relatedForeigns",
    "Field:285:basicParentRelationships",
    "Field:285:basicForeignRelationships",
    "Field:285:manyToManyModelRelationships",
    "Field:285:manyToManylocalModelRelationships",
    "Field:285:typedMorphRelationships",
    "Field:285:identifiedMorphRelationships",
    "Field:284:inputs",
    "Field:284:foreign",
    "Field:284:relatedForeigns",
    "Field:284:basicParentRelationships",
    "Field:284:basicForeignRelationships",
    "Field:284:manyToManyModelRelationships",
    "Field:284:manyToManylocalModelRelationships",
    "Field:284:typedMorphRelationships",
    "Field:284:identifiedMorphRelationships",
    "Entity:52:foreigns",
    "Entity:52:pivotRelationships",
    "Entity:52:pivotMorphRelationships",
    "Entity:52:basicRelationships",
    "Entity:52:basicRelatedRelationships",
    "Entity:52:manyToManyRelationships",
    "Entity:52:manyToManyRelatedRelationships",
    "Entity:52:morphRelationships",
    "Entity:52:morphRelatedRelationships",
    "Entity:35:authProject",
    "Entity:35:cruds",
    "Entity:35:fields",
    "Field:182:inputs",
    "Field:182:foreign",
    "Field:182:relatedForeigns",
    "Field:182:basicParentRelationships",
    "Field:182:basicForeignRelationships",
    "Field:182:manyToManyModelRelationships",
    "Field:182:manyToManylocalModelRelationships",
    "Field:182:typedMorphRelationships",
    "Field:182:identifiedMorphRelationships",
    "Field:181:inputs",
    "Field:181:foreign",
    "Field:181:relatedForeigns",
    "Field:181:basicParentRelationships",
    "Field:181:basicForeignRelationships",
    "Field:181:manyToManyModelRelationships",
    "Field:181:manyToManylocalModelRelationships",
    "Field:181:typedMorphRelationships",
    "Field:181:identifiedMorphRelationships",
    "Entity:35:foreigns",
    "Entity:35:pivotRelationships",
    "Entity:35:pivotMorphRelationships",
    "Entity:35:basicRelationships",
    "Entity:35:basicRelatedRelationships",
    "Entity:35:manyToManyRelationships",
    "Entity:35:manyToManyRelatedRelationships",
    "Entity:35:morphRelationships",
    "Entity:35:morphRelatedRelationships",
    "Entity:40:authProject",
    "Entity:40:cruds",
    "Entity:40:fields",
    "Field:215:inputs",
    "Field:215:foreign",
    "Field:215:relatedForeigns",
    "Field:215:basicParentRelationships",
    "Field:215:basicForeignRelationships",
    "Field:215:manyToManyModelRelationships",
    "Field:215:manyToManylocalModelRelationships",
    "Field:215:typedMorphRelationships",
    "Field:215:identifiedMorphRelationships",
    "Field:217:inputs",
    "Field:217:foreign",
    "Field:217:relatedForeigns",
    "Field:217:basicParentRelationships",
    "Field:217:basicForeignRelationships",
    "Field:217:manyToManyModelRelationships",
    "Field:217:manyToManylocalModelRelationships",
    "Field:217:typedMorphRelationships",
    "Field:217:identifiedMorphRelationships",
    "Field:216:inputs",
    "Field:216:foreign",
    "Field:216:relatedForeigns",
    "Field:216:basicParentRelationships",
    "Field:216:basicForeignRelationships",
    "Field:216:manyToManyModelRelationships",
    "Field:216:manyToManylocalModelRelationships",
    "Field:216:typedMorphRelationships",
    "Field:216:identifiedMorphRelationships",
    "Field:218:inputs",
    "Field:218:foreign",
    "Field:218:relatedForeigns",
    "Field:218:basicParentRelationships",
    "Field:218:basicForeignRelationships",
    "Field:218:manyToManyModelRelationships",
    "Field:218:manyToManylocalModelRelationships",
    "Field:218:typedMorphRelationships",
    "Field:218:identifiedMorphRelationships",
    "Field:219:inputs",
    "Field:219:foreign",
    "Field:219:relatedForeigns",
    "Field:219:basicParentRelationships",
    "Field:219:basicForeignRelationships",
    "Field:219:manyToManyModelRelationships",
    "Field:219:manyToManylocalModelRelationships",
    "Field:219:typedMorphRelationships",
    "Field:219:identifiedMorphRelationships",
    "Field:220:inputs",
    "Field:220:foreign",
    "Field:220:relatedForeigns",
    "Field:220:basicParentRelationships",
    "Field:220:basicForeignRelationships",
    "Field:220:manyToManyModelRelationships",
    "Field:220:manyToManylocalModelRelationships",
    "Field:220:typedMorphRelationships",
    "Field:220:identifiedMorphRelationships",
    "Field:221:inputs",
    "Field:221:foreign",
    "Field:221:relatedForeigns",
    "Field:221:basicParentRelationships",
    "Field:221:basicForeignRelationships",
    "Field:221:manyToManyModelRelationships",
    "Field:221:manyToManylocalModelRelationships",
    "Field:221:typedMorphRelationships",
    "Field:221:identifiedMorphRelationships",
    "Field:222:inputs",
    "Field:222:foreign",
    "Field:222:relatedForeigns",
    "Field:222:basicParentRelationships",
    "Field:222:basicForeignRelationships",
    "Field:222:manyToManyModelRelationships",
    "Field:222:manyToManylocalModelRelationships",
    "Field:222:typedMorphRelationships",
    "Field:222:identifiedMorphRelationships",
    "Field:223:inputs",
    "Field:223:foreign",
    "Field:223:relatedForeigns",
    "Field:223:basicParentRelationships",
    "Field:223:basicForeignRelationships",
    "Field:223:manyToManyModelRelationships",
    "Field:223:manyToManylocalModelRelationships",
    "Field:223:typedMorphRelationships",
    "Field:223:identifiedMorphRelationships",
    "Field:224:inputs",
    "Field:224:foreign",
    "Field:224:relatedForeigns",
    "Field:224:basicParentRelationships",
    "Field:224:basicForeignRelationships",
    "Field:224:manyToManyModelRelationships",
    "Field:224:manyToManylocalModelRelationships",
    "Field:224:typedMorphRelationships",
    "Field:224:identifiedMorphRelationships",
    "Field:225:inputs",
    "Field:225:foreign",
    "Field:225:relatedForeigns",
    "Field:225:basicParentRelationships",
    "Field:225:basicForeignRelationships",
    "Field:225:manyToManyModelRelationships",
    "Field:225:manyToManylocalModelRelationships",
    "Field:225:typedMorphRelationships",
    "Field:225:identifiedMorphRelationships",
    "Field:226:inputs",
    "Field:226:foreign",
    "Field:226:relatedForeigns",
    "Field:226:basicParentRelationships",
    "Field:226:basicForeignRelationships",
    "Field:226:manyToManyModelRelationships",
    "Field:226:manyToManylocalModelRelationships",
    "Field:226:typedMorphRelationships",
    "Field:226:identifiedMorphRelationships",
    "Entity:40:foreigns",
    "Entity:40:pivotRelationships",
    "Entity:40:pivotMorphRelationships",
    "Entity:40:basicRelationships",
    "Entity:40:basicRelatedRelationships",
    "Entity:40:manyToManyRelationships",
    "Entity:40:manyToManyRelatedRelationships",
    "Entity:40:morphRelationships",
    "Entity:40:morphRelatedRelationships",
    "Entity:28:authProject",
    "Entity:28:cruds",
    "Entity:28:fields",
    "Field:150:inputs",
    "Field:150:foreign",
    "Field:150:relatedForeigns",
    "Field:150:basicParentRelationships",
    "Field:150:basicForeignRelationships",
    "Field:150:manyToManyModelRelationships",
    "Field:150:manyToManylocalModelRelationships",
    "Field:150:typedMorphRelationships",
    "Field:150:identifiedMorphRelationships",
    "Field:151:inputs",
    "Field:151:foreign",
    "Field:151:relatedForeigns",
    "Field:151:basicParentRelationships",
    "Field:151:basicForeignRelationships",
    "Field:151:manyToManyModelRelationships",
    "Field:151:manyToManylocalModelRelationships",
    "Field:151:typedMorphRelationships",
    "Field:151:identifiedMorphRelationships",
    "Field:152:inputs",
    "Field:152:foreign",
    "Field:152:relatedForeigns",
    "Field:152:basicParentRelationships",
    "Field:152:basicForeignRelationships",
    "Field:152:manyToManyModelRelationships",
    "Field:152:manyToManylocalModelRelationships",
    "Field:152:typedMorphRelationships",
    "Field:152:identifiedMorphRelationships",
    "Entity:28:foreigns",
    "Entity:28:pivotRelationships",
    "Entity:28:pivotMorphRelationships",
    "Entity:28:basicRelationships",
    "Entity:28:basicRelatedRelationships",
    "Entity:28:manyToManyRelationships",
    "Entity:28:manyToManyRelatedRelationships",
    "Entity:28:morphRelationships",
    "Entity:28:morphRelatedRelationships",
    "Entity:26:authProject",
    "Entity:26:cruds",
    "Entity:26:fields",
    "Field:144:inputs",
    "Field:144:foreign",
    "Field:144:relatedForeigns",
    "Field:144:basicParentRelationships",
    "Field:144:basicForeignRelationships",
    "Field:144:manyToManyModelRelationships",
    "Field:144:manyToManylocalModelRelationships",
    "Field:144:typedMorphRelationships",
    "Field:144:identifiedMorphRelationships",
    "Field:145:inputs",
    "Field:145:foreign",
    "Field:145:relatedForeigns",
    "Field:145:basicParentRelationships",
    "Field:145:basicForeignRelationships",
    "Field:145:manyToManyModelRelationships",
    "Field:145:manyToManylocalModelRelationships",
    "Field:145:typedMorphRelationships",
    "Field:145:identifiedMorphRelationships",
    "Field:146:inputs",
    "Field:146:foreign",
    "Field:146:relatedForeigns",
    "Field:146:basicParentRelationships",
    "Field:146:basicForeignRelationships",
    "Field:146:manyToManyModelRelationships",
    "Field:146:manyToManylocalModelRelationships",
    "Field:146:typedMorphRelationships",
    "Field:146:identifiedMorphRelationships",
    "Field:147:inputs",
    "Field:147:foreign",
    "Field:147:relatedForeigns",
    "Field:147:basicParentRelationships",
    "Field:147:basicForeignRelationships",
    "Field:147:manyToManyModelRelationships",
    "Field:147:manyToManylocalModelRelationships",
    "Field:147:typedMorphRelationships",
    "Field:147:identifiedMorphRelationships",
    "Entity:26:foreigns",
    "Entity:26:pivotRelationships",
    "Entity:26:pivotMorphRelationships",
    "Entity:26:basicRelationships",
    "Entity:26:basicRelatedRelationships",
    "Entity:26:manyToManyRelationships",
    "Entity:26:manyToManyRelatedRelationships",
    "Entity:26:morphRelationships",
    "Entity:26:morphRelatedRelationships",
    "Entity:27:authProject",
    "Entity:27:cruds",
    "Entity:27:fields",
    "Field:148:inputs",
    "Field:148:foreign",
    "Field:148:relatedForeigns",
    "Field:148:basicParentRelationships",
    "Field:148:basicForeignRelationships",
    "Field:148:manyToManyModelRelationships",
    "Field:148:manyToManylocalModelRelationships",
    "Field:148:typedMorphRelationships",
    "Field:148:identifiedMorphRelationships",
    "Field:149:inputs",
    "Field:149:foreign",
    "Field:149:relatedForeigns",
    "Field:149:basicParentRelationships",
    "Field:149:basicForeignRelationships",
    "Field:149:manyToManyModelRelationships",
    "Field:149:manyToManylocalModelRelationships",
    "Field:149:typedMorphRelationships",
    "Field:149:identifiedMorphRelationships",
    "Entity:27:foreigns",
    "Entity:27:pivotRelationships",
    "Entity:27:pivotMorphRelationships",
    "Entity:27:basicRelationships",
    "Entity:27:basicRelatedRelationships",
    "Entity:27:manyToManyRelationships",
    "Entity:27:manyToManyRelatedRelationships",
    "Entity:27:morphRelationships",
    "Entity:27:morphRelatedRelationships",
    "Entity:31:authProject",
    "Entity:31:cruds",
    "Entity:31:fields",
    "Field:164:inputs",
    "Field:164:foreign",
    "Field:164:relatedForeigns",
    "Field:164:basicParentRelationships",
    "Field:164:basicForeignRelationships",
    "Field:164:manyToManyModelRelationships",
    "Field:164:manyToManylocalModelRelationships",
    "Field:164:typedMorphRelationships",
    "Field:164:identifiedMorphRelationships",
    "Field:165:inputs",
    "Field:165:foreign",
    "Field:165:relatedForeigns",
    "Field:165:basicParentRelationships",
    "Field:165:basicForeignRelationships",
    "Field:165:manyToManyModelRelationships",
    "Field:165:manyToManylocalModelRelationships",
    "Field:165:typedMorphRelationships",
    "Field:165:identifiedMorphRelationships",
    "Field:166:inputs",
    "Field:166:foreign",
    "Field:166:relatedForeigns",
    "Field:166:basicParentRelationships",
    "Field:166:basicForeignRelationships",
    "Field:166:manyToManyModelRelationships",
    "Field:166:manyToManylocalModelRelationships",
    "Field:166:typedMorphRelationships",
    "Field:166:identifiedMorphRelationships",
    "Field:167:inputs",
    "Field:167:foreign",
    "Field:167:relatedForeigns",
    "Field:167:basicParentRelationships",
    "Field:167:basicForeignRelationships",
    "Field:167:manyToManyModelRelationships",
    "Field:167:manyToManylocalModelRelationships",
    "Field:167:typedMorphRelationships",
    "Field:167:identifiedMorphRelationships",
    "Field:168:inputs",
    "Field:168:foreign",
    "Field:168:relatedForeigns",
    "Field:168:basicParentRelationships",
    "Field:168:basicForeignRelationships",
    "Field:168:manyToManyModelRelationships",
    "Field:168:manyToManylocalModelRelationships",
    "Field:168:typedMorphRelationships",
    "Field:168:identifiedMorphRelationships",
    "Field:169:inputs",
    "Field:169:foreign",
    "Field:169:relatedForeigns",
    "Field:169:basicParentRelationships",
    "Field:169:basicForeignRelationships",
    "Field:169:manyToManyModelRelationships",
    "Field:169:manyToManylocalModelRelationships",
    "Field:169:typedMorphRelationships",
    "Field:169:identifiedMorphRelationships",
    "Field:170:inputs",
    "Field:170:foreign",
    "Field:170:relatedForeigns",
    "Field:170:basicParentRelationships",
    "Field:170:basicForeignRelationships",
    "Field:170:manyToManyModelRelationships",
    "Field:170:manyToManylocalModelRelationships",
    "Field:170:typedMorphRelationships",
    "Field:170:identifiedMorphRelationships",
    "Field:171:inputs",
    "Field:171:foreign",
    "Field:171:relatedForeigns",
    "Field:171:basicParentRelationships",
    "Field:171:basicForeignRelationships",
    "Field:171:manyToManyModelRelationships",
    "Field:171:manyToManylocalModelRelationships",
    "Field:171:typedMorphRelationships",
    "Field:171:identifiedMorphRelationships",
    "Field:173:inputs",
    "Field:173:foreign",
    "Field:173:relatedForeigns",
    "Field:173:basicParentRelationships",
    "Field:173:basicForeignRelationships",
    "Field:173:manyToManyModelRelationships",
    "Field:173:manyToManylocalModelRelationships",
    "Field:173:typedMorphRelationships",
    "Field:173:identifiedMorphRelationships",
    "Field:174:inputs",
    "Field:174:foreign",
    "Field:174:relatedForeigns",
    "Field:174:basicParentRelationships",
    "Field:174:basicForeignRelationships",
    "Field:174:manyToManyModelRelationships",
    "Field:174:manyToManylocalModelRelationships",
    "Field:174:typedMorphRelationships",
    "Field:174:identifiedMorphRelationships",
    "Entity:31:foreigns",
    "Entity:31:pivotRelationships",
    "Entity:31:pivotMorphRelationships",
    "Entity:31:basicRelationships",
    "Entity:31:basicRelatedRelationships",
    "Entity:31:manyToManyRelationships",
    "Entity:31:manyToManyRelatedRelationships",
    "Entity:31:morphRelationships",
    "Entity:31:morphRelatedRelationships"
  ]
}
